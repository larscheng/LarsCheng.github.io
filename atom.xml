<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LarsCheng</title>
  
  <subtitle>分享Java技术, 记录点滴生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.larscheng.com/"/>
  <updated>2022-01-11T08:46:10.457Z</updated>
  <id>https://www.larscheng.com/</id>
  
  <author>
    <name>LarsCheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>valine访问leancloud国际版异常,评论失效修复</title>
    <link href="https://www.larscheng.com/comment-fix/"/>
    <id>https://www.larscheng.com/comment-fix/</id>
    <published>2022-01-11T08:34:27.000Z</published>
    <updated>2022-01-11T08:46:10.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="起因"><a class="markdownIt-Anchor" href="#起因"></a> 起因</h2><p>太久没维护博客了，最近发现Valine评论都展示不出来，看了下console发现是leancloud访问出了问题</p><blockquote><p>查了下前因后果，大概就是LeanCloud对部分域名不再进行维护了，如果继续使用老的域名去拉取评论数据必然失败。</p></blockquote><p>这里和大家同步下我的环境</p><ul><li>leancloud国际版</li><li>报错域名：<a href="http://us-api.leancloud.cn" target="_blank" rel="noopener">us-api.leancloud.cn</a></li></ul><p>调整方案如下</p><h2 id="获取新域名"><a class="markdownIt-Anchor" href="#获取新域名"></a> 获取新域名</h2><ul><li>登录leancloud后台</li><li>查询自己的APPID</li></ul><p>替换<code>https://你的appid前8位.api.lncldglobal.com</code>获得新域名</p><h2 id="修改valine代码"><a class="markdownIt-Anchor" href="#修改valine代码"></a> 修改valine代码</h2><ul><li>主题配置文件中的valine配置增加配置： severURLs（私有leancloud域名）</li><li>修改主题中valine对应的js源码：加载私有域名</li><li>更新av-min.js文件：确保私有域名可生效</li></ul><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><p>不同的主题可能涉及到的代码位置不同，但是调整思路类似，这里我贴下我的主题配置和涉及到调整的代码片段</p><p>主题配置文件config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># if you want use valine,please set this value is ture</span></span><br><span class="line"><span class="attr">  appId:</span> <span class="number">12345678</span> <span class="comment"># leancloud application app id</span></span><br><span class="line"><span class="attr">  appKey:</span> <span class="number">1234123123123</span> <span class="comment"># leancloud application app key</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># valine mail notify (true/false) https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># valine verify code (true/false)</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">monsterid</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line"><span class="attr">  lang:</span> <span class="string">zh-cn</span> <span class="comment"># i18n: zh-cn/en/tw</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">📢📢📢留下邮箱可以收到回复提醒哦~</span> </span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment">#valine comment header inf</span></span><br><span class="line"><span class="attr">  serverURLs:</span> <span class="attr">https://12345678.api.lncldglobal.com</span>  <span class="comment">#替换为你的私有域名</span></span><br></pre></td></tr></table></figure><p>valine对应的js源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新av-min.js</span></span><br><span class="line">&lt;script src=<span class="string">"//code.bdstatic.com/npm/leancloud-storage@4.12.0/dist/av-min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"//unpkg.com/valine/dist/Valine.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> GUEST_INFO = [<span class="string">'nick'</span>,<span class="string">'mail'</span>,<span class="string">'link'</span>];</span><br><span class="line">    <span class="keyword">var</span> guest_info = <span class="string">'&lt;%= theme.valine.guest_info %&gt;'</span>.split(<span class="string">','</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GUEST_INFO.indexOf(item) &gt; <span class="number">-1</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> notify = <span class="string">'&lt;%= theme.valine.notify %&gt;'</span> == <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> verify = <span class="string">'&lt;%= theme.valine.verify %&gt;'</span> == <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> valine = <span class="keyword">new</span> Valine();</span><br><span class="line">    valine.init(&#123;</span><br><span class="line">        el: <span class="string">'#vcomment'</span>,</span><br><span class="line">        notify: notify,</span><br><span class="line">        verify: verify,</span><br><span class="line">        appId: <span class="string">"&lt;%= theme.valine.appId %&gt;"</span>,</span><br><span class="line">        appKey: <span class="string">"&lt;%= theme.valine.appKey %&gt;"</span>,</span><br><span class="line">        placeholder: <span class="string">"&lt;%= theme.valine.placeholder %&gt;"</span>,</span><br><span class="line">        pageSize:<span class="string">'&lt;%= theme.valine.pageSize %&gt;'</span>,</span><br><span class="line">        avatar:<span class="string">'&lt;%= theme.valine.avatar %&gt;'</span>,</span><br><span class="line">        lang:<span class="string">'&lt;%= theme.valine.lang %&gt;'</span>,</span><br><span class="line">        <span class="comment">//增加serverURLs</span></span><br><span class="line">        serverURLs:<span class="string">'&lt;%= theme.valine.serverURLs %&gt;'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>本地构建启动之后可能会因为不在leancloud白名单内，返回403，不过不要紧说明已经生效</p><p>直接hexo d发布就能生效了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客" scheme="https://www.larscheng.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://www.larscheng.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>匆匆忙忙的2021</title>
    <link href="https://www.larscheng.com/2020-summary/"/>
    <id>https://www.larscheng.com/2020-summary/</id>
    <published>2022-01-02T07:47:12.000Z</published>
    <updated>2022-01-02T08:20:09.585Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="碎碎念"><a class="markdownIt-Anchor" href="#碎碎念"></a> 碎碎念</h2><blockquote><p>感觉像被按下了快进键一样，2021年无论身边的人或事都转瞬即逝…</p></blockquote><p>不知不觉又过了一年，老了一岁，自己也逐渐从一个刚毕业的懵懂少年，变成了现在职场上的老油条～</p><p>时间真的是个奇妙的东西，时间是毒药也是解药、时间是让人猝不及防的，2021年的时间现在回想就是像是突然给丢了一样，一起丢的还有很多老朋友、很多自己以前的想法…</p><p>记忆中的2021就好像只有前半年，后半年基本上都是一个基调。话虽如此但这一年还是学到了很多新的东西，遇到了很多值得的人。</p><blockquote><p>可能我写的像是流水账</p></blockquote><h2 id="年度关键字"><a class="markdownIt-Anchor" href="#年度关键字"></a> 年度关键字</h2><ul><li>心态</li><li>得失</li><li>遗憾</li><li>贵人</li><li>匆匆忙忙</li></ul><h2 id="新年伊始"><a class="markdownIt-Anchor" href="#新年伊始"></a> 新年伊始</h2><p>牛年是第一次在外过年，那时候疫情紧张，杭州提倡就地过年，很多同事都响应政府号召，当然我也不例外。因为就地过年政府给发红包呀！</p><p>欢欢喜喜过大年的同时当然也在面试看机会，种种原因吧，拿到了叮咚的offer之后便决定过去了，于是开始了2021年的第一次搬家</p><h2 id="上海"><a class="markdownIt-Anchor" href="#上海"></a> 上海</h2><p>杭州是个很不错的城市，在杭州呆了三年，突然要离开，追求新生活新工作的我当时其实并没有什么感觉，于是开始了浩浩荡荡的跨省搬家操作。</p><p>有时候也挺佩服自己，在杭州有一起拼搏（摸鱼）三载的小伙伴们，而上海…那也没关系，谁还没年轻过，没必要和钱过意不去吧，舒适圈呆久了，就想去经历经历互联网的毒、打体验体验奋斗B的生活。也可能从那开始我就自动离队了吧。</p><h2 id="围城"><a class="markdownIt-Anchor" href="#围城"></a> 围城</h2><blockquote><p>每个人都会经历这个阶段，看见一座山，就想知道山后面是什么。我很想告诉他，可能翻过去山后面，你会发觉没有什么特别，回头看会觉得这边更好。但是他不会相信，以他的性格，自己不试试是不会甘心</p></blockquote><p>其实现在对这句话略有体会，当然人都是有好奇心的，也只有经历过这个阶段才会有不一样的体验</p><p>之前听到过一句话说的是进了大厂基本上就是失踪人口了，新公司对比我上一家公司可以算是大厂了，当然不能和BAT对比。但是失踪人口是我本人了。</p><p>新工作带给我更多的是心态的变化，从一开始的斗志昂扬，伴随着高强度的工作整个人已经疲惫不堪、工作和生活的节奏也彻底混乱，说实话那段时间天天都在离职的边缘徘徊，工作和生活无法平衡让我不得已要在二者之间做出选择。得失得失，有失才有得，你想要拿高薪总得拿点东西来换。</p><p>强行被投喂了大量工作的同时疯狂吸收了大量的新知识，也在那段时间遇到了让自己受益良多的职场贵人。</p><h2 id="稳定性"><a class="markdownIt-Anchor" href="#稳定性"></a> 稳定性</h2><p>记得刚入职时，每个月基本都会听到有某某同学某某团队出现了P级故障，作为新人那时候还没什么感觉。但是故障的频发本身就不正常。<br>在当时，团队服务的稳定性预案基本聊聊无几，可以说稍有不慎就喜提大礼包。</p><p>在BOSS的牵头下，开始着手稳定性建设，当然我也是新兵上阵，头一次干这个，但起码没吃过猪肉见过猪跑。基于团队服务的特殊性，截止目前下游依赖至少40+，主要从几个方面入手</p><ul><li>监控大盘</li><li>故障告警</li><li>灾备数据</li><li>超时控制</li><li>降级方案</li><li>故障演练</li></ul><p>目前基本可以做到弱依赖故障无需人工干预，降级预案覆盖90%场景，截止12.31号，没有喜提P级故障，当然这也是一直抓稳定性的一部分成果</p><h2 id="提升"><a class="markdownIt-Anchor" href="#提升"></a> 提升</h2><p>大公司就是如此，不像小公司一个人就可以接触到整个流程，你可以有精力去钻研你感兴趣的内容。大公司好比一个精密机械，它可以被拆分到很小的模块，而每一个人在里面都只是不知疲倦的一颗齿轮。</p><p>这一年技术能力上基本上原地踏步，更多的是软技能的提升。</p><p>所在团队的特殊性，向上与用户直接对接，向下需要统筹所有依赖方。需要强沟通能力。所以日常的工作基本上就是沟通、会议、方案、业务…真正落地开发其实很少，更多的是系统稳定性方案和保障上。</p><p>小半年下来若说提升可能就在四方面</p><ul><li>系统稳定性</li><li>团队沟通</li><li>项目管理</li><li>方案设计</li></ul><p>现在一想技术提升基本为0，当然整年投入精力最多的就是在稳定性上</p><h2 id="博客"><a class="markdownIt-Anchor" href="#博客"></a> 博客</h2><p>失踪人口今年博客的产出为0，这个羞耻的成绩实在是难以启齿</p><h2 id="工作之外的flag"><a class="markdownIt-Anchor" href="#工作之外的flag"></a> 工作之外的flag</h2><ul><li>保持身体健康</li><li>继续技术提升</li><li>稳定博客分享</li></ul><h2 id="2022"><a class="markdownIt-Anchor" href="#2022"></a> 2022</h2><p>希望疫情早日结束，希望自己能够不忘初心，希望远方的朋友都能心想事成，希望梦想成真～加油！</p>    <div id="aplayer-lWAUprfn" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1410647903" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-volume="0.3"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="https://www.larscheng.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://www.larscheng.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>聊一下换工作</title>
    <link href="https://www.larscheng.com/find-job/"/>
    <id>https://www.larscheng.com/find-job/</id>
    <published>2021-03-13T12:52:59.000Z</published>
    <updated>2022-01-02T05:18:26.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>近半年博客都没怎么更新和维护，一方面确实是忙，另一方面就是一直在为找工作奔波。</p><p>终于工作也尘埃落定，马上也要入职，最近在处理工作交接的事情，就写一篇文章来记录下人生中第一次换工作的经历吧。</p><a id="more"></a> <blockquote><p>首先这次工作是从杭州换到了上海，新工作解决了一些个人问题，薪资也达到了预期，新的开始祝自己一切顺利！</p></blockquote><p>我是从大三校招就进了老东家开始程序生涯、毕业就直接拿到了提前转正，说实话，老东家确实挺好的，无论是工作氛围、领导、同事都是无可挑剔的，我在这里生活了三年，和大家都很熟，这里就好像是我的舒适区，拿着够花的工资，过着朝九晚五的生活，周末和同事朋友约饭、游山玩水。在杭州这样的城市真的可以说是美滋滋，当然了前提是你没有外部压力（诸如房子、车子、等等）。</p><blockquote><p>老东家是杭州的一家<a href="https://www.lierda.com/" target="_blank" rel="noopener">物联网</a>公司，如果有需要内推的可直接发我<a href="mail:larscheng@foxmail.com" target="_blank" rel="noopener">邮箱</a>。</p></blockquote><p>跳槽、换工作在互联网公司实在是太普遍了，三年间送走了一批又一批，我所在的小组从我入职到现在，除了我之前的人已经全换了一批。以前都是我受邀参加同事的散伙饭，终于今天也到老同事们被我邀请，轮到他们送我，一伙人坐到桌前，仿佛有种不真实的感觉，一起聊着这几年的事，就仿佛都还是昨天…</p><p>我差不多是从去年12月份开始陆陆续续投起了简历，然后截止到年前2月初陆陆续续面了大小共6家公司<br>其中有运气也有自己的因素，拿到了5份offer，最终在年后开工后确定了入职公司。<br>这也算是参加工作后的第一次换工作，一路上磕磕绊绊总算有了定论。</p><p>扯了这么多，还是和大家分享下找工作需要的注意事项</p><h3 id="时间"><a class="markdownIt-Anchor" href="#时间"></a> 时间</h3><p>选择一个适合的时间段来执行你的计划是非常重要，都说金三银四、金九银十是跳槽的最佳时间，还是有一定道理的，每年三月份左右企业都过完新年刚开工，年前制定的招聘计划正是开展的时候，我就是在年底这个尴尬的时间点开始的，春招吧有点早，秋招吧有点晚，但是如果你准备好了，其实什么时候找工作都可以，如果刚好赶上金三银四、金九银十岗位的选择机会会更多一些。毕竟开发面试还是得看技术。</p><h3 id="渠道"><a class="markdownIt-Anchor" href="#渠道"></a> 渠道</h3><p>既然要找工作了，渠道很重要，如何从岗位海洋里找到和你契合度高的岗位，并且如何高效的送达简历，其实都是至关重要。</p><ul><li><strong>招聘App</strong>：我主要是在BOSS直聘和前程无忧两个APP上，其他的没有使用过也就不做评论</li><li><strong>内推</strong>：确定了目标公司或者意向岗位，先发动下你的小伙伴们，看能不能内推，如果不行可以发动互联网资源，像牛客、知乎、Ve2x，甚至github也有一些内推渠道</li><li><strong>猎头</strong>：寻找一名优秀的猎头，提出你的需求，交给他来帮你物色，但前提是你们俩要相互信任、并且信息对等且真实，不然工作谈好了最终因为你提供的相关信息与实际不符（比如学历、当前薪资情况等等）导致翻车。</li></ul><h3 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h3><p>简历投出去了，就预示着你随时会收到面试邀请，可万万不能等收到面试再准备复习，到那个时候只能是临时抱佛脚，很可能被佛踢一脚！！</p><ul><li>夯实基础：基础不牢，地动山摇。面试过程中基础知识的考察还是占一定比重的，很多一面基本都是基础考察，所以基础是你能否二面的关键</li><li>梳理项目：根据你的简历，梳理你的项目，主要从项目架构（为什么这样设计）、核心功能逻辑（流程熟悉）、遇到的困难这几块来准备</li><li>技能自查：简历中一般都会列举自己掌握的技术能力，从熟悉到了解，既然你写上去了，那就要做到完全的准备，随时迎接面试官的连环炮</li><li>时间管理：工作、复习、面试是一个漫长的过程，三者之间还是需要一个比较好的时间安排，本职工作还是需要同样重视，毕竟你还没离职。</li></ul><h3 id="面试"><a class="markdownIt-Anchor" href="#面试"></a> 面试</h3><p>基本上现在的互联网面试方式就三种：电话面试、视频面试、现场面试</p><p>论效率的话现场面试效率最高，电话、视频面一般都只是一面、二面简单了解下。我因为是异地面试的原因，通常都会和对方商量，一共几面，可否当天全部安排。一站式的面试很考验人的精神状态。</p><ul><li>面试礼仪：毕竟是面试，打工人骨子里的修养和礼貌还是要有的，电话、视频的沟通方式，需要的注意事项都要提前准备</li><li>了解面试：一定要了解下面试的整体流程，会有几面、大概多久会出结果。一方面做到心中有数，同时也能合理的安排其他时间</li><li>自信谦虚：去面试一定要自信，既然他已经通知你面试了，说明你还是很优秀的，但切记不能自信过头转而极度自负，还是要保持谦虚，切记不能夸夸其谈</li></ul><p>其实面试就像是平时的技术分享一样，把你掌握的一些骚操作、知识点分享给面试官，在我个人的体会下，一场成功的面试就是两个技术人的经验交流，面试者发挥出了自己的所学也看到了自己的短板，面试官测出了对方的深度也发现了对方的闪光点。</p><h3 id="复盘"><a class="markdownIt-Anchor" href="#复盘"></a> 复盘</h3><p>第一场面试结束后，大概率你的心态已经发生了一丝变化，要么信心满满要么就是可能被虐了一顿，但是不论如何，面试后的复盘是尤为重要，技术面试中被问到的问题，哪些是你非常熟悉的，哪些是你印象模糊含含糊糊的，哪些又是你从来没接触过的。这些都需要进行复盘总结。</p><p>通过面试后的复盘，来查漏补缺，花时间补一补自己的薄弱点，用每一场面试来磨砺自己，直到你可以在面试中游刃有余，那说明你已经来感觉了。这也代表着你面试大概率要通过了。</p><h3 id="抉择"><a class="markdownIt-Anchor" href="#抉择"></a> 抉择</h3><p>无论你的预期是什么，当你在有可以选择的情况下一定要多方面多角度考虑和抉择</p><ul><li>薪资待遇：出来打工为的就是赚钱，所以薪资待遇也是最关注的问题，是否达到预期，是否可以接受，五险一金缴纳细则、</li><li>技术氛围：对方的技术氛围如何，是不是让你去开荒（比如全公司就你一个写Java的），技术栈是否与当前的你匹配，如果就职对你的技术实力是否有所提升</li><li>个人发展：就职后对个人的发展如何，是否是高危暴雷行业，晋升规则方式如何</li></ul><p>最后关于薪资多说两嘴：</p><blockquote><p>时薪时薪时薪！！！！重要的事情说三遍！</p></blockquote><p>有的朋友觉得加班无所谓只要钱管够、有的朋友觉得绝对不加班，加班的我就不去</p><p>但是无论加班还是不加班，我都建议你先计算一下时薪，福报型企业加班多自然到手的也多一些，正常型企业不加班但是薪资可能稍微低一点</p><p>但是并不是薪资低就不考虑，这个时候建议你算一下时薪，如果不加班的工作可以拿到和加班工作相近的时薪，那还真的需要你好好斟酌，毕竟双休、朝九晚五的生活也是很美的。</p><h3 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h3><p>唠唠叨叨扯了这么多，也是经历这次换工作后，把自己遇到的一些坑点和经验分享给大家。还是那句话，换工作可以，但是不要盲目的换。</p><p>你为什么换工作？你的新工作是否解决了你的困惑，达到了你的预期？</p><p>最后，还是祝自己也祝大家工作顺利～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近半年博客都没怎么更新和维护，一方面确实是忙，另一方面就是一直在为找工作奔波。&lt;/p&gt;
&lt;p&gt;终于工作也尘埃落定，马上也要入职，最近在处理工作交接的事情，就写一篇文章来记录下人生中第一次换工作的经历吧。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.larscheng.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://www.larscheng.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>IoT系列（2）：WIFI设备常见配网方案介绍</title>
    <link href="https://www.larscheng.com/device_wifi_config/"/>
    <id>https://www.larscheng.com/device_wifi_config/</id>
    <published>2021-01-15T01:39:34.000Z</published>
    <updated>2022-01-02T05:18:26.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>本文讨论目前市面上基于WIFI智能设备的配网方案，结合自身开发案例，对不同的配网方案进行对比介绍。</p><p>阅读本文你可以了解到如下几种配网方案：</p><ol><li>一键配网</li><li>设备热点配网</li><li>零配</li><li>手机热点配网</li></ol><a id="more"></a> <h1 id="设备配网说明"><a class="markdownIt-Anchor" href="#设备配网说明"></a> 设备配网说明</h1><p>提到设备配网这一流程，通俗的理解就是让设备连上网，本文主要就WIFI智能设备的配网展开讨论，目前市面上常见的配网方案都绕不开以下几个步骤：</p><ul><li>WIFI设备拿到某一wifi的SSID和Password</li><li>APP拿到WIFI设备的唯一编号</li><li>APP用户发起设备绑定请求</li><li>WIFI设备发起入网请求</li></ul><p>下面我们针对不同的配网方案来注意分析器配网流程</p><h1 id="一键配网"><a class="markdownIt-Anchor" href="#一键配网"></a> 一键配网</h1><p>如果你近几年购买过一些智能灯具、智能插座等等WIFI设备，那么大概率他的配网方式就是<code>一键配网</code></p><p>因为一键配网方案，用户操作简单，只需要录入wifi的ssid和password，即可等待设备完成配网。</p><p>正如此一键配网几乎是智能设备的通用标准，但是它最大的痛点就是成功率低，特别低！！！</p><p>下面一起来看下一键配网的实现原理：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Iot20210115133232.png" alt="一键配网"></p><ol><li>手机提前连接至路由器wifi</li><li>APP中输入ssid和密码点击配网，开始进行广播</li><li>WIFI智能设备抓取广播包，拿到wifi信息，连接至路由器</li><li>WIFI设备连接至路由器后，将自身唯一编号MAC进行局域网广播</li><li>手机APP收到设备广播的MAC编号，向服务器发起设备绑定</li></ol><p>从步骤上来看，没有任何毛病，但是在实际的用户配网过程中会出现各种各样的问题，<strong>导致用户体验极差，配网成功率极低</strong></p><ul><li>路由器兼容性：部分型号的路由器不支持或者禁止发送广播包，直接导致配网永远无法成功，并且用户无法排查</li><li>手机兼容性：WIFI设备连接的频段和手机连接的频段不同，导致双方无法收发广播包，例如5G和2.4G频段</li><li>wifi同名：如果设备附近有多个同名的ssid信号，极有可能设备会无法连接到正确的路由器</li><li>等等一些稀奇古怪的问题</li></ul><blockquote><p>看似用户操作方便，并且使用率极高的配网方式，实际操作中有很苛刻的配网条件，这也是一键配网让人又爱又恨的地方</p></blockquote><p>如果有新的WIFI智能设备项目，不建议选用一键配网方案！</p><h1 id="设备热点配网"><a class="markdownIt-Anchor" href="#设备热点配网"></a> 设备热点配网</h1><p>既然一键配网成功率这么低，那有没有成功率高的方案呢，当然是有的：<code>设备热点配网</code></p><p>由于它出众的配网成功率，很快成为wifi设备配网的新宠，像米家的摄像头就采用的这种配网方式</p><p>一起来看看他的实现原理：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Iot20210115133400.png" alt="设备热点配网"></p><ol><li>WIFI设备进入AP模式，对外提供一个wifi热点</li><li>用户手机连接此wifi，然后通过APP将路由器的SSID和密码发送给WIFI设备</li><li>WIFI设备收到SSID信息后将唯一编号MAC发送给APP</li><li>手机APP收到MAC编号，向服务器发起设备绑定【预绑定】</li><li>设备连接路由器联网，向服务器发起入网【激活绑定】</li></ol><p>设备热点配网时首先由设备AP模式，手机STA模式，去连接到设备热点上，进行数据传输</p><p>整个过程不需要通过路由器广播数据，所以不存在路由器兼容性，也不存在信号频段问题</p><p><strong>唯一的风险点就是用户通过APP输入SSID和密码错误，导致设备无法联网。</strong></p><p>针对这一风险点，在绑定流程上设计了预绑定和激活绑定：<br>app携带用户id和设备mac发起预绑定，如果设备正常联网上线，那么绑定生效，设备激活；如果设备拿到了错误的ssid信息一定时间内没有上线，那么清除预绑定记录。</p><blockquote><p>设备热点配网相对于一键配网几乎没有任何额外的成本增加，在尽量不增加用户操作复杂度的前提下，极大的提高了配网成功率，这也是当下新的WIFI设备配网首选方案。</p></blockquote><h1 id="零配"><a class="markdownIt-Anchor" href="#零配"></a> 零配</h1><p>零配，我最早在天猫精灵系列设备的配网方案中遇到过，这是一种特定场景的配网方案，大致思路是通过已经配网成功的设备（智能音箱）给新的设备进行配网，实现真正意义上的<strong>零配置配网</strong>。</p><p>现在大部分的智能音箱联动场景中都支持零配方案。</p><p>先看一下的的实现步骤：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Iot20210115133533.png" alt="零配"></p><blockquote><p>前提：通过其他方式已经完成配网的智能设备（天猫精灵），与服务器连接正常，并存有路由器SSID信息</p></blockquote><ol><li>手动触发WIFI设备将自己MAC信息通过Sniffer报文发送到天猫精灵</li><li>天猫精灵收到设备MAC信息后，将本地保存的路由器SSID信息发送给WIFI设备</li><li>天猫精灵向服务器发起该设备的预绑定请求</li><li>WIFI设备连接路由器联网，并向服务器发起激活绑定请求</li></ol><p>该方案需要有一台已经联网的智能设备，并且该设备保存了用户信息和路由器SSID信息，优化掉了用户手动输入SSID和密码的步骤，进一步简化了用户配网操作。</p><p>在实际使用中，用户开启WIFI设备后，只需要对天猫精灵说一句<code>“找队友”</code>即可完成配网，可以说用户的配网体验感很好。</p><h1 id="手机热点配网"><a class="markdownIt-Anchor" href="#手机热点配网"></a> 手机热点配网</h1><p>这种方案和设备热点配网方案比较相似，从名字能看出来，这种方案的热点是由手机提供。同样都是为了解决路由器兼容性而提出的解决方案。</p><p>这种方案在阿里IoT中被作为一键配网失败后的补救措施。当一键配网失败后，用户可以通过手机设置特定的wifi热点，设备连接到手机热点上后进行信息交互。</p><p>原理图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Iot20210115133623.png" alt="手机热点配网"></p><p>流程基本上和设备热点方案类似，区别就是提供热点的是手机端</p><p>不过在实际应用中，使用率不是很高，一方面用户操作复杂度过高，可能用户完全不知道如何开启手机热点。另一方面能想到手机热点配网方案，肯定会采用设备热点配网方案了。</p><blockquote><p>所以总的来说，该方案成功率相对较高，但是用户操作复杂度也随之增大，可以作为其他方案失败后的备选方案，但并不推荐使用，毕竟用户体验是第一位</p></blockquote><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>总结一下上面提到的四种方案的特点：</p><table><thead><tr><th>方案</th><th>使用率</th><th>成功率</th><th>用户体验</th><th>路由器兼容性</th><th>频段兼容性</th><th>手机兼容性</th><th>使用场景</th></tr></thead><tbody><tr><td>一键配网</td><td>高</td><td>低</td><td>优</td><td>差（不支持广播）</td><td>差（2.4G/5G）</td><td>差</td><td>不推荐使用</td></tr><tr><td>设备热点配网</td><td>高</td><td>高</td><td>优</td><td>优</td><td>优</td><td>优</td><td>WIFI配网首选方案</td></tr><tr><td>零配</td><td>中</td><td>高</td><td>优（免输入SSID信息）</td><td>优</td><td>优</td><td>优</td><td>音箱联动场景推荐</td></tr><tr><td>手机热点配网</td><td>低</td><td>高</td><td>差（手动开启热点）</td><td>优</td><td>优</td><td>良</td><td>不推荐使用</td></tr></tbody></table><p>以上四种配网方案也是我目前工作中接触到的一些常用方案，为了方便理解，简化了各种方案的细节，实际通讯和交互流程会更为复杂。</p><p>当然除了这些，也有一些其他方案比如<code>路由器热点配网方案</code>、<code>WEB配网方案</code>等等，这些方案都因为需要特定场景和复杂流程等因素逐渐不被经常使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;本文讨论目前市面上基于WIFI智能设备的配网方案，结合自身开发案例，对不同的配网方案进行对比介绍。&lt;/p&gt;
&lt;p&gt;阅读本文你可以了解到如下几种配网方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一键配网&lt;/li&gt;
&lt;li&gt;设备热点配网&lt;/li&gt;
&lt;li&gt;零配&lt;/li&gt;
&lt;li&gt;手机热点配网&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="物联网" scheme="https://www.larscheng.com/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
      <category term="IoT" scheme="https://www.larscheng.com/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>IoT系列（1）：什么是物联网</title>
    <link href="https://www.larscheng.com/what_is_iot/"/>
    <id>https://www.larscheng.com/what_is_iot/</id>
    <published>2021-01-14T02:39:34.000Z</published>
    <updated>2022-01-02T05:18:26.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>本文主要讨论物联网的相关概念知识，阅读本文你会有如下几点了解：</p><ol><li>物联网概念引入</li><li>物联网与互联网的区别与联系</li><li>什么是物联网</li><li>物联网在我们生活中有哪些应用</li></ol><a id="more"></a> <h1 id="物联网引子"><a class="markdownIt-Anchor" href="#物联网引子"></a> 物联网引子</h1><ul><li>如果一把伞可以感知当地天气并提醒主人今天是否应该带伞</li><li>如果某种可穿戴设备能够监测病人的健康状况并预测病情是否恶化以便及时准确地通知医生</li><li>如果汽车上的计算和预测分析系统能够提醒用户保养计划以避免突如其来的部件故障，我们的生活将会如何？</li></ul><blockquote><p>如今的物联网解决方案已经能够轻松实现上面的设想。我们的生活也在逐渐走向万物互联。</p></blockquote><p>先说说当你听到<code>物联网</code>（Internet of Things），你想到了什么？有没有下面这些：</p><blockquote><p>互联网、IoT、传感器、智能家居、智能空调、智能手机、智能酒店、车联网…</p></blockquote><p><code>物联网</code>从字面看蕴含着物物相联的意思，从我们身边的物联网产品来看，它具备着将设备与设备相互连接，人与设备连接的能力。</p><h1 id="物联网与互联网"><a class="markdownIt-Anchor" href="#物联网与互联网"></a> 物联网与互联网</h1><p>物联网和互联网在很多人的理解中可能觉得都差不多、都可以上网之类的。但实际上他们两者可以说是完全不同的两个场景。</p><p>在互联网时代，最初是PC电脑实现人与人之间的沟通变得越来越简单，而后手机作为一个媒介打开了移动互联网的热潮。无论手机还是电脑，都是为了实现<strong>人与人</strong>之间高效连接</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/designpatteren/20210108102414.png" alt=""></p><p>其中，人是消费者也是生产者，手机或者电脑是作为传输媒介进行信息传输</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/IoT/20210108104325.png" alt=""></p><p>上面是在互联网中的模型，而在物联网中则是另外一中场景，举个栗子：</p><blockquote><p>你购买了一个智能灯，智能灯可以通过手机app进行wifi配网后连接到网络，用户可以通过app控制设备，设备的状态会实时的通知到app，用户可以通过app检查设备是否正常。</p></blockquote><p>以上是一个典型的物联网设备使用场景，在这个场景中涉及到了3个设备：智能灯、手机、路由器。他们搭配在一起，实现了一个设备与设备连接，设备与人连接的场景</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/IoT/20210108111734.png" alt=""></p><p>与互联网中不同，设备的参与度更高，设备不仅仅进行消息的传输，他也是消息的生产者和消费者。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/IoT/20210108113320.png" alt=""></p><p>通过以上的对比，有一个最显著的感受就是物联网中，<strong>设备的参与度更高，更倾向于设备与设备的连接互通。互联网中更着重人与人之间的互联</strong>。</p><p>当然物联网与互联网也不是完全分割的，可以理解为随着互联网的发展物联网应运而生，物联网是互联网的增强和延伸。</p><h1 id="什么是物联网"><a class="markdownIt-Anchor" href="#什么是物联网"></a> 什么是物联网？</h1><p>上面引入了物联网，也将其与互联网做了对比，那么到底什么是物联网呢？</p><p>物联网（IoT，Internet of Things）在互联网的基础上，将用户端延伸和扩展到物与物、物与人的连接。物联网模式中，所有物品都可以与网络连接，并进行通信和场景联动。</p><p>物联网是互联网的延伸。互联网通过电脑、移动终端等设备将参与者联系起来，形成的一种全新的信息互换方式。而物联网则是通过传感器、芯片、无线模组使设备联网，进而进行信息互换，实现物物人相联。</p><h1 id="物联网三层架构"><a class="markdownIt-Anchor" href="#物联网三层架构"></a> 物联网三层架构</h1><p>物联网从整个体系结构来看，可以分为三个层面：</p><ul><li>设备层（Device）：负责数据采集的各种智能硬件设备，比如传感器设备，控制器等。</li><li>网络层（Connect）：负责可靠传递，通过将物体接入网络，依托通信技术和通信协议，实现可信的信息交互和共享。通信技术例如NB、LoRa、WIFI，通信协议例如HTTP、TCP、UDP、MQTT、AMQP等</li><li>应用层（Manage）：负责智能处理，分析和处理海量的感知数据和信息，实现智能化的决策和控制。就是实现具体业务逻辑的地方。</li></ul><p>此处引用一张《物联网开发实战》中的图例：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/IoT/20210108143615.png" alt="引自《物联网开发实战》"></p><h1 id="物联网在我们生活中的应用"><a class="markdownIt-Anchor" href="#物联网在我们生活中的应用"></a> 物联网在我们生活中的应用</h1><p>目前我们普通人对于物联网接触最多的应该就是<code>智能家居</code>了，像家里的空调、冰箱、窗帘、灯具等等</p><p>但这仅仅是物联网在智能家居板块的体现，如果按行业划分，主要体现在如下几块</p><ul><li>智慧物流：例如菜鸟物流实验室智能搬运、分拣机器人，顺丰的数据灯塔让物流过程可视化。</li><li>智能交通：比如电动车厂商推进车联网、美团的共享自行车、共享电动车，gofun的共享汽车等</li><li>精准农业：通过物联网相关技术进行农作物长势、自然条件的检测，比如电信推出的山洪预警系统，还有像最近比较火的智慧养猪等等项目</li><li>智慧医疗：比如像今年的健康码，比如通过可穿戴设备检测人体器官信息</li><li>智慧家居：像小米生态链、智能酒店、智慧安防等等。</li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>如今在通信、互联网、嵌入式等技术的推动下，物联网正在逐渐走进我们的生活、互联网时代下，人与人的距离变小了，而继互联网之后物联网时代则是缩短物与物、物与人之间的距离。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;本文主要讨论物联网的相关概念知识，阅读本文你会有如下几点了解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;物联网概念引入&lt;/li&gt;
&lt;li&gt;物联网与互联网的区别与联系&lt;/li&gt;
&lt;li&gt;什么是物联网&lt;/li&gt;
&lt;li&gt;物联网在我们生活中有哪些应用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="物联网" scheme="https://www.larscheng.com/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
      <category term="IoT" scheme="https://www.larscheng.com/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>Java8特性2 - StreamApi</title>
    <link href="https://www.larscheng.com/java8-stream/"/>
    <id>https://www.larscheng.com/java8-stream/</id>
    <published>2020-11-15T05:56:21.000Z</published>
    <updated>2022-01-02T05:18:26.505Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="stream"><a class="markdownIt-Anchor" href="#stream"></a> Stream</h2><ul><li>Stream API 关注对数据的运算，属于CPU密集型</li><li>Collections 关注对数据的存储，属于IO密集型</li></ul><p>Stream 自己本身不存储元素<br>Stream 不会改变元对象，但是他会返回一个持有结果的新Stream<br>Stream 操作是延时执行的，意味着需要结果时才执行</p><p>Stream执行流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行流程： 实例化 ==&gt; 中间操作 ==&gt; 终止操作</span><br></pre></td></tr></table></figure><p>中间操作往往是一个操作链<br>一旦终止操作，就开始执行中间操作链，并产生结果。【延时执行，终止操作触发执行】</p><h2 id="准备数据"><a class="markdownIt-Anchor" href="#准备数据"></a> 准备数据</h2><p>为了测试方便，这里写一个学生工具类<code>StudentData.java</code>，用来获取测试数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentData</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">getList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">1001</span>,<span class="string">"张三"</span>,<span class="number">34</span>,<span class="number">50000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">1002</span>,<span class="string">"李四"</span>,<span class="number">19</span>,<span class="number">3000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">1003</span>,<span class="string">"王五"</span>,<span class="number">14</span>,<span class="number">600</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">1004</span>,<span class="string">"赵六"</span>,<span class="number">42</span>,<span class="number">30000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">1005</span>,<span class="string">"李明"</span>,<span class="number">22</span>,<span class="number">6000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">1006</span>,<span class="string">"张华"</span>,<span class="number">32</span>,<span class="number">40000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">1007</span>,<span class="string">"李华"</span>,<span class="number">30</span>,<span class="number">9000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">1008</span>,<span class="string">"王二"</span>,<span class="number">28</span>,<span class="number">12000</span>));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, Integer age, <span class="keyword">float</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">setSalary</span><span class="params">(<span class="keyword">float</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> Float.compare(student.salary, salary) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                Objects.equals(id, student.id) &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name) &amp;&amp;</span><br><span class="line">                Objects.equals(age, student.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, age, salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", salary="</span> + salary +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stream实例化"><a class="markdownIt-Anchor" href="#stream实例化"></a> Stream实例化</h2><ul><li>通过集合</li><li>通过数组</li><li>Stream.of()</li><li>Stream.iterate() 迭代创建</li><li>Stream.generate() 生成创建</li></ul><h3 id="通过集合创建流"><a class="markdownIt-Anchor" href="#通过集合创建流"></a> 通过集合创建流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; list = StudentData.getList();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个顺序流（按流的顺序进行中间操作）</span></span><br><span class="line"><span class="comment"> * default Stream&lt;E&gt; stream()</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Collection#stream()&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Stream&lt;Student&gt; stream = list.stream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个并行流（并行进行中间操作，无顺序）</span></span><br><span class="line"><span class="comment"> * default Stream&lt;E&gt; parallelStream()</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Collection#parallelStream()&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Stream&lt;Student&gt; studentStream = list.parallelStream();</span><br></pre></td></tr></table></figure><h3 id="通过数组创建流"><a class="markdownIt-Anchor" href="#通过数组创建流"></a> 通过数组创建流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">IntStream stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">Student[] students = &#123;<span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">"zhang3"</span>,<span class="number">15</span>,<span class="number">2000</span>),<span class="keyword">new</span> Student(<span class="number">2</span>,<span class="string">"li4"</span>,<span class="number">25</span>,<span class="number">3000</span>)&#125;;</span><br><span class="line">Stream&lt;Student&gt; stream1 = Arrays.stream(students);</span><br></pre></td></tr></table></figure><h3 id="通过streamoft-t创建流"><a class="markdownIt-Anchor" href="#通过streamoft-t创建流"></a> 通过Stream.of(T t)创建流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="通过streamgenerate生成流"><a class="markdownIt-Anchor" href="#通过streamgenerate生成流"></a> 通过Stream.generate()生成流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成十个随机数</span></span><br><span class="line">Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>为了展示效果，这里用到了终止操作<code>forEach(Consumer c)</code>,来打印生成的流，输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.4110376914730558</span></span><br><span class="line"><span class="number">0.3859646598602653</span></span><br><span class="line"><span class="number">0.6615549365050744</span></span><br><span class="line"><span class="number">0.5086477303367989</span></span><br><span class="line"><span class="number">0.2614939389108638</span></span><br><span class="line"><span class="number">0.4766495481509283</span></span><br><span class="line"><span class="number">0.4378851389809656</span></span><br><span class="line"><span class="number">0.018579677210072254</span></span><br><span class="line"><span class="number">0.5217833438932207</span></span><br><span class="line"><span class="number">0.44390638190496046</span></span><br></pre></td></tr></table></figure><h3 id="通过streamiterate创建流"><a class="markdownIt-Anchor" href="#通过streamiterate创建流"></a> 通过Stream.iterate()创建流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建前10个偶数</span></span><br><span class="line">Stream.iterate(<span class="number">0</span>,t-&gt;t+<span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><h2 id="stream中间操作"><a class="markdownIt-Anchor" href="#stream中间操作"></a> Stream中间操作</h2><ul><li>1、筛选与切片 filter、limit、skip、distinct</li><li>2、映射  map、mapToDouble、mapToInt、mapToLong、flatMap</li><li>3、排序 sorted()、sorted(Comparator c)</li></ul><h3 id="筛选与切片"><a class="markdownIt-Anchor" href="#筛选与切片"></a> 筛选与切片</h3><h4 id="筛选流filter"><a class="markdownIt-Anchor" href="#筛选流filter"></a> 筛选流filter</h4><p>从流中筛选需要的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; list = StudentData.getList();</span><br><span class="line">Stream&lt;Student&gt; stream = list.stream();</span><br><span class="line"><span class="comment">//filter 筛选出年龄大于40的学生</span></span><br><span class="line">stream.filter(s -&gt; s.getAge() &gt; <span class="number">40</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;id=<span class="number">1004</span>, name=<span class="string">'赵六'</span>, age=<span class="number">42</span>, salary=<span class="number">30000.0</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="截断流limit"><a class="markdownIt-Anchor" href="#截断流limit"></a> 截断流limit</h4><p>从stream中获取指定大小的stream，可以类比sql中的LIMIT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//limit 截断流</span></span><br><span class="line">list.stream().limit(<span class="number">4</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;id=<span class="number">1001</span>, name=<span class="string">'张三'</span>, age=<span class="number">34</span>, salary=<span class="number">50000.0</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">1002</span>, name=<span class="string">'李四'</span>, age=<span class="number">19</span>, salary=<span class="number">3000.0</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">1003</span>, name=<span class="string">'王五'</span>, age=<span class="number">14</span>, salary=<span class="number">600.0</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="跳过元素skip"><a class="markdownIt-Anchor" href="#跳过元素skip"></a> 跳过元素skip</h4><p>从stream中跳过指定个数后获取stream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//skip 跳过2个元素后截取1个元素</span></span><br><span class="line">list.stream().skip(<span class="number">2</span>).limit(<span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;id=1003, name=&apos;王五&apos;, age=14, salary=600.0&#125;</span><br></pre></td></tr></table></figure><p>**注意：**当跳过的个数超过stream中元素个数，返回空流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*此时的list.stream()中只有8个元素，直接跳过30个元素*/</span></span><br><span class="line">list.stream().skip(<span class="number">30</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行此代码无任何输出，因为此时生成的流为空</p><h4 id="去重distinct"><a class="markdownIt-Anchor" href="#去重distinct"></a> 去重distinct</h4><p>去重，根据stream中元素自己的hashcode()和equals()进行判断，效果可以类比sql中的<code>DISTINCT</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//distinct 可以看到list中有两个Tony老师，出现重复</span></span><br><span class="line">list.add(<span class="keyword">new</span> Student(<span class="number">1009</span>, <span class="string">"Tony"</span>, <span class="number">18</span>, <span class="number">50000</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Student(<span class="number">1009</span>, <span class="string">"Tony"</span>, <span class="number">18</span>, <span class="number">50000</span>));</span><br><span class="line">list.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;id=<span class="number">1001</span>, name=<span class="string">'张三'</span>, age=<span class="number">34</span>, salary=<span class="number">50000.0</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">1002</span>, name=<span class="string">'李四'</span>, age=<span class="number">19</span>, salary=<span class="number">3000.0</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">1003</span>, name=<span class="string">'王五'</span>, age=<span class="number">14</span>, salary=<span class="number">600.0</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">1004</span>, name=<span class="string">'赵六'</span>, age=<span class="number">42</span>, salary=<span class="number">30000.0</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">1005</span>, name=<span class="string">'李明'</span>, age=<span class="number">22</span>, salary=<span class="number">6000.0</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">1006</span>, name=<span class="string">'张华'</span>, age=<span class="number">32</span>, salary=<span class="number">40000.0</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">1007</span>, name=<span class="string">'李华'</span>, age=<span class="number">30</span>, salary=<span class="number">9000.0</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">1008</span>, name=<span class="string">'王二'</span>, age=<span class="number">28</span>, salary=<span class="number">12000.0</span>&#125;</span><br><span class="line">Student&#123;id=<span class="number">1009</span>, name=<span class="string">'Tony'</span>, age=<span class="number">18</span>, salary=<span class="number">50000.0</span>&#125;</span><br></pre></td></tr></table></figure><p>去重后仅保留一个Tony对象</p><h3 id="映射"><a class="markdownIt-Anchor" href="#映射"></a> 映射</h3><p>映射就是 a -&gt; b 的过程，比如把水放进冰箱一段时间就会变成冰块，把水果放进榨汁机榨汁就会变成果汁等等，这些都是映射，只不过他们的映射规则不同。</p><p>在Stream中映射有两种</p><ul><li>map(Function f)</li><li>flatMap(Function f)</li></ul><h4 id="mapfunction-f"><a class="markdownIt-Anchor" href="#mapfunction-f"></a> map(Function f)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将一个流中元素转换成其他形式，或者提取其中信息，最终产生一个新的流</span><br><span class="line">其中这个Function就是映射规则，该函数会被应用到流中每一个元素上，并将其映射成一个新的元素</span><br></pre></td></tr></table></figure><p>举个例子说明下：</p><p>**信息提取：**提取流中前3个元素的姓名属性, 映射成新的元素，最终生成一个新的流，</p><p>为了好理解，这里用了终止操作<code>forEach()</code>,并将Stream实例化、中间操作、终止操作分开写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream&lt;Student&gt; --------&gt; Stream&lt;String&gt;</span></span><br><span class="line">Stream&lt;Student&gt; stream = list.stream();</span><br><span class="line">Stream&lt;String&gt; limit = stream.map(Student::getName).limit(<span class="number">3</span>);</span><br><span class="line">limit.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出信息为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王五</span><br></pre></td></tr></table></figure><p>可以看到经过了map，原本的Student流最终映射为String流</p><p>再举个例子：</p><p>**格式转换：**截取流中前三个元素的姓名和年龄，产生一个新的字符串，格式为<code>姓名:年龄</code>，以次产生一个新的流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream&lt;Student&gt; --------&gt; Stream&lt;String&gt;</span></span><br><span class="line">Stream&lt;Student&gt; stream1 = list.stream();</span><br><span class="line">Stream&lt;String&gt; limit1 = stream1.map(student -&gt; student.getName() + <span class="string">" : "</span> + student.getAge()).limit(<span class="number">3</span>);</span><br><span class="line">limit1.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三 : 34</span><br><span class="line">李四 : 19</span><br><span class="line">王五 : 14</span><br></pre></td></tr></table></figure><p>可以看到了，通过map，将Student流映射成指定格式的String流</p><h4 id="flatmapfunction-f"><a class="markdownIt-Anchor" href="#flatmapfunction-f"></a> FlatMap(Function f)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接收一个函数作为映射规则，该函数把流中的每个元素都转换成一个新的流，最后再把这些流连接成一个流</span><br></pre></td></tr></table></figure><p>说人话就是，flatmap会把每一个元素都映射成一个流，最终把多个流整合成一个流</p><p>举个例子</p><p>将这个字符串数组创建的Stream中的每个元素都用<code>,</code>分割后生成一个流，最终整合为一个完整的流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] strings = &#123;<span class="string">"a"</span>,<span class="string">"b,c,d"</span>,<span class="string">"A,B"</span>&#125;;</span><br><span class="line">Stream.of(strings).flatMap((s)-&gt;Stream.of(s.split(<span class="string">","</span>))).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">A</span><br><span class="line">B</span><br></pre></td></tr></table></figure><h4 id="map与flatmap的区别"><a class="markdownIt-Anchor" href="#map与flatmap的区别"></a> map与flatmap的区别</h4><p>可能你觉得map与flatmap好像没啥区别，都是在映射，都是把一个流变成另一个流</p><p>但其实大有不同！！！</p><ul><li>注意他们的参数Function</li><li>map是对每个元素进行映射，把所有映射后元素转为一个新的流</li><li>flatmap是对每个元素进行映射后，每个元素都转变成一个流，最终把产生的多个流整合为一个流</li></ul><p>先看两个Api的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//flatMap</span></span><br><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">flatMap</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><p>很明显flatMap的返回值R是Stream类型，这正对应了之前说的flatMap会把每个元素转换成Stream</p><p>如果把上一个例子中的flatmap换成map，试试会如何</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] strings = &#123;<span class="string">"a"</span>,<span class="string">"b,c,d"</span>,<span class="string">"A,B"</span>&#125;;</span><br><span class="line">Stream.of(strings).map((s)-&gt;Stream.of(s.split(<span class="string">","</span>))).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.util.stream.ReferencePipeline$Head@1963006a</span><br><span class="line">java.util.stream.ReferencePipeline$Head@7fbe847c</span><br><span class="line">java.util.stream.ReferencePipeline$Head@41975e01</span><br></pre></td></tr></table></figure><p>打印了3个对象，说明使用了map之后，最终生成的流中的3个元素都是流，并没有像flatmap进行整合操作</p><p>简单的总结下就如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map: 1个流 ----&gt; 1个流</span><br><span class="line">flatmap: 1个流 ----&gt; n个流 ----&gt; 1个流</span><br></pre></td></tr></table></figure><h3 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h3><p>Stream中间操作中有两种排序</p><ul><li>sorted()</li><li>sorted(Comparator c)</li></ul><h4 id="sorted自然排序"><a class="markdownIt-Anchor" href="#sorted自然排序"></a> sorted()自然排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sorted() 自然排序</span></span><br><span class="line">IntStream sorted = Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">99</span>,<span class="number">11</span>&#125;).sorted();</span><br><span class="line">sorted.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">11</span><br><span class="line">20</span><br><span class="line">99</span><br></pre></td></tr></table></figure><h4 id="sortedcomparator-c"><a class="markdownIt-Anchor" href="#sortedcomparator-c"></a> sorted(Comparator c)</h4><p>自定义排序，参数即为排序规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据对象中的年龄属性排序</span></span><br><span class="line">List&lt;Student&gt; list = StudentData.getList();</span><br><span class="line">list.stream()</span><br><span class="line">    .sorted((s1,s2)&gt;Integer.compare(s1.getAge(),s2.getAge()))</span><br><span class="line">    .limit(<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;id=1003, name=&apos;王五&apos;, age=14, salary=600.0&#125;</span><br><span class="line">Student&#123;id=1002, name=&apos;李四&apos;, age=19, salary=3000.0&#125;</span><br><span class="line">Student&#123;id=1005, name=&apos;李明&apos;, age=22, salary=6000.0&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.larscheng.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java8特性1 - lambda表达式&amp;函数式接口</title>
    <link href="https://www.larscheng.com/java8-lambda/"/>
    <id>https://www.larscheng.com/java8-lambda/</id>
    <published>2020-11-10T06:56:21.000Z</published>
    <updated>2022-01-02T05:18:26.505Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="引子"><a class="markdownIt-Anchor" href="#引子"></a> 引子</h2><blockquote><p>要求创建一个线程，线程中输出<code>hello world</code></p></blockquote><p>没学Lambda前的画风：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"hello world!"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> myThread()).start();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法2</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>当你学会Lambda表达式之后，画风是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"hello world!"</span>)).start();</span><br></pre></td></tr></table></figure><p>是不是有种打开新世界大门的感觉，一起来看下Java8的新特性之一<code>Lambda表达式</code>吧</p><blockquote><p>函数式接口：接口中只有一个抽象方法的接口</p></blockquote><p>这种接口都可以用lambda表达式来实现</p><h2 id="jdk内置四大基础函数式接口"><a class="markdownIt-Anchor" href="#jdk内置四大基础函数式接口"></a> JDK内置四大基础函数式接口</h2><ul><li>Consumer#accept(Object)<ul><li>void accept(T t);    消费型接口，接受一个参数，无返回</li></ul></li><li>Supplier#get()<ul><li>T get();             供给型接口，无参数，但有返回值</li></ul></li><li>Function#apply(Object)<ul><li>R apply(T t);        函数型接口，接收参数T,返回一个R</li></ul></li><li>Predicate#test(Object)<ul><li>boolean test(T t);   断定型接口，接收参数T，判断其是否满足某一约束，返回一个boolean值</li></ul></li></ul><p>从源码中可以看到这四个基础接口都有注解@FunctionalInterface，他们都有一个特点：</p><blockquote><p>有且仅有一个抽象方法</p></blockquote><p>下面通过以前的写法、Java8的lambda写法进行对比学习</p><h2 id="consumer"><a class="markdownIt-Anchor" href="#consumer"></a> Consumer</h2><blockquote><p>消费型接口，接收一个参数，但无返回值</p></blockquote><p>其接口核心源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接受单个输入参数且不返回结果的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;输入参数的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个小示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java8以前的写法</span></span><br><span class="line">Consumer&lt;String&gt; consumer1 = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">consumer1.accept(<span class="string">"接收1个参数，无返回值的函数式接口实现"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式写法</span></span><br><span class="line">Consumer&lt;String&gt; consumer2 = s -&gt; System.out.println(s);</span><br><span class="line">consumer2.accept(<span class="string">"接收1个参数，无返回值的lambda表达式"</span>);</span><br></pre></td></tr></table></figure><h2 id="supplier"><a class="markdownIt-Anchor" href="#supplier"></a> Supplier</h2><blockquote><p>供给型接口，无参数，但有返回值</p></blockquote><p>其接口核心源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代表了结果的提供者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 该接口对外提供的返回结果类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个小示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Integer&gt; supplier1 = <span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(<span class="string">"supplier接口原始写法获取随机数："</span> +supplier1.get());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line"></span><br><span class="line">Supplier&lt;Integer&gt; supplier2 = () -&gt; <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">"supplier接口Lambda表达式写法获取随机数："</span> +supplier2.get());</span><br></pre></td></tr></table></figure><h2 id="function"><a class="markdownIt-Anchor" href="#function"></a> Function</h2><blockquote><p>函数型接口，接收参数T,返回一个R</p></blockquote><p>其核心源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收一个参数并返回一个结果的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 函数（方法）的参数类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;R&gt; 函数（方法）的返回值类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新老用法对比例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, String&gt; function1 = <span class="keyword">new</span> Function&lt;Integer, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"接收整型参数："</span> + integer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(function1.apply(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line"></span><br><span class="line">Function&lt;Integer, String&gt; function2 = i -&gt; <span class="string">"接收整型参数："</span> + i;</span><br><span class="line">System.out.println(function2.apply(<span class="number">1000</span>));</span><br></pre></td></tr></table></figure><h2 id="predicate"><a class="markdownIt-Anchor" href="#predicate"></a> Predicate</h2><blockquote><p>断定型接口，接收参数T，判断其是否满足某一约束，返回一个boolean值</p></blockquote><p>核心源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收参数T，判断其是否满足某一约束，返回一个boolean值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 方法参数类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给定的参数进行自定义实现的判断，返回一个布尔值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 输入参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 判断通过，返回true</span></span><br><span class="line"><span class="comment">     * otherwise &#123;<span class="doctag">@code</span> false&#125; 判断不通过，返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Integer&gt; predicate1 = <span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> integer &gt; <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(<span class="string">"大于100 ? "</span> + predicate1.test(<span class="number">101</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line"></span><br><span class="line">Predicate&lt;Integer&gt; predicate2 = integer -&gt; integer&gt;<span class="number">100</span>;</span><br><span class="line">System.out.println(<span class="string">"大于100 ? "</span> + predicate2.test(<span class="number">99</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.larscheng.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式(5)-适配器模式</title>
    <link href="https://www.larscheng.com/adapter/"/>
    <id>https://www.larscheng.com/adapter/</id>
    <published>2020-10-11T03:53:14.000Z</published>
    <updated>2022-01-02T05:18:26.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h1><p>适配器模式：将一个类的接口转换为调用方希望的另一个接口，使得原本不兼容的接口变得可兼容共同工作</p><p>举一个生活中的例子来解释适配器模式如下：</p><ul><li>typeC的充电线不能给普通安卓机充电，因为接口不兼容，此时需要一个转接头适配器，typeC转安卓，即可实现给安卓手机充电</li><li>用直流电的电子设备在使用中都需要一个电源适配器将插座上的交流电转变为直流电<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/designpatteren/20201109141828.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/designpatteren/20201109142028.png" alt=""></li></ul><h1 id="角色和分类"><a class="markdownIt-Anchor" href="#角色和分类"></a> 角色和分类</h1><p>适配器模式种分为3大角色</p><ul><li>目标接口：当前系统业务所期待的接口，抽象类或者接口</li><li>适配者类：要被适配的类，原本不兼容的类</li><li>适配器类：一个转换器，通过继承或引用适配者对象，把适配者接口转换成目标接口，使得客户按照目标接口的格式访问适配者</li></ul><p>适配器模式分为3种：</p><ul><li>类适配器模式</li><li>对象适配器模式</li><li>接口适配器模式</li></ul><p>下面分别对他们进行介绍</p><h1 id="类适配器模式"><a class="markdownIt-Anchor" href="#类适配器模式"></a> 类适配器模式</h1><p>以<code>手机充电器</code>为例来介绍类适配器模式：充电器将220V交流电转换为5V直流电这一过程。其中的角色如下</p><ul><li>输出5v电压：目标接口，兼容手机充电</li><li>电源插座：适配者类，要被适配，不适合手机直接充电</li><li>手机充电器：适配器类，将220V不可用的电压转换为手机可用的充电电压</li></ul><p>简易的类图结构如下：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/designpatteren/20201109150453.png" alt=""></p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><p>目标接口，定义一个将220转换为5v的接口，作为一个标准，提供给各个厂商的电源适配器使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOutput5V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output5v</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被适配类，电源插座，提供220v的直流电，不能被手机直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Output220V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">        System.out.println(<span class="string">"电源输出电压：220V"</span>);</span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器类，继承了被适配类，实现目标接口具体的适配转换逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter220To5</span> <span class="keyword">extends</span> <span class="title">Output220V</span> <span class="keyword">implements</span> <span class="title">IOutput5V</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> src = output220();</span><br><span class="line">        <span class="comment">//适配电压</span></span><br><span class="line">        <span class="keyword">int</span> dts = src / <span class="number">44</span>;</span><br><span class="line">        System.out.println(<span class="string">"充电器适配后电压:"</span> + dts);</span><br><span class="line">        <span class="keyword">return</span> dts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上便完成了主要的角色实现，编写手机的充电方法进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IOutput5V iOutput5V)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iOutput5V.output5v()==<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"电压5v，开始充电"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">"电压不符，无法充电"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Phone().charging(<span class="keyword">new</span> Adapter220To5());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">电源输出电压：220V</span><br><span class="line">充电器适配后电压：5V</span><br><span class="line">电压5v，开始充电</span><br></pre></td></tr></table></figure><h2 id="类适配器模式说明"><a class="markdownIt-Anchor" href="#类适配器模式说明"></a> 类适配器模式说明</h2><p>适配器的实现过程中是继承了被适配类同时实现目标接口的方式，这样的原因是受Java单继承的限制，所以在类适配器模式下算是一个小小的缺点，使用继承大大的增加了适配器的复杂度。</p><h1 id="对象适配器模式"><a class="markdownIt-Anchor" href="#对象适配器模式"></a> 对象适配器模式</h1><p>基本思路和类的适配器模式相同，只是将Adapter类作修改，不是继承待适配类，而是持有待适配类的实例，以解决兼容性的问题。 即：持有待适配类，实现目标接口，完成兼容性适配</p><p>依然按照上文的场景和角色只有适配器类的变动，类图关系如下</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/designpatteren/20201109153736.png" alt=""></p><p>从原本的继承被适配类转变为持有被适配类的实例。涉及到代码修改的只有适配器类：Adapter220To5.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter220To5</span>  <span class="keyword">implements</span> <span class="title">IOutput5V</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Output220V output220;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Adapter220To5 <span class="title">setOutput220</span><span class="params">(Output220V output220)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.output220 = output220;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> src = output220.output220();</span><br><span class="line">        <span class="comment">//适配电压</span></span><br><span class="line">        <span class="keyword">int</span> dts = src / <span class="number">44</span>;</span><br><span class="line">        System.out.println(<span class="string">"充电器适配后电压:"</span> + dts);</span><br><span class="line">        <span class="keyword">return</span> dts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器类在需要持有被适配类的实例，所以在Phone充电方法中传入被适配类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IOutput5V iOutput5V)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iOutput5V.output5v()==<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"电压5v，开始充电"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">"电压不符，无法充电"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传入持有被适配类实例的适配器类</span></span><br><span class="line">        <span class="keyword">new</span> Phone().charging(<span class="keyword">new</span> Adapter220To5().setOutput220(<span class="keyword">new</span> Output220V()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象适配器模式说明"><a class="markdownIt-Anchor" href="#对象适配器模式说明"></a> 对象适配器模式说明</h2><ul><li>对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。</li><li>根据合成复用原则，使用组合替代继承，所以它解决了类适配器必须继承被适配类的局限性问题，也不再要求目标接口角色必须是接口。</li></ul><h1 id="接口适配器模式"><a class="markdownIt-Anchor" href="#接口适配器模式"></a> 接口适配器模式</h1><p>当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求</p><p>接口适配器模式适用于一个接口不想使用其所有的方法的情况</p><p>简单的类图结构如下：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/designpatteren/20201109171527.png" alt=""></p><h2 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h2><p>假定现在的目标接口定义了输出5v、输出20v、输出60v的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOutput</span> </span>&#123;</span><br><span class="line">    <span class="comment">//转换为5v输出</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output5</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//转换为20v输出</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output20</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//转换为60v输出</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output60</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象类默认实现目标接口，并持有待适配的对象实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsAdapter</span> <span class="keyword">implements</span> <span class="title">IOutput</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Output220V output220;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbsAdapter</span><span class="params">(Output220V output220V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.output220 = output220V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output20</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output60</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要使用到输出5v的转换时，或者需要使用输出10v转换时，使用匿名内部类的方式实现内部适配细节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IOutput iOutput)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iOutput.output5()==<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"电压5v，开始充电"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">"电压不符，无法充电"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbsAdapter absAdapter = <span class="keyword">new</span> AbsAdapter(<span class="keyword">new</span> Output220V()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> src = output220.output220();</span><br><span class="line">                <span class="comment">//适配电压</span></span><br><span class="line">                <span class="keyword">int</span> dts = src / <span class="number">44</span>;</span><br><span class="line">                System.out.println(<span class="string">"充电器适配后电压:"</span> + dts);</span><br><span class="line">                <span class="keyword">return</span> dts;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Phone().charging(absAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">电源输出电压：220V</span><br><span class="line">充电器适配后电压:5</span><br><span class="line">电压5v，开始充电</span><br></pre></td></tr></table></figure><h1 id="适配器模式总结"><a class="markdownIt-Anchor" href="#适配器模式总结"></a> 适配器模式总结</h1><p>主要优点：</p><ul><li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构。</li><li>增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用。</li><li>灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</li></ul><p>适用场景：</p><ul><li>系统需要使用一些现有的类，而这些类的接口（如方法名）不符合系统的需要，甚至没有这些类的源代码。</li><li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li></ul><h1 id="适配器模式在源码中的使用"><a class="markdownIt-Anchor" href="#适配器模式在源码中的使用"></a> 适配器模式在源码中的使用</h1><ul><li>SpringMvc中的HandlerAdapter就是典型的对象适配器模式</li><li><a href="https://blog.csdn.net/wwwdc1012/article/details/82780560" target="_blank" rel="noopener">spring AOP中的适配器模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.larscheng.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.larscheng.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式(4)-建造者模式</title>
    <link href="https://www.larscheng.com/builder/"/>
    <id>https://www.larscheng.com/builder/</id>
    <published>2020-09-29T05:53:14.000Z</published>
    <updated>2022-01-02T05:18:26.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>软件开发过程中，复杂对象的创建步骤繁杂，这些产品都是由多个部件构成的，各个部件可以灵活选择，但其创建步骤都大同小异。</p><p>复杂对象比如电脑、汽车、飞机、手机、冰箱…</p><p>这类产品的创建无法用前面介绍的工厂模式描述，只有建造者模式可以很好地描述该类产品的创建。</p><p><strong>将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，被称为建造者模式</strong></p><p>建造者模式又叫生成器模式，是一种对象构建模式。</p><h1 id="模拟场景"><a class="markdownIt-Anchor" href="#模拟场景"></a> 模拟场景</h1><p>组装台式电脑，不同的人选择的配置和价位都不同，而且组装电脑需要的零件很多过程十分复杂。</p><p>用代码实现不同用户组装不同价位和配置的电脑</p><h1 id="传统实现方式"><a class="markdownIt-Anchor" href="#传统实现方式"></a> 传统实现方式</h1><p>根据上述场景，主要有以下几个类</p><ul><li>抽象电脑类</li><li>具体电脑类A、B</li><li>客户类</li></ul><p>AbstractComputer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractComputer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**安装cpu*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**安装内存*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ram</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**安装硬盘*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">disk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**安装显卡*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">graphics</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**安装电源*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu();</span><br><span class="line">        <span class="keyword">this</span>.ram();</span><br><span class="line">        <span class="keyword">this</span>.disk();</span><br><span class="line">        <span class="keyword">this</span>.graphics();</span><br><span class="line">        <span class="keyword">this</span>.power();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通配置的电脑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerType1</span> <span class="keyword">extends</span> <span class="title">AbstractComputer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装普通cpu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ram</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装8g内存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装500g机械硬盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">graphics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装低配显卡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">power</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装普通电源"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户类需要该配置电脑时进行构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ComputerType1 computerType1 = <span class="keyword">new</span> ComputerType1();</span><br><span class="line">        computerType1.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传统方式来实现电脑的组装流程是比较好理解的，但是电脑作为产品，组装过程与产品并没有完全解耦。</p><p>在设计模式中，有一种专门用于将产品与产品创建过程分析的方式，也叫做建造者模式</p><h1 id="建造者模式"><a class="markdownIt-Anchor" href="#建造者模式"></a> 建造者模式</h1><p>又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p><p>他具有四个角色，分别为：</p><ul><li>Product（产品角色）： 一个具体的产品对象。</li><li>Builder（抽象建造者）： 创建一个Product对象的各个部件指定的 接口/抽象类。</li><li>ConcreteBuilder（具体建造者）： 实现接口，构建和装配各个部件。</li><li>Director（指挥者）： 构建一个使用Builder接口的对象。它主要是用于创建一个复杂的对象。<ul><li>它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/designpatteren/20201109111516.png" alt=""></p><h2 id="模拟场景-2"><a class="markdownIt-Anchor" href="#模拟场景-2"></a> 模拟场景</h2><p>电脑城买组装台式机。</p><p>从选机到下单到装机到提货流程繁多步骤复杂，</p><p>实际的流程是客户提出机器需求，装机店老板给出配置A和B两个套餐和价位，客户下单，老板根据配置单A/B指挥装机员A/B进行装机，装机员装好机器之后，由装机店老板转交客户</p><p>根据场景分析可得如下几个角色：</p><ul><li>电脑：具体产品</li><li>装机店：抽象建造者</li><li>装机员A、B：具体建造者</li><li>装机店老板：指挥者</li></ul><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/designpatteren/20201109112113.png" alt=""></p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><p>产品角色Computer定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String ram;</span><br><span class="line">    <span class="keyword">private</span> String disk;</span><br><span class="line">    <span class="keyword">private</span> String graphics;</span><br><span class="line">    <span class="keyword">private</span> String power;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get、set、toString省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象建造者，定义所有建造者的基础方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    <span class="comment">/**安装cpu*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**安装内存*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ram</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**安装硬盘*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">disk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**安装显卡*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">graphics</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**安装电源*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cpu();</span><br><span class="line">        <span class="keyword">this</span>.ram();</span><br><span class="line">        <span class="keyword">this</span>.disk();</span><br><span class="line">        <span class="keyword">this</span>.graphics();</span><br><span class="line">        <span class="keyword">this</span>.power();</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的建造者角色，装机员A、B，此处以A为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerInstallerA</span> <span class="keyword">extends</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span> </span>&#123;computer.setCpu(<span class="string">"普通cpu"</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ram</span><span class="params">()</span> </span>&#123;computer.setRam(<span class="string">"4G内存"</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disk</span><span class="params">()</span> </span>&#123;computer.setDisk(<span class="string">"500G机械硬盘"</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">graphics</span><span class="params">()</span> </span>&#123;computer.setGraphics(<span class="string">"集成显卡"</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">power</span><span class="params">()</span> </span>&#123;computer.setPower(<span class="string">"普通电源"</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指挥者角色，装机店老板，指挥装机员进行某一配置的装机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreBoss</span> </span>&#123;</span><br><span class="line">    ComputerBuilder builder = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StoreBoss <span class="title">setBuilder</span><span class="params">(ComputerBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Computer computer = builder.build();</span><br><span class="line">        System.out.println(computer.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上便是建造者模式的基础角色，编写客户类进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StoreBoss boss = <span class="keyword">new</span> StoreBoss();</span><br><span class="line">        <span class="comment">//客户A需要一台价格便宜的电脑</span></span><br><span class="line">        System.out.println(<span class="string">"客户A的电脑配置："</span>);</span><br><span class="line">        boss.setBuilder(<span class="keyword">new</span> ComputerInstallerA()).builder();</span><br><span class="line">        <span class="comment">//客户B需要一台高配高性能电脑</span></span><br><span class="line">        System.out.println(<span class="string">"客户B的电脑配置："</span>);</span><br><span class="line">        boss.setBuilder(<span class="keyword">new</span> ComputerInstallerB()).builder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户只需要联系装机店老板，并告诉他自己的需求，即可进行按需装机</p><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">客户A的电脑配置：</span><br><span class="line">Computer&#123;cpu=&apos;普通cpu&apos;, ram=&apos;4G内存&apos;, disk=&apos;500G机械硬盘&apos;, graphics=&apos;集成显卡&apos;, power=&apos;普通电源&apos;&#125;</span><br><span class="line">客户B的电脑配置：</span><br><span class="line">Computer&#123;cpu=&apos;高端cpu&apos;, ram=&apos;16G内存&apos;, disk=&apos;500G固态硬盘&apos;, graphics=&apos;GTX2080Ti显卡&apos;, power=&apos;金标550W电源&apos;&#125;</span><br></pre></td></tr></table></figure><h1 id="建造者模式与抽象工厂模式的比较"><a class="markdownIt-Anchor" href="#建造者模式与抽象工厂模式的比较"></a> 建造者模式与抽象工厂模式的比较</h1><p>与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族 。<br>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于<code>一步步构造一个复杂对象</code>，返回一个完整的对象 。</p><p><strong>如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.larscheng.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.larscheng.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式(3)-原型模式与浅拷贝和深拷贝</title>
    <link href="https://www.larscheng.com/prototype/"/>
    <id>https://www.larscheng.com/prototype/</id>
    <published>2020-09-05T01:53:14.000Z</published>
    <updated>2022-01-02T05:18:26.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>在有些系统中，存在大量相同或相似对象的创建问题，如果用传统的构造函数来创建对象，会比较复杂且耗时耗资源，<br>用原型模式生成对象就很高效，就像孙悟空拔下猴毛轻轻一吹就变出很多孙悟空一样简单。</p><p>原型模式定义：<code>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象</code></p><h1 id="模拟需求"><a class="markdownIt-Anchor" href="#模拟需求"></a> 模拟需求</h1><p>现在有一辆车，他的名字叫做哈啰单车，它的价格是2元/1小时，请编写程序创建多辆哈啰单车</p><p>简单分析后涉及到以下几个类：</p><ul><li>车辆类 Vehicle.java</li><li>测试类 Client.java</li></ul><h1 id="传统方式"><a class="markdownIt-Anchor" href="#传统方式"></a> 传统方式</h1><p>先来看下最容易理解的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**getter&amp;setter&amp;toString.......*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vehicle vehicle = <span class="keyword">new</span> Vehicle(<span class="string">"哈啰单车"</span>, <span class="number">2.0</span>);</span><br><span class="line">        Vehicle vehicle1 = <span class="keyword">new</span> Vehicle(vehicle.getName(),vehicle.getPrice());</span><br><span class="line">        Vehicle vehicle2 = <span class="keyword">new</span> Vehicle(vehicle.getName(),vehicle.getPrice());</span><br><span class="line">        System.out.println(vehicle.hashCode());</span><br><span class="line">        System.out.println(vehicle1.hashCode());</span><br><span class="line">        System.out.println(vehicle2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试类代码可以看到创建了另外3个属性相同但引用完全不同的哈啰单车</p><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1836019240</span><br><span class="line">325040804</span><br><span class="line">1173230247</span><br></pre></td></tr></table></figure><h1 id="原型模式"><a class="markdownIt-Anchor" href="#原型模式"></a> 原型模式</h1><p>上面的对象复制方式是比较容易理解的，但是如果要复制很多对象时，每次都要get/set ，工作量必然很大</p><p>那有没有其他的复制方式吗？当然有了，设计模式中有一种<code>原型模式</code>的设计理念</p><p>原型模式的概念我们上文也有提到：<code>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象</code></p><p>原型模式是一种创建型设计模式，创建方无需了解创建的细节，原型模式所涉及到的角色和类图如下</p><ul><li>抽象原型类Prototype：抽象原型类，声明一个克隆自己的方法</li><li>具体的原型实现类ConcretePrototype：具体的原型类，实现克隆自己的方法</li><li>客户类Client：客户调用方，克隆对象</li></ul><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/designpatteren/20201019165815.png" alt="原型模式"></p><h1 id="原型模式示例"><a class="markdownIt-Anchor" href="#原型模式示例"></a> 原型模式示例</h1><p>对于模式场景中，要求复制多个不同的对象的需求，使用原型模式则有了新的解决方案如下</p><p>Java中Object类提供一个clone方法。该方法可以将一个Java对象复制一份。<br>如果某一个要使用clone方法，必须先实现Cloneable接口，Cloneable接口表示该类能够复制并且具有复制能力</p><p>涉及到的类和角色如下：</p><ul><li>抽象原型类：Cloneable接口，声明了clone方法</li><li>具体原型类：Vehicle类，有自己的对象属性，并且实现了clone方法</li><li>Client：调用测试</li></ul><p>只需要将上面的代码加以修改即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**getter&amp;setter&amp;toString.......*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Vehicle vehicle = <span class="keyword">new</span> Vehicle(<span class="string">"哈啰单车"</span>, <span class="number">2.0</span>);</span><br><span class="line">        <span class="comment">//使用clone方法进行对象复制</span></span><br><span class="line">        Vehicle vehicle1 = (Vehicle) vehicle.clone();</span><br><span class="line">        Vehicle vehicle2 = (Vehicle) vehicle.clone();</span><br><span class="line">        System.out.println(vehicle.hashCode());</span><br><span class="line">        System.out.println(vehicle1.hashCode());</span><br><span class="line">        System.out.println(vehicle2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依旧执行测试方法，来看看通过clone方法是否复制出了不同的对象</p><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1836019240</span><br><span class="line">325040804</span><br><span class="line">1173230247</span><br></pre></td></tr></table></figure><p>通过上面的一个小场景，对原型模式进行了简单的演示。但是上面的原型模式在一些特殊情况下可能就会出现问题</p><h1 id="模拟需求2"><a class="markdownIt-Anchor" href="#模拟需求2"></a> 模拟需求2</h1><p>现在有一车辆类，他有名称、单价、所属公司三个属性；所属公司对象包含了公司名称属性，请编写程序创建多辆美团单车，单价为2元/小时，所属公司为美团点评</p><p>简单分析后涉及到以下几个类：</p><ul><li>车辆类 Vehicle.java</li><li>公司类 Company.java</li><li>测试类 Client.java</li></ul><p>在上文原型模式的代码中加上Company类的代码和Vehicle类的公司属性后如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**getter&amp;setter&amp;toString.......*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Company company;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**getter&amp;setter&amp;toString.......*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Vehicle vehicle = <span class="keyword">new</span> Vehicle(<span class="string">"美团单车"</span>, <span class="number">2.0</span>, <span class="keyword">new</span> Company(<span class="string">"美团点评"</span>));</span><br><span class="line"></span><br><span class="line">        Vehicle vehicle1 = (Vehicle) vehicle.clone();</span><br><span class="line">        Vehicle vehicle2 = (Vehicle) vehicle.clone();</span><br><span class="line">        System.out.println(<span class="string">"vehicle.hashCode(): "</span>+vehicle.hashCode()+<span class="string">" company.hashCode(): "</span>+ vehicle.getCompany().hashCode());</span><br><span class="line">        System.out.println(<span class="string">"vehicle1.hashCode(): "</span>+vehicle1.hashCode()+<span class="string">" company.hashCode(): "</span>+ vehicle1.getCompany().hashCode());</span><br><span class="line">        System.out.println(<span class="string">"vehicle2.hashCode(): "</span>+vehicle2.hashCode()+<span class="string">" company.hashCode(): "</span>+ vehicle2.getCompany().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察克隆对象后的输出结果，你就会发现问题所在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vehicle.hashCode(): 1836019240 company.hashCode(): 325040804</span><br><span class="line">vehicle1.hashCode(): 1173230247 company.hashCode(): 325040804</span><br><span class="line">vehicle2.hashCode(): 856419764 company.hashCode(): 325040804</span><br></pre></td></tr></table></figure><p>三个车辆对象的hashCode都不相同，说明有被成功克隆，但是其中的公司属性（对象类型）的hashCode并没有被同步克隆，内容中只有一份Company对象</p><p>相当于这次的克隆，内存中创建了三个不同车辆（Vehicle）对象，但是公司（Company）对象只有一个，被三个车辆对象所引用。</p><blockquote><p>理论上，在创建了第一个车辆对象后，连续克隆两次后，内存中应该有3个车辆对象和3个公司对象。</p></blockquote><p>这里就出现了原型模式中会存在的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 浅拷贝&amp;深拷贝</span><br><span class="line"></span><br><span class="line">关于浅拷贝的描述：</span><br><span class="line"></span><br><span class="line">- 数据类型为基本类型的成员变量，在调用默认clone方法后，会进行浅拷贝，即将该属性的值复制一份给新的对象</span><br><span class="line">- 数据类型为引用类型的成员变量，比如一个数组、一个对象，在调用默认的clone方法后，只会将成员变量的引用地址指向新的对象，而不会克隆新的成员变量对象</span><br><span class="line"></span><br><span class="line">这种现象即为`浅拷贝`，上面的几个例子严格来说都属于浅拷贝，因为都没有去考虑成员变量为引用类型时的对象克隆</span><br><span class="line"></span><br><span class="line">`深拷贝`自然是解决了浅拷贝的缺陷，对整个对象进行完全深度的对象复制，包括对象的引用类型和基本类型成员变量</span><br><span class="line"></span><br><span class="line"># 深拷贝应用</span><br><span class="line"></span><br><span class="line">针对模拟需求2，使用深拷贝的方式进行代码实现</span><br><span class="line"></span><br><span class="line">实现思路：Company和Vehicle都实现Cloneable接口，重写Vehicle的clone方法</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class Company  implements Cloneable &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        return super.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    /**getter&amp;setter&amp;toString.......*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Company company;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Vehicle vehicle = (Vehicle) <span class="keyword">super</span>.clone();</span><br><span class="line">        vehicle.setCompany((Company) <span class="keyword">this</span>.company.clone());</span><br><span class="line">        <span class="keyword">return</span> vehicle;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**getter&amp;setter&amp;toString.......*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client代码无需变动，执行Client进行测试，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vehicle.hashCode(): 1836019240 company.hashCode(): 325040804</span><br><span class="line">vehicle1.hashCode(): 1173230247 company.hashCode(): 856419764</span><br><span class="line">vehicle2.hashCode(): 621009875 company.hashCode(): 1265094477</span><br></pre></td></tr></table></figure><p>可以看到三个对象的对象成员属性明显都是不同的，说明做到了深拷贝</p><h1 id="常见的原型模式的运用"><a class="markdownIt-Anchor" href="#常见的原型模式的运用"></a> 常见的原型模式的运用</h1><p>Spring中配置bean的时候，scope属性可以配置一个prototype值，该值指定该bean的创建是使用原型模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//示例：</span><br><span class="line">    &lt;bean id=&quot;userDaoImpl&quot;  scope=&quot;prototype&quot; class=&quot;com.larscheng.www.dao.impl.UserDaoImpl&quot;/&gt;</span><br></pre></td></tr></table></figure><p>当通过getBean方法获取bean时，可以看到源码中对于scope属性进行了处理<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/designpatteren/20201020133700.png" alt=""></p><h1 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h1><ul><li>当我们要创建新的对象过于复杂时，可以考虑使用原型模式来进行创建</li><li>使用原型模式时，需要考虑到浅拷贝和深拷贝</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.larscheng.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.larscheng.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式(2)-工厂模式图文介绍</title>
    <link href="https://www.larscheng.com/factory/"/>
    <id>https://www.larscheng.com/factory/</id>
    <published>2020-08-30T04:53:14.000Z</published>
    <updated>2022-01-02T05:18:26.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="工厂模式"><a class="markdownIt-Anchor" href="#工厂模式"></a> 工厂模式</h1><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><a id="more"></a> <h1 id="模拟需求1"><a class="markdownIt-Anchor" href="#模拟需求1"></a> 模拟需求①</h1><p>假设现有一个口罩生产工厂，可以生产防霾口罩、医用一次性口罩、N95口罩<br>客户可以通过口罩直营店根据自己的需求下单购买口罩<br>使用代码实现这一流程</p><h1 id="传统实现方式"><a class="markdownIt-Anchor" href="#传统实现方式"></a> 传统实现方式</h1><p>根据给出的需求，结合面向对象思想，大概有以下几个类</p><ul><li>BaseMask 抽象口罩类</li><li>HazeMask 防霾口罩类</li><li>MedicalMask 医用口罩类</li><li>N95Mask N95口罩类</li><li>MaskStore 直营店类</li><li>Client 客户类</li></ul><p>简单类图如下：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/softexam/20201009151251.png" alt=""></p><h2 id="实现代码"><a class="markdownIt-Anchor" href="#实现代码"></a> 实现代码</h2><p>HazeMask、MedicalMask、N95Mask继承自BaseMask，分别实现prepare方法，并调用setName方法设置name属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseMask</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"开始加工..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bale</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"打包完成..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MaskStore类，实现了口罩直营店根据用户需求进行下单的流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaskStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BaseMask mask = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> maskType;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            maskType = getType();</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == maskType)&#123;</span><br><span class="line">                mask = <span class="keyword">new</span> HazeMask();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == maskType)&#123;</span><br><span class="line">                mask = <span class="keyword">new</span> MedicalMask();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == maskType)&#123;</span><br><span class="line">                mask = <span class="keyword">new</span> N95Mask();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"不支持的产品类型"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mask.prepare();</span><br><span class="line">            mask.processing();</span><br><span class="line">            mask.bale();</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**接收用户要下单的产品类型</span></span><br><span class="line"><span class="comment">     * 1：防霾口罩</span></span><br><span class="line"><span class="comment">     * 2：医用口罩</span></span><br><span class="line"><span class="comment">     * 3：n95口罩</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader typeReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.println(<span class="string">"输入需要下单的类型: "</span>);</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(typeReader.readLine());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client的实现就相对简单，模拟用户下单操作，直接调用直营店暴露的下单order方法</p><h2 id="优缺点分析"><a class="markdownIt-Anchor" href="#优缺点分析"></a> 优缺点分析</h2><p>根据场景需求我们有了如上的代码方案，其中涉及到的类和方法都比较好理解，核心主要是通过用户需要下单的type来进行产品的创建，但优缺点需要细细捋一捋</p><p>优点：思路清晰，便于理解<br>缺点：违反开闭原则，也就是扩展性差，如果添加一个新的口罩类型，涉及到的修改点过多</p><p>举个栗子：<br>如果这时候添加一个新的口罩类型，那所有的口罩直营店类中的代码都需要同步修改</p><p>这时候有一种解决方案：<strong>将根据类型创建产品的方法单独封装起来</strong>，当有新产品加入时，只需要修改单独封装过的这部分代码，而调用方可以做到无感知接入，这种方式也叫做<code>简单工厂模式</code>。但他并不属于23种设计模式，简单工厂仅仅指一种创建类的解决方案</p><h1 id="简单工厂模式"><a class="markdownIt-Anchor" href="#简单工厂模式"></a> 简单工厂模式</h1><p>相对于传统方案中多出一个简单工厂类SimpleMaskFactory，同时对MaskStore进行了重构，简单类图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/softexam/20201009155326.png" alt=""></p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><p>与传统方案不同的是，之前的口罩产品创建是在MaskStore中，使用简单工厂模式后，将创建口罩产品的工作封装到了SimpleMaskFactory中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMaskFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseMask <span class="title">createMask</span><span class="params">(<span class="keyword">int</span> maskType)</span> </span>&#123;</span><br><span class="line">        BaseMask mask = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == maskType) &#123;</span><br><span class="line">            mask = <span class="keyword">new</span> HazeMask();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == maskType) &#123;</span><br><span class="line">            mask = <span class="keyword">new</span> MedicalMask();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> == maskType) &#123;</span><br><span class="line">            mask = <span class="keyword">new</span> N95Mask();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MaskStore只需要持有工厂类和需要下单的产品类型，发起下单操作即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaskStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SimpleMaskFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaskStore</span><span class="params">(SimpleMaskFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BaseMask mask = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> maskType;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            maskType = getType();</span><br><span class="line">            mask = factory.createMask(maskType);</span><br><span class="line">            <span class="keyword">if</span> (!Objects.isNull(mask))&#123;</span><br><span class="line">                mask.prepare();</span><br><span class="line">                mask.processing();</span><br><span class="line">                mask.bale();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"不支持的产品类型..."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader typeReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"输入需要下单的类型: "</span>);</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(typeReader.readLine());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client客户端的调用也更加方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MaskStore(<span class="keyword">new</span> SimpleMaskFactory()).order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模拟需求2"><a class="markdownIt-Anchor" href="#模拟需求2"></a> 模拟需求②</h1><p>假设现有多个口罩生产工厂，大致分为杭州制造和上海制造，可以生产防霾口罩、医用一次性口罩，<br>客户可以通过自己的需求下单购买某个地址制造的某一种口罩<br>使用代码实现这一流程</p><p>此时的需求不仅有地域区分，同时还有种类区分，这种场景该如何处理呢？</p><ul><li>方案1<ul><li>使用简单工厂模式，根据地域创建不同的工厂类，通过不同的工厂类来进行不同的产品创建</li><li>扩展性差，可维护性差</li></ul></li><li>方案2<ul><li>使用工厂方法模式，将创建产品的方法抽象化，创建对象的操作交给子类自己来完成，即将对象实例化推迟到子类</li></ul></li></ul><h1 id="工厂方法模式"><a class="markdownIt-Anchor" href="#工厂方法模式"></a> 工厂方法模式</h1><p>与简单工厂模式所不同，工厂方法模式将定义一个创建对象的抽象方法，根据实际需求整理到所涉及的类有</p><ul><li>BaseMask 抽象的口罩类</li><li>HangzhouHazeMask 杭州制造-防霾口罩</li><li>HangzhouMedicalMask 杭州制造-医用口罩</li><li>ShanghaiHazeMask 上海制造-防霾口罩</li><li>ShanghaiMedicalMask 上海制造-医用口罩</li><li>BaseMaskFactory 抽象口罩工厂类，定义了一个创建对象的抽象方法，将对象创建延缓到子类进行</li><li>HangzhouMaskFactory 杭州制造工厂类</li><li>ShanghaiMaskFactory 上海制造工厂类</li><li>Client 客户类</li></ul><p>简单的类图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/softexam/20201009191546.png" alt=""></p><h2 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h2><p>HangzhouHazeMask、HangzhouMedicalMask、ShanghaiHazeMask、ShanghaiMedicalMask继承自BaseMask，分别实现prepare方法，并调用setName方法设置name属性</p><p>HangzhouMaskFactory、ShanghaiMaskFactory继承自BaseMaskFactory类，重写了抽象方法createMask方法实现自己的对象创建逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseMaskFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法，子类自己实现对象的创建</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> BaseMask <span class="title">createMask</span><span class="params">(<span class="keyword">int</span> maskType)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseMaskFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BaseMask mask = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> maskType;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//1：防霾口罩 2：医用口罩</span></span><br><span class="line">            maskType = getType();</span><br><span class="line">            mask = createMask(maskType);</span><br><span class="line">            <span class="keyword">if</span> (!Objects.isNull(mask)) &#123;</span><br><span class="line">                mask.prepare();</span><br><span class="line">                mask.processing();</span><br><span class="line">                mask.bale();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"不支持的产品类型..."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HangzhouMaskFactory</span> <span class="keyword">extends</span> <span class="title">BaseMaskFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">BaseMask <span class="title">createMask</span><span class="params">(<span class="keyword">int</span> maskType)</span> </span>&#123;</span><br><span class="line">        BaseMask mask = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>==maskType)&#123;</span><br><span class="line">            mask = <span class="keyword">new</span> HangzhouHazeMask();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span>==maskType)&#123;</span><br><span class="line">            mask = <span class="keyword">new</span> HangzhouMedicalMask();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的客户调用，可以有选择性的指定某一地区来进行下单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请选择要购买的产品产地，1:杭州，2:上海"</span>);</span><br><span class="line">        <span class="keyword">int</span> location = Integer.parseInt(scanner.nextLine());</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == location) &#123;</span><br><span class="line">            <span class="keyword">new</span> HangzhouMaskFactory();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == location) &#123;</span><br><span class="line">            <span class="keyword">new</span> ShanghaiMaskFactory();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"暂无该地区产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模拟需求3"><a class="markdownIt-Anchor" href="#模拟需求3"></a> 模拟需求③</h1><p>假设现有两种产品要进行生产：口罩和酒精，并且有杭州和上海两个工厂都可以生产这两种产品<br>客户可以通过自己的需求下单购买某个地址制造的某一种产品<br>使用代码实现这一流程</p><p>这次的需求不同以往，产品类型出现了多种，即一个工厂可以生产多种不同类型的产品，这种涉及到多个产品簇，比较推荐使用抽象工厂模式</p><h1 id="抽象工厂模式"><a class="markdownIt-Anchor" href="#抽象工厂模式"></a> 抽象工厂模式</h1><p><strong>抽象工厂模式</strong>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，<br>且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式中一个工厂只生产一种产品，而在抽象工厂模式中，一个工厂生产多种产品，并且存在多个工厂</p><p>抽象工厂模式中有这两个概念</p><ul><li>产品等级：产品等级可以理解为同一类产品属于一个等级，比如防霾口罩、与医用外科口罩都属于口罩类，属于一个产品等级，但口罩和酒精明显不是一个产品等级</li><li>产品族：同一个具体工厂所生产的位于不同产品等级的所有产品称作一个产品族。比如杭州工厂生产的杭州口罩和酒精就属于一个产品族</li></ul><p>上面的需求用抽象工厂模式的思路得到的简单类图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/softexam/20201010112724.png" alt=""></p><h2 id="代码实现-3"><a class="markdownIt-Anchor" href="#代码实现-3"></a> 代码实现</h2><p>其中HangzhouMask、ShanghaiMask都继承自BaseMask，HangzhouAlcohol、ShanghaiAlcohol继承自BaseAlcohol</p><p>通过定义抽象工厂接口AbstractMaskFactory，定义创建产品的方法，交由子类工厂进行实现。这里的产品创建方法可以覆盖到所有的产品等级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">BaseMask <span class="title">createMask</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">BaseAlcohol <span class="title">createAlcohol</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HangzhouFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseMask <span class="title">createMask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HangzhouHazeMask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseAlcohol <span class="title">createAlcohol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HangzhouAlcohol();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShanghaiFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseMask <span class="title">createMask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShanghaiHazeMask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseAlcohol <span class="title">createAlcohol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShanghaiAlcohol();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建了工厂类后，客户可以通过某一工厂进行指定产品的下单操作，这些逻辑封装在了Store类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Store</span><span class="params">(AbstractFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderMask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BaseMask mask = <span class="keyword">null</span>;</span><br><span class="line">        mask = factory.createMask();</span><br><span class="line">        <span class="keyword">if</span> (!Objects.isNull(mask)) &#123;</span><br><span class="line">            mask.prepare();</span><br><span class="line">            mask.processing();</span><br><span class="line">            mask.bale();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"不支持的产品类型..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderAlcohol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BaseAlcohol alcohol = <span class="keyword">null</span>;</span><br><span class="line">        alcohol = factory.createAlcohol();</span><br><span class="line">        <span class="keyword">if</span> (!Objects.isNull(alcohol)) &#123;</span><br><span class="line">            alcohol.prepare();</span><br><span class="line">            alcohol.processing();</span><br><span class="line">            alcohol.bale();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"不支持的产品类型..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3种工厂模式的总结"><a class="markdownIt-Anchor" href="#3种工厂模式的总结"></a> 3种工厂模式的总结</h1><p>本文一共提到了三种工厂模式，简单工厂模式、工厂方法模式、抽象工厂模式，也根据模拟场景对其进行了简单的说明</p><p>从上面的介绍中可以简单做下总结</p><ul><li>简单工厂模式<ul><li>实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责</li><li>工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码</li><li>而且产品较多时，工厂方法代码逻辑将会非常复杂</li></ul></li><li>工厂方法模式<ul><li>定义一个抽象的核心工厂类，并定义创建产品对象的接口，创建具体产品实例的工作延迟到其工厂子类去完成</li><li>系统需要新增一个产品是，无需修改现有系统代码，只需要添加一个具体产品类和其对应的工厂子类</li><li>系统的扩展性变得很好，符合面向对象编程的开闭原则</li></ul></li><li>抽象工厂模式<ul><li>工厂模式的升级版，工厂方法模式中一个工厂负责生产一类产品，而抽象工厂模式中一个工厂可以生产多种产品</li><li>扩展性更强，无论是增加工厂，还是增加产品，抽象工厂模式都比工厂方法模式更为便捷</li></ul></li></ul><p>关于工厂方法模式和抽象工厂模式的几点区别如下：</p><ul><li>工厂方法模式利用继承，抽象工厂模式利用组合</li><li>工厂方法模式产生一个对象，抽象工厂模式产生一族对象</li><li>工厂方法模式利用子类创造对象，抽象工厂模式利用接口的实现创造对象</li></ul><h1 id="常见的工厂模式的运用"><a class="markdownIt-Anchor" href="#常见的工厂模式的运用"></a> 常见的工厂模式的运用</h1><ul><li>JDK中Calendar的getlnstance方法</li><li>JDBC中的Connection对象的获取</li><li>Spring中IOC容器创建管理bean对象</li><li>反射中Class对象的newlnstance方法</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工厂模式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#工厂模式&quot;&gt;&lt;/a&gt; 工厂模式&lt;/h1&gt;
&lt;p&gt;工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;
&lt;p&gt;在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://www.larscheng.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.larscheng.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式(1)-带你了解3类8种单例模式</title>
    <link href="https://www.larscheng.com/singleton/"/>
    <id>https://www.larscheng.com/singleton/</id>
    <published>2020-08-29T05:53:14.000Z</published>
    <updated>2022-01-02T05:18:26.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="单例模式的分类"><a class="markdownIt-Anchor" href="#单例模式的分类"></a> 单例模式的分类</h1><ul><li>饿汉式<ul><li>静态常量</li><li>静态代码块</li></ul></li><li>懒汉式<ul><li>线程不安全</li><li>线程安全，同步方法</li><li>线程安全，同步代码块</li><li>双重检查锁</li><li>静态内部类</li></ul></li><li>枚举</li></ul><a id="more"></a> <h1 id="饿汉式"><a class="markdownIt-Anchor" href="#饿汉式"></a> 饿汉式</h1><p>饿汉式，单例模式的一种类型，对于这个名字可以假想成:</p><blockquote><p>有一天小明买了菜回到家，由于他特别饿，于是就把所有菜都用掉做了满满一桌子菜，而直到最后吃饱，仍然有一些菜从来没尝过，而且由于做的菜太多导致的燃气也用完了。</p></blockquote><p>这里的菜就是我们要使用的对象，而小明就是单例类，燃气就是系统内存。在调用方准备使用对象前，就把所有的对象都实例化好，以供随时调用，但如果实例化工作量过大可能导致内存浪费</p><h2 id="饿汉式-静态常量慎用"><a class="markdownIt-Anchor" href="#饿汉式-静态常量慎用"></a> 饿汉式-静态常量(⭐慎用)</h2><p>这是最简单的单例模式，主要有以下几点核心思路</p><ul><li>私有构造方法</li><li>私有静态常量，类加载时初始化常量对象</li><li>公有对象获取方法</li></ul><p>示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonType01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton01 instance1 = Singleton01.getInstance();</span><br><span class="line">        Singleton01 instance2 = Singleton01.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance1 == instance2 "</span>+(instance1==instance2));</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line">        System.out.println(instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法私有，防止外部实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在类加载时创建私有的静态变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton01 INSTANCE = <span class="keyword">new</span> Singleton01();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供获取对象的静态方法，</span></span><br><span class="line"><span class="comment">     * 外部调用，类名.方法名 Singleton.getInstance()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton01 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码本机执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">instance1 == instance2 true</span><br><span class="line">491044090</span><br><span class="line">491044090</span><br></pre></td></tr></table></figure><blockquote><p>主方法中对于两次获取到的对象进行了对比，可以看到两者为同一对象，且hashcode相同</p></blockquote><p>优点：</p><ul><li>写法简单，在类装载的时候完成实例化，避免线程同步问题</li></ul><p>缺点：</p><ul><li>在类装载时就实例化，那可能这个对象从始至终都没有被用到，无形中造成资源浪费，没有懒加载效果</li></ul><blockquote><p>这种单例模式，可以使用，并且无需考虑多线程问题，但是存在内存浪费问题</p></blockquote><h2 id="饿汉式-静态代码块慎用"><a class="markdownIt-Anchor" href="#饿汉式-静态代码块慎用"></a> 饿汉式-静态代码块(⭐慎用)</h2><p>饿汉式静态代码块的实现与静态常量基本类似，唯一不同就是对象的实例化从静态变量转移到了静态代码块中，但其都是在类加载是执行的</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> larsCheng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonType02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton02 instance1 = Singleton02.getInstance();</span><br><span class="line">        Singleton02 instance2 = Singleton02.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance1 == instance2 : "</span>+(instance1==instance2));</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line">        System.out.println(instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton02</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法私有，防止外部实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态私有变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Singleton02 INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象的实例化放在了静态代码块中，同样也是类加载时被执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> Singleton02();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供获取对象的静态方法，</span></span><br><span class="line"><span class="comment">     * 外部调用，类名.方法名 Singleton.getInstance()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton02 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码本机执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">instance1 == instance2 : true</span><br><span class="line">491044090</span><br><span class="line">491044090</span><br></pre></td></tr></table></figure><p>可以看出同样是单例对象的效果，所有与饿汉式静态常量写法相比较，其优缺点也一样，都会造成内存浪费</p><h1 id="懒汉式"><a class="markdownIt-Anchor" href="#懒汉式"></a> 懒汉式</h1><p>前面提到的两种单例模式都是饿汉式，即无论用不用这个对象，他对会被实例化。</p><p>这里要提到的是另一种单例模式-懒汉式，即对象只有在需要使用的时候才进行实例化，同样可以想象成一个小场景</p><blockquote><p>有一天小李特别饿，但是他很懒，不想做饭就到餐馆吃饭，看了菜单从里面选择点了一份牛肉拉面，后厨师傅马上给他做好，小李吃饱后就开心的回家了</p></blockquote><p>虽然描述的比较抽象，小李是是对象使用方，菜单上的每一个菜是一个单例类，后厨师傅是JVM。</p><p>当你选定一个对象了之后才会为你立即创建，而不是提前把所有的对象都实例化好。这样实现了懒加载的效果</p><h2 id="懒汉式-线程不安全不可使用"><a class="markdownIt-Anchor" href="#懒汉式-线程不安全不可使用"></a> 懒汉式-线程不安全（👎👎👎不可使用）</h2><p>懒汉式的简易版本，这一实现方式虽然做到了懒加载，但是存在线程安全问题</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonType03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton03 instance1 = Singleton03.getInstance();</span><br><span class="line">        Singleton03 instance2 = Singleton03.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance1 == instance2 : "</span> + (instance1 == instance2));</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line">        System.out.println(instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton03</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法私有，防止外部实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态私有变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton03 INSTANCE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供获取对象的静态方法，此处存在线程安全问题</span></span><br><span class="line"><span class="comment">     * 外部调用，类名.方法名 Singleton.getInstance()</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton03 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> Singleton03();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码本机执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">instance1 == instance2 : true</span><br><span class="line">491044090</span><br><span class="line">491044090</span><br></pre></td></tr></table></figure><p>简单的执行测试结果看似乎并无问题，做到了延迟加载（懒加载），并且实现了单例模式</p><blockquote><p>但是！！！这一切都是单线程的前提下，一旦为多线程环境，在getInstance方法中会有严重的线程安全问题</p></blockquote><p>分析：</p><ul><li>假设有两个线程A、B</li><li>A线程先到，判断INSTANCE为空，进入if内，准备进行对象初始化</li><li>此时B线程也到达if判断，发现INSTANCE仍为空（A还未完成对象实例化），B也进入if内。</li></ul><p>这种情况下，待A、B执行完后，得到的将是两个对象。这就完全违背了单例模式的初衷！！</p><p>所以通常情况下，<strong>不推荐使用这种懒汉式的单例模式</strong>。因为绝大多数的应用场景都为多线程环境。</p><p>而在多线程环境下，这种实现方式完全不算单例模式的范畴，因为它会产生多个对象实例</p><h2 id="懒汉式-同步方法不推荐"><a class="markdownIt-Anchor" href="#懒汉式-同步方法不推荐"></a> 懒汉式 - 同步方法（👎不推荐）</h2><p>针对于线程不安全问题，对应则有线程安全的解决方案</p><p>即在getInstance方法上加入synchronized关键字，将其改造成同步方法，解决在多线程环境下的线程不安全问题</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Singleton04 &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 构造方法私有，防止外部实例化</span><br><span class="line">     */</span><br><span class="line">    private Singleton04() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 静态私有变量</span><br><span class="line">     */</span><br><span class="line">    private static Singleton04 INSTANCE;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对外提供获取对象的静态方法，加入同步关键字，解决线程同步问题</span><br><span class="line">     * 外部调用，类名.方法名 Singleton.getInstance()</span><br><span class="line">     *</span><br><span class="line">     * @return 返回单例对象</span><br><span class="line">     */</span><br><span class="line">    public static synchronized Singleton04 getInstance() &#123;</span><br><span class="line">        if (INSTANCE == null) &#123;</span><br><span class="line">            INSTANCE = new Singleton04();</span><br><span class="line">        &#125;</span><br><span class="line">        return INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，虽然解决了线程不安全问题，但是随之而来的是效率问题</p><p>分析：</p><ul><li>每次调用getInstance方法都需要进行线程同步</li><li>实际上造成多个对象被实例化的仅仅只是方法中代码片段</li></ul><blockquote><p>所以总的来说，虽然解决的线程安全问题，但是由于效率不加，且有优化方案，故此种方式也不建议使用</p></blockquote><p>针对同步方法带来的效率问题，有改进方案，<strong>但有一种错误的改进方案这里有必要提一下</strong></p><p>将<code>同步方法改造为同步代码块</code>，尝试减少同步的代码，来提高效率，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton04ErrorSolution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法私有，防止外部实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton04ErrorSolution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态私有变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton04ErrorSolution INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供获取对象的静态方法，对造成线程安全问题的代码块进行同步</span></span><br><span class="line"><span class="comment">     * 外部调用，类名.方法名 Singleton.getInstance()</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton04ErrorSolution <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton04ErrorSolution.class) &#123;</span><br><span class="line">                INSTANCE = <span class="keyword">new</span> Singleton04ErrorSolution();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码的本意是将同步方法细化到同步代码块，来进行效率优化，但是这样的改动起到了相反的效果</p><p>分析：</p><ul><li>对实例化对象的代码片段进行同步，假设A、B两线程执行getInstance方法</li><li>A线程判断INSTANCE为空后进入if内，准备执行同步代码块，此时B线程也判断INSTANCE为空，也进入了if内部，等待A线程执行完毕</li><li>A线程执行完同步代码块后，实例化了一个对象，此时B线程开始执行，也创建了一个对象</li></ul><p>从上面的分析可以看出，这种改进方案，属于<strong>想法正确，但是操作错误</strong>，导致不但没有解决效率问题，同时造成线程安全问题，是一定要避免的错误！！</p><h2 id="懒汉式-同步代码块不推荐"><a class="markdownIt-Anchor" href="#懒汉式-同步代码块不推荐"></a> 懒汉式-同步代码块（👎不推荐）</h2><p>基于上文提到的优化思路：将同步方法细化到同步代码块，那正确的改进方案可能会有下面这种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton05</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法私有，防止外部实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态私有变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton05 INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供获取对象的静态方法，加入同步关键字，解决线程同步问题</span></span><br><span class="line"><span class="comment">     * 外部调用，类名.方法名 Singleton.getInstance()</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton05 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton05.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                INSTANCE = <span class="keyword">new</span> Singleton05();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从getInstance方法可以看到，使用了同步代码块的方式，并且同步的是if判断和实例化部分的代码</p><p>虽然达到了线程安全，但是基本上和同步方法的效率没什么区别，依旧每个线程进来后，都需要等待执行同步代码块。</p><blockquote><p>这种方案只是为了和上面的错误同步代码块方式进行对比。真实业务中也不推荐使用这种方式！！！</p></blockquote><h2 id="双重检查锁推荐使用"><a class="markdownIt-Anchor" href="#双重检查锁推荐使用"></a> 双重检查锁（👍推荐使用）</h2><p>想要实现懒加载，同时保证线程安全，同时提高效率。那么一起来看看双重检查锁的实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton06</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法私有，防止外部实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态私有变量</span></span><br><span class="line"><span class="comment">     * 声明volatile,防止指令重排,导致的空对象异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton06 INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供获取对象的静态方法，使用双重检查锁机制，保证同步代码块中的实例化代码只会被执行一次</span></span><br><span class="line"><span class="comment">     * 外部调用，类名.方法名 Singleton.getInstance()</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton06 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton06.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> Singleton06();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先先来看看该方案于前几种的不同点</p><ul><li>使用synchronized关键字实现同步代码块</li><li>同步前同步后两次判断</li><li>使用了volatile关键字</li></ul><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><p>在getInstance方法中使用了Double-Check概念，配合同步代码块，保证线程安全。简单分析下其流程</p><ul><li>A、B、C 3个线程执行getInstance方法</li><li>A、B线程都通过了第一个if判断，A线程抢到了锁，开始执行同步代码块中的逻辑，B等待</li><li>A通过了第二个if判断，进行了INSTANCE的实例化操作，A完成操作，释放锁</li><li>B开始执行同步代码块内容，B未通过第二个if(此时的INSTANCE不为空)，直接返回INSTANCE对象，B释放锁</li><li>此时C开始执行getInstance方法，C未通过第一个if，直接返回INSTANCE对象</li></ul><p>从上面分析过程中可以看到，无论有多少个线程，实例化代码只会被执行一次，意味着只会创建一个对象。</p><h3 id="volatile"><a class="markdownIt-Anchor" href="#volatile"></a> volatile</h3><p>但是在整个流程中有一个小小的隐患</p><p><code>INSTANCE = new Singleton06();</code>它并非是一个原子操作，事实上，在 JVM 中上述语句至少做了以下这 3 件事：</p><p>①第一步：给 INSTANCE 分配内存空间；<br>②第二步：调用 Singleton06 的构造函数等，来初始化 INSTANCE；<br>③第三步：将 Singleton06 对象指向分配的内存空间（执行完这步 INSTANCE 就不是 null 了）。</p><p>这里的理想执行顺序是 1-&gt;2-&gt;3，实际在Jvm中执行顺序有可能是1-&gt;3-&gt;2，也有可能是 1-&gt;2-&gt;3。<br>这种现象被称作<code>指令重排</code>也就是说第 2 步和第 3 步的顺序是不能保证的，这就导致了隐患的产生。</p><p>在线程A执行<code>INSTANCE = new Singleton06();</code>是，JVM中的执行顺序是1-&gt;3-&gt;2，先进行分配内存再初始化INSTANCE，若在刚完成内存分配时，线程C开始执行第一个if判断，发现INSTANCE不为空，直接返回INSTANCE对象，此时的INSTANCE明显会出现问题。</p><p>在Java内存模型中，volatile 关键字作用可以是保证可见性且禁止指令重排。从而避免由于指令重排导致的异常隐患。</p><p>关于 <code>volatile关键字和指令重排相关</code> 可以参考<a href="https://www.cnblogs.com/zhengbin/p/5654805.html" target="_blank" rel="noopener">此处</a></p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>双重检测锁的单例实现方案，可以实现延迟加载，同时线程安全并且效率高，在实际场景中是推荐使用的！</p><h2 id="静态内部类推荐使用"><a class="markdownIt-Anchor" href="#静态内部类推荐使用"></a> 静态内部类(👍推荐使用)</h2><p>除了双重检查锁被推荐使用外，静态内部类实现单例模式也是被推荐使用的一种<br>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton07</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法私有，防止外部实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个静态内部类，类中声明一个类型为 Singleton07 的静态属性 INSTANCE</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton07 INSTANCE = <span class="keyword">new</span> Singleton07();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供获取对象的静态方法，</span></span><br><span class="line"><span class="comment">     * 外部调用，类名.方法名 Singleton.getInstance()</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回静态内部类的静态属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton07 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-2"><a class="markdownIt-Anchor" href="#分析-2"></a> 分析</h3><ul><li>该方案采用了类装载机制来保证<code>初始化实例时</code>只有一个线程，从而保证了线程安全</li><li>单例类Singleton07被装载时，静态内部类SingletonInstance是不会实例化的，只有调用getInstance方法时才会触发静态内部类SingletonInstance的装载，从而执行实例化代码</li><li>并且静态内部类的静态属性只会在第一次加载类的时候被初始化，所以做到了懒加载</li></ul><h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h3><p>保证了线程安全，使用静态内部类的特点实现懒加载，并且有较高效率，推荐使用</p><h2 id="枚举推荐使用"><a class="markdownIt-Anchor" href="#枚举推荐使用"></a> 枚举（👍推荐使用）</h2><p>那么这么多的实现方案，Java中有没有一个公认的最佳枚举实现方案呢，当然有啊，通过枚举来实现<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonType08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String connection1 = Singleton08.INSTANCE.getConnection();</span><br><span class="line">        String connection2 = Singleton08.INSTANCE.getConnection();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"connection1 == connection2 : "</span> + (connection1 == connection2));</span><br><span class="line">        System.out.println(connection2.hashCode());</span><br><span class="line">        System.out.println(connection2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Singleton08 &#123;</span><br><span class="line">    <span class="comment">/***/</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**资源对象,此处以字符串示例*/</span></span><br><span class="line">    <span class="keyword">private</span> String connection = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在私有构造中实例化单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Singleton08() &#123;</span><br><span class="line">        <span class="comment">//模拟实例化过程</span></span><br><span class="line">        <span class="keyword">this</span>.connection = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供获取资源对象的静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码是通过枚举来实现单例对象的创建</p><p>enum有且仅有private的构造器，防止外部的额外构造，这恰好和单例模式吻合，也为保证单例性做了一个铺垫。<br>枚举类型是线程安全的，并且只会装载一次。</p><blockquote><p>枚举类实现单例模式是 effective java 作者极力推荐的单例实现模式，它保证线程安全，并防止外部反序列化的破坏。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单例模式的分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#单例模式的分类&quot;&gt;&lt;/a&gt; 单例模式的分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;饿汉式
&lt;ul&gt;
&lt;li&gt;静态常量&lt;/li&gt;
&lt;li&gt;静态代码块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;懒汉式
&lt;ul&gt;
&lt;li&gt;线程不安全&lt;/li&gt;
&lt;li&gt;线程安全，同步方法&lt;/li&gt;
&lt;li&gt;线程安全，同步代码块&lt;/li&gt;
&lt;li&gt;双重检查锁&lt;/li&gt;
&lt;li&gt;静态内部类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;枚举&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://www.larscheng.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.larscheng.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java时间处理5---Java8中时区相关类库介绍</title>
    <link href="https://www.larscheng.com/java8time_3/"/>
    <id>https://www.larscheng.com/java8time_3/</id>
    <published>2020-07-10T09:10:17.000Z</published>
    <updated>2022-01-02T05:18:26.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>在Java8以前，我们对于时区的处理通常是为时间转换类设置指定TimeZone，然后进行时区时间转换。</p><p>而在Java8中不仅对时间日期进行了细粒度处理，有无时区，时区处理也进行了更加细粒度的优化。</p><p>在之前我们介绍的新类库中基本都是无时区概念的。本文将引入时区概念。</p><a id="more"></a><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p>介绍时区相关类库前，先来认识下Java中常见的几种时间格式</p><p>1.世界标准时间（UTC时间），其中T表示时分秒的开始，结尾的Z表示这是一个世界标准时间</p><blockquote><p>2020-07-06T11:24:37.081Z</p></blockquote><p>2.本地时间（不含时区信息的时间），结尾无时区信息</p><blockquote><p>2020-07-06T19:24:37.156</p></blockquote><p>3.含有时区信息的时间，<code>+08:00</code>表示该时间是由UTC时间加上8小时得到的，<code>[Asia/Shanghai]</code>表示该时间的时区信息</p><blockquote><p>2020-07-06T19:24:37.156+08:00[Asia/Shanghai]</p></blockquote><h1 id="zoneid和zoneoffset"><a class="markdownIt-Anchor" href="#zoneid和zoneoffset"></a> ZoneId和ZoneOffSet</h1><ul><li>ZoneId表示一个时区实例，他的内部定义了一个地区的时区规则集，例如<code>Europe/Paris</code></li><li>ZoneOffSet表示与UTC时间的偏移时间，格式为<code>+08:00</code>、<code>-04:00</code></li></ul><h2 id="创建zoneid"><a class="markdownIt-Anchor" href="#创建zoneid"></a> 创建ZoneId</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//获取系统默认时区</span><br><span class="line">System.out.println(ZoneId.systemDefault());</span><br><span class="line">//4种常用方式创建ZoneId</span><br><span class="line">System.out.println(ZoneId.of(&quot;+01:00&quot;));</span><br><span class="line">System.out.println(ZoneId.of(&quot;UTC+01:00&quot;));</span><br><span class="line">System.out.println(ZoneId.of(&quot;America/Chicago&quot;));</span><br><span class="line">System.out.println(ZoneId.ofOffset(&quot;UTC&quot;, ZoneOffset.of(&quot;+01:00&quot;)));</span><br></pre></td></tr></table></figure><p>输入结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Asia/Shanghai</span><br><span class="line">+01:00</span><br><span class="line">UTC+01:00</span><br><span class="line">America/Chicago</span><br><span class="line">UTC+01:00</span><br></pre></td></tr></table></figure><h2 id="创建zoneoffset"><a class="markdownIt-Anchor" href="#创建zoneoffset"></a> 创建ZoneOffSet</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ZoneOffset.ofHours(3));</span><br><span class="line">System.out.println(ZoneOffset.ofHoursMinutesSeconds(1, 2, 3));</span><br><span class="line">System.out.println(ZoneOffset.of(&quot;+01:00&quot;));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+03:00</span><br><span class="line">+01:02:03</span><br><span class="line">+01:00</span><br></pre></td></tr></table></figure><p>单独看ZoneId和ZoneOffSet可能还不能完全看出使用效果，下面看看带时区的日期时间</p><h2 id="zonedatetime"><a class="markdownIt-Anchor" href="#zonedatetime"></a> ZoneDateTime</h2><p>表示ISO-8601日历系统中具有时区的日期时间，此类存储所有日期和时间字段，精度为纳秒，时区为区域偏移量，用于处理模糊的本地日期时间。</p><p>例如:<code>2020-07-06T19:24:37.156+08:00[Asia/Shanghai]</code></p><p>ZonedDateTime相当于拥有三个独立对象，一个本地日期时间<code>LocalDateTime</code> ，一个时区ID<code>ZoneId</code>和时间偏移量<code>ZoneOffset</code>。</p><p>偏移量和本地日期时间用于在必要时定义一个瞬时时间。 时区ID用于获取偏移量的具体规则。（因为在部分区域夏时令时的偏移量与平常不同）</p><p>来看看ZoneDateTime的常用方法</p><h2 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//默认系统时区</span><br><span class="line">System.out.println(ZonedDateTime.now());</span><br><span class="line">//指定一个时区的时间</span><br><span class="line">System.out.println(ZonedDateTime.now(Clock.system(ZoneId.of(&quot;Europe/Paris&quot;))));</span><br><span class="line">//指定一个偏移量的时间</span><br><span class="line">System.out.println(ZonedDateTime.now(Clock.system(ZoneOffset.of(&quot;+04:00&quot;))));</span><br><span class="line">//根据本地日期时间和系统时区组合日期时间</span><br><span class="line">System.out.println(ZonedDateTime.of(LocalDateTime.now(), ZoneId.systemDefault()));</span><br><span class="line">//根据年月日时分秒毫秒纳秒时区id构建</span><br><span class="line">System.out.println(ZonedDateTime.of(2020, 1, 1, 1, 1, 1, 111, ZoneId.of(&quot;Europe/Paris&quot;)));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-07-10T11:44:15.651+08:00[Asia/Shanghai]</span><br><span class="line">2020-07-10T05:44:15.653+02:00[Europe/Paris]</span><br><span class="line">2020-07-10T07:44:15.668+04:00</span><br><span class="line">2020-07-10T11:44:15.668+08:00[Asia/Shanghai]</span><br><span class="line">2020-01-01T01:01:01.000000111+01:00[Europe/Paris]</span><br></pre></td></tr></table></figure><h2 id="其他方法"><a class="markdownIt-Anchor" href="#其他方法"></a> 其他方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ZonedDateTime z = ZonedDateTime.of(LocalDateTime.now(), ZoneId.systemDefault());</span><br><span class="line"></span><br><span class="line">System.out.println(z.getZone());//获取时区信息</span><br><span class="line">System.out.println(z.getOffset());//获取时间偏移量</span><br><span class="line">System.out.println(z.getDayOfMonth());//获取当月第几天</span><br><span class="line">System.out.println(z.getDayOfWeek());//获取本周星期几</span><br><span class="line">System.out.println(z.getDayOfYear());//获取本年第几天</span><br><span class="line">//获取时间信息</span><br><span class="line">System.out.println(z.getYear()+&quot;/&quot;+z.getMonthValue()+&quot;/&quot;+z.getDayOfMonth()+&quot; &quot;+</span><br><span class="line">        z.getHour()+&quot;:&quot;+z.getMinute()+&quot;:&quot;+z.getSecond()+&quot;.&quot;+z.getNano());</span><br><span class="line">//加减时间</span><br><span class="line">System.out.println(z.plusHours(3));</span><br><span class="line">System.out.println(z.minusHours(3));</span><br><span class="line">//修改时间</span><br><span class="line">System.out.println(z.withHour(20));</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Asia/Shanghai</span><br><span class="line">+08:00</span><br><span class="line">10</span><br><span class="line">FRIDAY</span><br><span class="line">192</span><br><span class="line">2020/7/10 13:37:19.37000000</span><br><span class="line">2020-07-10T16:37:19.037+08:00[Asia/Shanghai]</span><br><span class="line">2020-07-10T10:37:19.037+08:00[Asia/Shanghai]</span><br><span class="line">2020-07-10T20:37:19.037+08:00[Asia/Shanghai]</span><br></pre></td></tr></table></figure><h1 id="时区与偏移量"><a class="markdownIt-Anchor" href="#时区与偏移量"></a> 时区与偏移量</h1><p>本文开始的时候介绍了ZoneId和ZoneOffSet,在Java8中这两个类都可以对日期时间进行时区的转换，<strong>但是我更推荐使用时区信息（ZoneId），而不是时间偏移量(ZoneOffset)</strong></p><p>首先需要重温一下概念</p><ul><li>ZoneId表示一个时区实例，他的内部定义了一个地区的时区规则集，例如<code>Europe/Paris</code></li><li>ZoneOffSet表示与UTC时间的偏移时间，格式为<code>+08:00</code>、<code>-04:00</code></li></ul><p>这里我们以<code>亚洲上海</code>时间(北京时间)—&gt;<code>法国巴黎</code>时间为例,对三月份的时间和六月份两个时间进行转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ZoneId zoneId = ZoneId.of(&quot;Europe/Paris&quot;);</span><br><span class="line">ZonedDateTime now = ZonedDateTime.now().withMonth(6);</span><br><span class="line">System.out.println(&quot;6月的此时北京时间:&quot;+now);</span><br><span class="line">System.out.println(&quot;6月的此时巴黎时间:&quot;+now.withZoneSameInstant(zoneId));</span><br><span class="line">ZonedDateTime newTime = now.withMonth(3);</span><br><span class="line">System.out.println(&quot;3月的此时北京时间:&quot;+newTime);</span><br><span class="line">System.out.println(&quot;3月的此时巴黎时间:&quot;+newTime.withZoneSameInstant(zoneId));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6月的此时北京时间:2020-06-10T14:23:48.756+08:00[Asia/Shanghai]</span><br><span class="line">6月的此时巴黎时间:2020-06-10T08:23:48.756+02:00[Europe/Paris]</span><br><span class="line">3月的此时北京时间:2020-03-10T14:23:48.756+08:00[Asia/Shanghai]</span><br><span class="line">3月的此时巴黎时间:2020-03-10T07:23:48.756+01:00[Europe/Paris]</span><br></pre></td></tr></table></figure><p>有没有发现什么异样？</p><blockquote><p>两个同一时刻不同月份的时间转换了时区后第一次偏移量为2小时，第二次为1小时</p></blockquote><p>这是因为部分国家存在<code>夏时令</code>这种骚操作，一年中不同的月份有着不同的时间偏移量。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/java8date/20200710143656.png" alt=""></p><p>如果我们使用ZoneOffset，假设你知道目标时区的多种偏移时间，那么可以进行代码判断处理，<strong>但是如果要转换的时区很多，或者完全没有考虑夏时令问题时，那么转换出来的时间将会超乎你的想象</strong>！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;在Java8以前，我们对于时区的处理通常是为时间转换类设置指定TimeZone，然后进行时区时间转换。&lt;/p&gt;
&lt;p&gt;而在Java8中不仅对时间日期进行了细粒度处理，有无时区，时区处理也进行了更加细粒度的优化。&lt;/p&gt;
&lt;p&gt;在之前我们介绍的新类库中基本都是无时区概念的。本文将引入时区概念。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="时间处理" scheme="https://www.larscheng.com/tags/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java时间处理4---Java8中LocalDate、LocalTime、LocalDateTime介绍</title>
    <link href="https://www.larscheng.com/java8time_2/"/>
    <id>https://www.larscheng.com/java8time_2/</id>
    <published>2020-07-10T09:08:40.000Z</published>
    <updated>2022-01-02T05:18:26.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>在Java8中，对于日期、时间、时间日期有不同的对象来表示，分别就是LocalDate、LocalTime、LocalDateTime</p><p>他们都位于<code>java.time</code>包下，并且他们都仅单纯的表示一个不可变的时间对象，无时区等附加信息的出现</p><a id="more"></a><h2 id="localdate"><a class="markdownIt-Anchor" href="#localdate"></a> LocalDate</h2><p>一个不可变的时间对象用来表示一个日期(<code>年月日</code>)，仅包含日期，例如<code>2020-06-06</code></p><p>它的可表示范围为<code>-999999999-01-01</code>到<code>+999999999-12-31</code></p><h2 id="localtime"><a class="markdownIt-Anchor" href="#localtime"></a> LocalTime</h2><p>一个不可变的时间对象,用来表示一个时间(<code>时分秒</code>)，最高精度为纳秒，例如<code>11:11:11</code><br>它的表示范围为：<code>00:00</code>到<code>23:59:59.999999999</code></p><h2 id="localdatetime"><a class="markdownIt-Anchor" href="#localdatetime"></a> LocalDateTime</h2><p>一个不可变的时间对象,用来表示一个日期时间(<code>年月日时分秒</code>)，最高精度为纳秒，例如<code>2020-06-06T13:45:30.123456789</code><br><code>-999999999-01-01T00:00:00</code>到<code>+999999999-12-31T23:59:59.999999999</code></p><h2 id="localdate常用方法示例"><a class="markdownIt-Anchor" href="#localdate常用方法示例"></a> LocalDate常用方法示例</h2><p>LocalDate、LocalTime、LocalDateTime三者的使用方式基本相同，APi设计也类似，可以说掌握其中一个明白其他两个的用法了</p><p>此处以LocalDate的常用方法进行介绍：</p><h2 id="初始化一个localdate"><a class="markdownIt-Anchor" href="#初始化一个localdate"></a> 初始化一个LocalDate</h2><ul><li>now(…)系列: 获取当前日期</li><li>of(…)系列 : 获取指定年月日日期</li><li>parse(…)系列: 将日期字符串转换为LocalDate日期</li><li>from(…)系列：将TemporalAccessor类型对象转换为LocalDate日期</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*now()*/</span><br><span class="line">System.out.println(LocalDate.now());//获取当前日期</span><br><span class="line">System.out.println(LocalDate.now(ZoneId.systemDefault()));//获取系统时区当前日期</span><br><span class="line">System.out.println(LocalDate.now(Clock.systemDefaultZone()));//获取系统时钟当前日期</span><br><span class="line">/*of()*/</span><br><span class="line">System.out.println(LocalDate.of(2020, 6, 6));//获取指定年月日日期</span><br><span class="line">System.out.println(LocalDate.of(2020, Month.JUNE, 6));//获取指定年月日日期</span><br><span class="line">System.out.println(LocalDate.ofEpochDay(10));//获取大于1970-1-1多少天的日期</span><br><span class="line">System.out.println(LocalDate.ofYearDay(2020, 200));//获取指定年份中的第几天的日期</span><br><span class="line">/*parse()*/</span><br><span class="line">System.out.println(LocalDate.parse(&quot;2017-05-05&quot;));//DateTimeFormatter.ISO_LOCAL_DATE</span><br><span class="line">System.out.println(LocalDate.parse(&quot;2017-05-05&quot;, DateTimeFormatter.ISO_DATE));</span><br><span class="line">System.out.println(LocalDate.parse(&quot;20170505&quot;, DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line">System.out.println(LocalDate.parse(&quot;2017-05-05+01:00&quot;, DateTimeFormatter.ISO_OFFSET_DATE));</span><br><span class="line">/*from()*/</span><br><span class="line">LocalDate.from(LocalDate.parse(&quot;2017-05-05&quot;));//将TemporalAccessor类型对象转换为LocalDate日期</span><br></pre></td></tr></table></figure><h2 id="获取localdate中的信息"><a class="markdownIt-Anchor" href="#获取localdate中的信息"></a> 获取LocalDate中的信息</h2><p>从已有的LocalDate中获取年、月、日等具体信息</p><ul><li>get…()系列</li><li>其他</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line">System.out.println(localDate.getYear());//获取年</span><br><span class="line">System.out.println(localDate.getMonthValue());//月 </span><br><span class="line">System.out.println(localDate.getDayOfMonth());//日</span><br><span class="line">System.out.println(localDate.getMonth());//月份</span><br><span class="line">System.out.println(localDate.getDayOfWeek());//星期</span><br><span class="line">System.out.println(localDate.getDayOfYear());//本年中的第几天</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;是否闰年：&quot;+localDate.isLeapYear());</span><br><span class="line">System.out.println(&quot;本月天数：&quot;+localDate.lengthOfMonth());</span><br><span class="line">System.out.println(&quot;本年天数：&quot;+localDate.lengthOfYear());</span><br></pre></td></tr></table></figure><h2 id="修改lcoaldate的内容"><a class="markdownIt-Anchor" href="#修改lcoaldate的内容"></a> 修改LcoalDate的内容</h2><p>可以对现有的LcoalDate对象进行修改</p><ul><li>plusxxx()系列</li><li>minusxxx()系列</li><li>withxxx()系列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line">System.out.println(&quot;当前日期：&quot;+localDate);</span><br><span class="line">System.out.println(&quot;3天后：&quot;+localDate.plusDays(3));</span><br><span class="line">System.out.println(&quot;1月后：&quot;+localDate.plusMonths(1));</span><br><span class="line">System.out.println(&quot;1年后：&quot;+localDate.plusYears(1));</span><br><span class="line">System.out.println(&quot;1周后：&quot;+localDate.plusWeeks(1));</span><br><span class="line">System.out.println(&quot;3天前：&quot;+localDate.minusDays(3));</span><br><span class="line">System.out.println(&quot;1月前：&quot;+localDate.minusMonths(1));</span><br><span class="line">System.out.println(&quot;1年前：&quot;+localDate.minusYears(1));</span><br><span class="line">System.out.println(&quot;1周前：&quot;+localDate.minusWeeks(1));</span><br><span class="line"></span><br><span class="line">System.out.println(localDate.withYear(2012));//指定某一年的今天</span><br><span class="line">System.out.println(localDate.withMonth(12));//指定某月的今天</span><br><span class="line">System.out.println(localDate.withDayOfMonth(1));//指定本月的第几天</span><br><span class="line">System.out.println(localDate.withDayOfYear(1));//指定今年的第几天</span><br></pre></td></tr></table></figure><h2 id="三者之间的转化关系"><a class="markdownIt-Anchor" href="#三者之间的转化关系"></a> 三者之间的转化关系</h2><p>既然上面的三个类是分别代表时间、日期、日期时间，那他们必定存在相互转化的关系<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/java8date/20200706110102.png" alt=""><br>就这个关系，我们进行代码示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.of(2020,1,1);</span><br><span class="line">LocalTime localTime = LocalTime.now();</span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">LocalDate ldt2ld = localDateTime.toLocalDate();</span><br><span class="line">LocalTime ldt2lt = localDateTime.toLocalTime();</span><br><span class="line">//localDateTime---&gt;LocalDate</span><br><span class="line">System.out.println(localDateTime+&quot;---&gt; localDateTime.toLocalDate() ---&gt;&quot;+ldt2ld);</span><br><span class="line">//localDateTime---&gt;LocalTime</span><br><span class="line">System.out.println(localDateTime+&quot;---&gt; localDateTime.toLocalTime() ---&gt;&quot;+ldt2lt);</span><br><span class="line"></span><br><span class="line">LocalDateTime atDate = localTime.atDate(localDate);</span><br><span class="line">LocalDateTime atTime = localDate.atTime(localTime);</span><br><span class="line">LocalDateTime dateTime = LocalDateTime.of(localDate, localTime);</span><br><span class="line">//localDate+localTime---&gt;LocalDateTime</span><br><span class="line">System.out.println(&quot;[&quot;+localDate+&quot; + &quot;+localTime+&quot;] localDate.atTime(localTime) ---&gt;&quot;+atTime);</span><br><span class="line">System.out.println(&quot;[&quot;+localDate+&quot; + &quot;+localTime+&quot;] localTime.atDate(localDate) ---&gt;&quot;+atDate);</span><br><span class="line">System.out.println(&quot;[&quot;+localDate+&quot; + &quot;+localTime+&quot;] LocalDateTime.of(localDate, localTime) ---&gt;&quot;+dateTime);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-07-10T17:02:47.711---&gt; localDateTime.toLocalDate() ---&gt;2020-07-10</span><br><span class="line">2020-07-10T17:02:47.711---&gt; localDateTime.toLocalTime() ---&gt;17:02:47.711</span><br><span class="line">[2020-01-01 + 17:02:47.710] localDate.atTime(localTime) ---&gt;2020-01-01T17:02:47.710</span><br><span class="line">[2020-01-01 + 17:02:47.710] localTime.atDate(localDate) ---&gt;2020-01-01T17:02:47.710</span><br><span class="line">[2020-01-01 + 17:02:47.710] LocalDateTime.of(localDate, localTime) ---&gt;2020-01-01T17:02:47.710</span><br></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>本文介绍的三个类，属于java时间库中较为常用的三个类，它代替了java8以前常用的Date和Calendar类，转变为以更加细粒度的时间、日期、时间日期概念进行时间处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;在Java8中，对于日期、时间、时间日期有不同的对象来表示，分别就是LocalDate、LocalTime、LocalDateTime&lt;/p&gt;
&lt;p&gt;他们都位于&lt;code&gt;java.time&lt;/code&gt;包下，并且他们都仅单纯的表示一个不可变的时间对象，无时区等附加信息的出现&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="时间处理" scheme="https://www.larscheng.com/tags/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java时间处理3---Java8中Instant、Duration、Period、Clock介绍</title>
    <link href="https://www.larscheng.com/java8time_1/"/>
    <id>https://www.larscheng.com/java8time_1/</id>
    <published>2020-06-10T09:06:44.000Z</published>
    <updated>2022-01-02T05:18:26.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>前面文章对Java中的Date和Calendar类进行了介绍，在Java8以前，Javaer处理时间基本都是使用这两个类。</p><p>然鹅在使用过程中一个很尴尬的场景就是Date大部分方法废弃，Calendar又有很多不太友好的设计(月份从0开始)</p><a id="more"></a><p>终于，Java8中提供了一套全新的时间处理库，源码中的目录为<code>java.time</code>，该包中的类都是<code>不可变且线程安全</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/java8date/20200702203642.png" alt=""></p><p>看上图感觉新的<code>time</code>包下好像有很多都是新的类，感觉看着很头大啊，不过不用担心新提供的处理类中方法设计具有规律性，并且模块清晰，上手较快。</p><p>下面对比较常用的类库进行介绍。</p><blockquote><p>本文主要对Instant、Duration、Period、Clock这四个类进行介绍</p></blockquote><ul><li>Instant：时间线上的某一<code>时间点</code></li><li>Duration：两个<code>时间</code>之间的持续时间,存储秒和纳秒</li><li>Period：两个<code>日期</code>之间的持续时间,存储年，月和日</li><li>Clock：表示真实世界的<code>时钟</code>,可通过时钟访问的当前日期和时间</li></ul><h1 id="instant"><a class="markdownIt-Anchor" href="#instant"></a> Instant</h1><p>Instant用于记录时间线上某一瞬间的时间点，顾名思义就是时间戳，但它不同于<code>System.currentTimeMillis();</code>精度为秒</p><p>Instant可以精确到<code>纳秒</code>,它的取值范围为：<code>-1000000000-01-01T00:00Z</code>到<code>1000000000-12-31T23:59:59.999999999Z</code></p><p>下面看下他的常用方法示例：</p><ul><li>now(): 获取基于UTC时间的Instant</li><li>ofEpochMilli(long milli)：根据时间戳(毫秒)创建一个Instant实例</li><li>ofEpochSecond(long second): 根据时间戳(秒)创建一个Instant实例</li><li>parse(): 根据时间字符串转换为Instant实例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//UTC</span><br><span class="line">System.out.println(Instant.now());</span><br><span class="line">//系统时区</span><br><span class="line">System.out.println(Instant.now(Clock.systemDefaultZone()));</span><br><span class="line">//根据时间字符串转换为Instant实例</span><br><span class="line">System.out.println(Instant.parse(&quot;2020-06-06T12:12:12Z&quot;));</span><br><span class="line">Instant instant =Instant.parse(&quot;2020-06-06T12:12:12Z&quot;);</span><br><span class="line">long milli = instant.toEpochMilli();</span><br><span class="line">long second = instant.getEpochSecond();</span><br><span class="line">//给定时间戳转换为Instant实例</span><br><span class="line">System.out.println(Instant.ofEpochMilli(milli));</span><br><span class="line">//给定时间戳转换为Instant实例</span><br><span class="line">System.out.println(Instant.ofEpochSecond(second));</span><br><span class="line">//给定时间戳和纳秒值转换为Instant实例</span><br><span class="line">System.out.println(Instant.ofEpochSecond(second, 111));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-07-10T08:37:52.299Z</span><br><span class="line">2020-07-10T08:37:52.380Z</span><br><span class="line">2020-06-06T12:12:12Z</span><br><span class="line">2020-06-06T12:12:12Z</span><br><span class="line">2020-06-06T12:12:12Z</span><br><span class="line">2020-06-06T12:12:12.000000111Z</span><br></pre></td></tr></table></figure><h1 id="duration"><a class="markdownIt-Anchor" href="#duration"></a> Duration</h1><p>Duration通常用秒或者纳秒相结合来表示一个时间量，最高精度为纳秒<br>通常用作表示两个时间之间的间隔,也称作<code>持续时间</code>，例如<code>1s持续时间</code>表示为<code>PT1S</code></p><h2 id="创建一个duration实例"><a class="markdownIt-Anchor" href="#创建一个duration实例"></a> 创建一个Duration实例</h2><ul><li>ofXXX()系列方法: 根据纳秒、毫秒、秒、分、时、天等时间来构造持续时间</li><li>from(TemporalAmount amount)：根据TemporalAmount实例创建Duration对象</li><li>parse(CharSequence text)：根据ISO-8601持续时间格式字符串创建Duration对象</li><li>between(Temporal startInclusive, Temporal endExclusive)：获取两个时间对象之间的持续时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Duration.ofNanos(1000));</span><br><span class="line">System.out.println(Duration.ofMillis(1000));</span><br><span class="line">System.out.println(Duration.ofSeconds(30));</span><br><span class="line">System.out.println(Duration.ofSeconds(30,12345));</span><br><span class="line">System.out.println(Duration.ofMinutes(1));</span><br><span class="line">System.out.println(Duration.ofHours(1));</span><br><span class="line">System.out.println(Duration.ofDays(1));</span><br><span class="line">System.out.println(Duration.of(1000, ChronoUnit.MILLIS));</span><br><span class="line">System.out.println(Duration.from(ChronoUnit.MINUTES.getDuration()));</span><br><span class="line">System.out.println(Duration.parse(&quot;PT20.345S&quot;));</span><br><span class="line">System.out.println(Duration.between(Instant.parse(&quot;2020-06-23T10:15:30.00Z&quot;), Instant.now()));</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PT0.000001S</span><br><span class="line">PT1S</span><br><span class="line">PT30S</span><br><span class="line">PT30.000012345S</span><br><span class="line">PT1M</span><br><span class="line">PT1H</span><br><span class="line">PT24H</span><br><span class="line">PT1S</span><br><span class="line">PT1M</span><br><span class="line">PT20.345S</span><br><span class="line">PT406H26M35.814S</span><br></pre></td></tr></table></figure><h2 id="duration常用方法"><a class="markdownIt-Anchor" href="#duration常用方法"></a> Duration常用方法</h2><ul><li>getXXX(): 获取持续时间对象具体的秒数或者毫秒数</li><li>plusXXX(): 给Duration对象加上指定精度的值</li><li>minusXXX(): 给Duration对象减去指定精度的值</li><li>withXXX(): 修改Duration对象的秒数or毫秒数</li><li>其他方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Duration d = Duration.parse(&quot;PT20.345S&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(d.getSeconds());</span><br><span class="line">System.out.println(d.getNano());</span><br><span class="line"></span><br><span class="line">System.out.println(d.withNanos(3456789));//修改纳秒值，返回一个新的Duration</span><br><span class="line">System.out.println(d.withSeconds(22));//修改秒值，返回一个新的Duration</span><br><span class="line"></span><br><span class="line">System.out.println(d.plusNanos(1));//加1纳秒，返回一个新的Duration</span><br><span class="line">System.out.println(d.plusMillis(100));//加100毫秒，返回一个新的Duration</span><br><span class="line">System.out.println(d.plusSeconds(1));</span><br><span class="line">System.out.println(d.minusNanos(1));//减去1纳秒，返回一个新的Duration</span><br><span class="line">System.out.println(d.minusMillis(100));//减去10毫秒，返回一个新的Duration</span><br><span class="line">System.out.println(d.minusSeconds(1));</span><br><span class="line"></span><br><span class="line">System.out.println(d.isZero());//是否为0</span><br><span class="line">System.out.println(Duration.ZERO.isZero());//是否为0</span><br><span class="line">System.out.println(d.isNegative());//是否为负</span><br><span class="line">System.out.println(d.negated());//求负</span><br><span class="line">System.out.println(d.negated().abs());//求绝对值</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">345000000</span><br><span class="line">PT20.003456789S</span><br><span class="line">PT22.345S</span><br><span class="line">PT20.345000001S</span><br><span class="line">PT20.445S</span><br><span class="line">PT21.345S</span><br><span class="line">PT20.344999999S</span><br><span class="line">PT20.245S</span><br><span class="line">PT19.345S</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">PT-20.345S</span><br><span class="line">PT20.345S</span><br></pre></td></tr></table></figure><h1 id="period"><a class="markdownIt-Anchor" href="#period"></a> Period</h1><p>与Duration类似都是用来表示持续时间<br>但是Period是由年月日为单位的时间量，例如<code>1年2个月3天</code><br>与Duration相比，Period的用法与之基本相同</p><h2 id="初始化period"><a class="markdownIt-Anchor" href="#初始化period"></a> 初始化Period</h2><ul><li>ofXXX()系列方法: 根据年月日来构造持续时间</li><li>from(TemporalAmount amount)：根据TemporalAmount实例创建Period对象</li><li>parse(CharSequence text)：根据ISO-8601持续时间格式字符串创建Period对象</li><li>between(LocalDate startDateInclusive, LocalDate endDateExclusive)：获取两个<code>日期对象</code>之间的持续时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Period.of(1, 2, 3));//根据年月日构造Period</span><br><span class="line">System.out.println(Period.ofDays(1));</span><br><span class="line">System.out.println(Period.ofMonths(2));</span><br><span class="line">System.out.println(Period.ofWeeks(3));//根据周数构造</span><br><span class="line">System.out.println(Period.ofYears(1));</span><br><span class="line">System.out.println(Period.from(Period.ofMonths(1)));</span><br><span class="line">System.out.println(Period.parse(&quot;P20Y10M5D&quot;));//根据ISO-8601时间格式字符串进行构造</span><br><span class="line">//计算两个日期对象之间的持续时间</span><br><span class="line">System.out.println(Period.between(LocalDate.now().minusYears(1).minusDays(1),LocalDate.now() ));</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">P1Y2M3D</span><br><span class="line">P1D</span><br><span class="line">P2M</span><br><span class="line">P21D</span><br><span class="line">P1Y</span><br><span class="line">P1M</span><br><span class="line">P20Y10M5D</span><br><span class="line">P1Y1D</span><br></pre></td></tr></table></figure><h2 id="period常用方法"><a class="markdownIt-Anchor" href="#period常用方法"></a> Period常用方法</h2><p>常用方法的使用方式与Duration也基本类似</p><ul><li>getXXX(): 获取持续时间对象具体的年、月、日</li><li>plusXXX(): 给Period对象加上指定精度的值</li><li>minusXXX(): 给Period对象减去指定精度的值</li><li>withXXX(): 修改Period对象的某一精度值</li><li>其他方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Period p = Period.of(1, 2, 3);</span><br><span class="line">//获取年月日</span><br><span class="line">System.out.println(p.getYears()+&quot;年&quot;+p.getMonths()+&quot;月&quot;+p.getDays()+&quot;日&quot;);</span><br><span class="line">//重设Period的年月日</span><br><span class="line">System.out.println(p.withYears(3).withMonths(2).withDays(1));</span><br><span class="line">//加上1天</span><br><span class="line">System.out.println(p.plusDays(1));</span><br><span class="line">//减去1天</span><br><span class="line">System.out.println(p.minusDays(1));</span><br><span class="line">//判断是否为0</span><br><span class="line">System.out.println(p.isZero());</span><br><span class="line">//判断是否为负</span><br><span class="line">System.out.println(p.isNegative());</span><br><span class="line">//取负</span><br><span class="line">System.out.println(p.negated());</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1年2月3日</span><br><span class="line">P3Y2M1D</span><br><span class="line">P1Y2M4D</span><br><span class="line">P1Y2M2D</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">P-1Y-2M-3D</span><br></pre></td></tr></table></figure><h1 id="clock"><a class="markdownIt-Anchor" href="#clock"></a> Clock</h1><p>Clock表示一个时钟，Clock的实例用于查找当前时刻，可以使用存储的时区来解释当前时刻以查找当前日期和时间。某种程度上可以使用时钟代替<code>System.currentTimeMillis()</code>和<code>TimeZone.getDefault()</code>。</p><p>我们可以自定义创建一个指定滴答间隔的时钟，用来获取需要的时间日期</p><p><strong>钟表的滴答间隔(tickDuration)</strong>:规定了提供下一个读数的时间间隔。比如，滴答间隔为 1 秒的钟表，读数的分辨率就到 1 秒。滴答间隔为 5 秒的钟表，读数的&quot;分辨率&quot; 就到 5 秒。这里，5 秒的&quot;分辨率&quot;是指，当实际时间数据是 0 或 1、2、3、4 秒时，从它那里得到的读数都是 0 秒。当实际时间数据是 5 或 6、7、8、9 秒时，从它那里得到的读数都是 5 秒。</p><h2 id="clock的初始化"><a class="markdownIt-Anchor" href="#clock的初始化"></a> Clock的初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Clock clock = Clock.systemUTC();</span><br><span class="line">System.out.println(clock.millis());//打印时钟当前毫秒值</span><br><span class="line">System.out.println(System.currentTimeMillis());//打印当前毫秒值</span><br><span class="line">System.out.println(clock.instant().toEpochMilli());//时钟转换为Instant实例并获取时间戳毫秒值</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1594371253772</span><br><span class="line">1594371253772</span><br><span class="line">1594371253773</span><br></pre></td></tr></table></figure><h2 id="自定义clock的创建"><a class="markdownIt-Anchor" href="#自定义clock的创建"></a> 自定义Clock的创建</h2><p>使用<code>tick()</code>方法创建一个滴答间隔为3s的时钟，每1s钟查看一下它的时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//系统默认时区时钟</span><br><span class="line">Clock clock = Clock.systemDefaultZone();</span><br><span class="line">//滴答时间间隔为3秒的时钟</span><br><span class="line">//当实际时间数据是 0 或 1、2秒时，从它那里得到的读数都是 0 秒。当实际时间数据是 3或 4、5秒时，从它那里得到的读数都是 3 秒。</span><br><span class="line">Clock tick = Clock.tick(clock, Duration.ofSeconds(3));</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(1);</span><br><span class="line">    System.out.println(clock.instant()+&quot;---&gt; &quot;+tick.instant());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下,可以看到两个时钟每秒钟的计数是不同的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-07-10T08:55:35.182Z---&gt; 2020-07-10T08:55:33Z</span><br><span class="line">2020-07-10T08:55:36.195Z---&gt; 2020-07-10T08:55:36Z</span><br><span class="line">2020-07-10T08:55:37.195Z---&gt; 2020-07-10T08:55:36Z</span><br><span class="line">2020-07-10T08:55:38.196Z---&gt; 2020-07-10T08:55:36Z</span><br><span class="line">2020-07-10T08:55:39.197Z---&gt; 2020-07-10T08:55:39Z</span><br><span class="line">2020-07-10T08:55:40.198Z---&gt; 2020-07-10T08:55:39Z</span><br><span class="line">2020-07-10T08:55:41.198Z---&gt; 2020-07-10T08:55:39Z</span><br><span class="line">2020-07-10T08:55:42.199Z---&gt; 2020-07-10T08:55:42Z</span><br><span class="line">2020-07-10T08:55:43.199Z---&gt; 2020-07-10T08:55:42Z</span><br><span class="line">2020-07-10T08:55:44.200Z---&gt; 2020-07-10T08:55:42Z</span><br></pre></td></tr></table></figure><p>使用<code>tickSeconds()</code>和<code>tickMinutes()</code>创建时钟</p><ul><li>tickSeconds(ZoneId zone) : 创建一个滴答间隔为1秒的时钟</li><li>tickMinutes(ZoneId zone) ：创建一个滴答间隔为1分钟的时钟</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//系统默认时区时钟</span><br><span class="line">Clock clock = Clock.systemDefaultZone();</span><br><span class="line">//获取滴答间隔为1秒的钟表</span><br><span class="line">Clock clock1 = Clock.tickSeconds(ZoneId.systemDefault());</span><br><span class="line">//获取滴答间隔为1分钟的钟表</span><br><span class="line">Clock clock2 = Clock.tickMinutes(ZoneId.systemDefault());</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(1);</span><br><span class="line">    System.out.println(clock.instant()+&quot;---&gt; &quot;+clock1.instant()+&quot;---&gt; &quot;+clock2.instant());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果,从左到右依次为，系统默认时钟—&gt;滴答间隔1秒的时钟----&gt;滴答间隔1分钟的时钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-07-10T08:58:58.001Z---&gt; 2020-07-10T08:58:58Z---&gt; 2020-07-10T08:58:00Z</span><br><span class="line">2020-07-10T08:58:59.001Z---&gt; 2020-07-10T08:58:59Z---&gt; 2020-07-10T08:58:00Z</span><br><span class="line">2020-07-10T08:59:00.002Z---&gt; 2020-07-10T08:59:00Z---&gt; 2020-07-10T08:59:00Z</span><br><span class="line">2020-07-10T08:59:01.002Z---&gt; 2020-07-10T08:59:01Z---&gt; 2020-07-10T08:59:00Z</span><br><span class="line">2020-07-10T08:59:02.002Z---&gt; 2020-07-10T08:59:02Z---&gt; 2020-07-10T08:59:00Z</span><br><span class="line">2020-07-10T08:59:03.003Z---&gt; 2020-07-10T08:59:03Z---&gt; 2020-07-10T08:59:00Z</span><br><span class="line">2020-07-10T08:59:04.004Z---&gt; 2020-07-10T08:59:04Z---&gt; 2020-07-10T08:59:00Z</span><br><span class="line">2020-07-10T08:59:05.005Z---&gt; 2020-07-10T08:59:05Z---&gt; 2020-07-10T08:59:00Z</span><br><span class="line">2020-07-10T08:59:06.005Z---&gt; 2020-07-10T08:59:06Z---&gt; 2020-07-10T08:59:00Z</span><br><span class="line">2020-07-10T08:59:07.006Z---&gt; 2020-07-10T08:59:07Z---&gt; 2020-07-10T08:59:00Z</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>以上是Java8中针对瞬时时间、持续时间、时钟加入的新工具类，可以看到对于时间的概念区分更加细化、这四个基础的时间概念也是Java8中时间处理比较常用的模块，大家不妨上手敲几段代码试试。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;前面文章对Java中的Date和Calendar类进行了介绍，在Java8以前，Javaer处理时间基本都是使用这两个类。&lt;/p&gt;
&lt;p&gt;然鹅在使用过程中一个很尴尬的场景就是Date大部分方法废弃，Calendar又有很多不太友好的设计(月份从0开始)&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="时间处理" scheme="https://www.larscheng.com/tags/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>一些有意思的问答</title>
    <link href="https://www.larscheng.com/questions/"/>
    <id>https://www.larscheng.com/questions/</id>
    <published>2020-04-20T01:07:29.000Z</published>
    <updated>2022-01-02T05:18:26.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>一些有趣的问答，做答时间（03.26）</p></blockquote><h5 id="1-来做个自我介绍吧以及有几道快问快答等你接招"><a class="markdownIt-Anchor" href="#1-来做个自我介绍吧以及有几道快问快答等你接招"></a> 1. 来做个自我介绍吧，以及有几道快问快答等你接招。</h5><p>大家好，我是LarsCheng，一枚程序猿，来自古城西安，目前在杭州一家物联网科技公司从事服务端开发工作。平时喜欢电影和文字，热衷于尝试新的事物，从毕业开始坚持通过博客来分享并记录生活，努力让每一天都过得精彩和不同。</p><h5 id="2-你最近都在忙些什么"><a class="markdownIt-Anchor" href="#2-你最近都在忙些什么"></a> 2. 你最近都在忙些什么？</h5><p>除了工作外，最近在捣鼓如何通过容器技术(docker)实现cs游戏服务器的一键部署，这种高龄经典游戏与当下主流技术的碰撞简直不要太刺激。</p><h5 id="3-如果可以在世界上所有人中任意选择你想邀请谁共进晚餐"><a class="markdownIt-Anchor" href="#3-如果可以在世界上所有人中任意选择你想邀请谁共进晚餐"></a> 3. 如果可以在世界上所有人中任意选择，你想邀请谁共进晚餐？</h5><p><strong>三年前的自己</strong></p><p>虽然这世界很大有很多人和事还在等着我，但是有那么一个人在我失落时默默替我承受，在我高兴时只有他感受最深，陪伴我二十多年却很少为他着想，在上个月我收到了一封来自三年前的邮件，信中的字里行间满是稚嫩，如果真的有这个机会，我想与曾经的自己坐下来，一起和这位老朋友聊聊这几年的人和事。</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Test/1585274169968.png" alt=""></p></blockquote><h5 id="4-你最喜欢最常用的微信表情系统自带的不算"><a class="markdownIt-Anchor" href="#4-你最喜欢最常用的微信表情系统自带的不算"></a> 4. 你最喜欢/最常用的微信表情（系统自带的不算）。</h5><blockquote><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Test/0.gif" alt=""></p></blockquote><h5 id="5-你最近一次给被别人成功安利了啥"><a class="markdownIt-Anchor" href="#5-你最近一次给被别人成功安利了啥"></a> 5. 你最近一次给/被别人成功安利了啥？</h5><ul><li>被别人安利：韩剧《请回答1988》</li></ul><p>你能想象一个大直男看这部剧处处被戳中泪点嘛？这是我第一次看完一整部韩剧，也是我看过的最温暖的一部剧，它涵盖了所有人的青春，所有人的记忆，整部剧充满了对生活热爱和期待，我也十分愿意把他安利给其他人，这是一部你不舍的快进的优秀影视剧！！！</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Test/1585276729528.png" alt=""></p></blockquote><ul><li>给别人安利：国产linux系统deepin</li></ul><p>如果你厌烦了windows的广告弹窗，如果你像我一样是一个喜欢瞎捣鼓的人，不妨试试国产深度系统<code>Deepin</code>，Deepin是一款专注于日常办公和生活娱乐等基于linux内核，以桌面应用为主的开源GUV/linux的操作系统，支持笔记本电脑，台式机和一体机。使用Deepin已经快要半年了，感觉已经离windows越来越远。</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Test1585276550711.png" alt=""></p></blockquote><h5 id="6-现在还有哪些内容是你上网时一定会点进去看的"><a class="markdownIt-Anchor" href="#6-现在还有哪些内容是你上网时一定会点进去看的"></a> 6. 现在还有哪些内容是你上网时一定会点进去看的？</h5><p>行业内新的技术框架案例分析，广受好评的的生产力工具推荐等</p><h5 id="7-说一个你最近常在思考的问题吧"><a class="markdownIt-Anchor" href="#7-说一个你最近常在思考的问题吧"></a> 7. 说一个你最近常在思考的问题吧。</h5><ul><li>如何将每一天过的精彩且不同？</li></ul><p>人的一生大概有80年，那就是29200天，如果现在是25岁，那已经过去了31%的时间，你的人生还剩下69%，然而实际上，每一天都是在倒计时，你也无法预测未来还有多少时间。最近常常有人说：明天和意外永远也不知道哪一个先到，在这个充满躁动的大环境中，唯有把握自己的每一天才是最真实的。如何将往后的每一天过得精彩和不同，这是一个十分值得尝试的人生计划。</p><h5 id="8-都说科技改变生活-那你的生活呢有什么于是再也回不去了的改变吗无论正反具体聊聊呗"><a class="markdownIt-Anchor" href="#8-都说科技改变生活-那你的生活呢有什么于是再也回不去了的改变吗无论正反具体聊聊呗"></a> 8. 都说科技改变生活。那你的生活呢，有什么“于是再也回不去了”的改变吗？无论正反，具体聊聊呗。</h5><ul><li>移动支付</li></ul><p>这无疑是近十年来国内最大的技术革新没有之一，时间回到2010年，那个时候过节送礼还很流行送钱包，然而现在呢，基本上没有使用钱包的习惯了，纸币已经到了没有机会花的时代，自从教会了父母使用扫一扫付款，他们也表示再也不用为找零钱而烦恼了。</p><h5 id="9-你工作你生活你也慢慢攒下了一批物件试审视它们中的哪些成了你的必须品也就是哪怕你换工作-换城市你都打算一直带着的那些器物-可按重要性排序最重要的两件不妨展开聊聊"><a class="markdownIt-Anchor" href="#9-你工作你生活你也慢慢攒下了一批物件试审视它们中的哪些成了你的必须品也就是哪怕你换工作-换城市你都打算一直带着的那些器物-可按重要性排序最重要的两件不妨展开聊聊"></a> 9. 你工作，你生活，你也慢慢攒下了一批物件，试审视：它们中的哪些成了你的必须品（也就是，哪怕你换工作、换城市，你都打算一直带着的那些器物。）可按重要性排序，最重要的两件不妨展开聊聊。</h5><ul><li>票</li></ul><p>作为一名断舍离晚期患者，一直秉承着用不到的就没用的原则，却偏偏对于票类有着极度的收藏癖，可能这与科技无关，但是确实是我辗转几个城市都一直不曾舍弃的藏品。大概从大学开始到现在的所有的车票、机票、电影票、景区票都保留至今，这些每一张票背后都是一段青春的记忆。可能慢慢往后就得变成电子票收藏了，这也是科技在进步的体现吧。<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Test/tickets.png" alt=""></p><h5 id="10你还用过什么好物软件硬件服务是-少有人知道的求分享少有人知道的划重点"><a class="markdownIt-Anchor" href="#10你还用过什么好物软件硬件服务是-少有人知道的求分享少有人知道的划重点"></a> 10.你还用过什么好物（软件/硬件/服务）是 少有人知道的？求分享！[“少有人知道的”划重点]</h5><ul><li><a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">PicGo</a></li></ul><p>如果你长期写博客，那么你一定为图床而烦恼过，pic-go就是一款专为文字创作着提供的图床神器，一键自动上传图片并返回Markdown图片地址，再搭配github作为图片仓库，使用体验总结为两个字：真香！</p><ul><li><a href="https://www.teambition.com/" target="_blank" rel="noopener">Teambition</a></li></ul><p>属于阿里旗下的团队协作工具， 如果你使用过一定会被他的ui所吸引。</p><p>但它吸引我的是：个人计划安排、日程功能。你可以通过它对你的工作、学习、生活进行规划，把你想做的事提上日程，画上截止日期。</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Test/1585295480917.png" alt=""></p></blockquote><h5 id="11-最近又有什么科技产品是你心痒痒想入的一句话说明你为它找的理由"><a class="markdownIt-Anchor" href="#11-最近又有什么科技产品是你心痒痒想入的一句话说明你为它找的理由"></a> 11. 最近又有什么科技产品是你心痒痒想入的？一句话说明你为它找的理由。</h5><ul><li>Macbookpro 2020</li></ul><p>当我听说mbp要出14寸并且采用剪刀键盘，那是真的爱了爱了 ！</p><h5 id="12-跟上面相反有什么是你想强烈吐槽-狠狠劝退的么"><a class="markdownIt-Anchor" href="#12-跟上面相反有什么是你想强烈吐槽-狠狠劝退的么"></a> 12. 跟上面相反，有什么是你想强烈吐槽、狠狠劝退的么？</h5><p>思前想后目前用过的产品里面都还算中规中矩，没有让我忍不住要去吐槽的，比较佛系。</p><h5 id="13-工欲善其事必先利其器-无论是工作还是生活有什么特好的磨刀法子是你巴不得大家都知道的"><a class="markdownIt-Anchor" href="#13-工欲善其事必先利其器-无论是工作还是生活有什么特好的磨刀法子是你巴不得大家都知道的"></a> 13. 工欲善其事，必先利其器。无论是工作还是生活，有什么特好的“磨刀法子”是你巴不得大家都知道的？</h5><blockquote><p>合理规划、阶段总结</p></blockquote><p>无论工作还是生活，我的建议就是规划和总结，想清楚自己需要什么，并为之制定计划，通过每个阶段的总结和复盘来审视自己，长此以往你会发现，虽然你只是每天完成了一小部分，但是却离自己的目标越来越近。</p><h5 id="14-科技生活离不开内容它们可能是书-是游戏-是电影-是音乐甚至是app-来请分享你的最爱吧"><a class="markdownIt-Anchor" href="#14-科技生活离不开内容它们可能是书-是游戏-是电影-是音乐甚至是app-来请分享你的最爱吧"></a> 14. 科技生活离不开内容，它们可能是书、是游戏、是电影、是音乐，甚至是App。来，请分享你的最爱吧。</h5><p>书籍类：</p><ul><li>《代码大全》：程序员工程师必读</li><li>《三体》：世界是偶然的，也是必然的</li></ul><p>影视类：</p><ul><li>《粉雄救兵》(Queer Eye For The Straight Guy) ：通过另一种方式帮助你重塑信心，保持自信</li><li>《请回答1988》: 直男力荐，一定会温暖到你的一部优秀作品</li></ul><p>APP类：</p><ul><li>picsew ：IOS下的长截屏工具</li><li>365 Dots：一款时间规划工具</li></ul><h5 id="15-you-are-what-you-eat-你在网上fo过什么有意思的账号求分享可按-有趣严肃-排序平台不限于youtubetwitterb站微博播客公众号"><a class="markdownIt-Anchor" href="#15-you-are-what-you-eat-你在网上fo过什么有意思的账号求分享可按-有趣严肃-排序平台不限于youtubetwitterb站微博播客公众号"></a> 15. You are what you eat. 你在网上fo过什么有意思的账号？求分享！（可按 有趣—&gt;严肃 排序；平台不限于YouTube/Twitter/B站/微博/播客/公众号）</h5><p>github仓：</p><ul><li>清华大学计算机系课程攻略：<a href="https://github.com/PKUanonym/REKCARC-TSC-UHT" target="_blank" rel="noopener">https://github.com/PKUanonym/REKCARC-TSC-UHT</a></li></ul><p>仓库中涵盖了清华大学计算机系大一到大四的基础课程的电子版教材、课后习题、历年试卷、复习资料等，对于计算机相关基础知识的温习和回顾或者有考研意向的同学十分有帮助，同样类似的仓库还有：<a href="https://github.com/QSCTech/zju-icicles" target="_blank" rel="noopener">浙江大学课程攻略共享计划</a></p><ul><li>以社会学年鉴模式体例规范地统编自2019年12月起武汉新冠肺炎疫情进展的时间线：<a href="https://github.com/Pratitya/wuhan2020-timeline" target="_blank" rel="noopener">https://github.com/Pratitya/wuhan2020-timeline</a></li></ul><p>这一仓库收录了2020年新型冠状病毒肺炎相关的媒体报道和亲历者个人叙述，通过时间线的形式详细记录了COVID-19疫情进展的时间线。虽然只是事件记录型的仓库，但是贵在真实全面！</p><p>博客：</p><ul><li>阮一峰的网络日志：<a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/</a></li></ul><p>阮老师的科技爱好者周刊已经属于每周五必追的网络博客，通过每一期去了解海内外热点事件、最前沿的技术，以及最受欢迎的生产力工具。</p><ul><li>我的博客小站：<a href="https://www.larscheng.com/">https://www.larscheng.com/</a></li></ul><p>通过文字记录和分享自己的生活，希望自己能一直坚持博客输出。</p><h5 id="16-如果要给别人一些美好生活的建议你会说啥"><a class="markdownIt-Anchor" href="#16-如果要给别人一些美好生活的建议你会说啥"></a> 16. 如果要给别人一些美好生活的建议，你会说啥？</h5><ul><li>与人分享：我从毕业开始搭建了自己的博客小站，并坚持通过它来分享我的工作和生活，在这个过程中不仅加强了自己对所掌握知识的理解，同时也提高了自身的语言组织能力。</li><li>投资自己：自身的健康永远是第一位，保持强健的体魄是对未来的自己最好的投资！</li></ul><h5 id="17-如果给你一张白板可以在上面写上你想抗议的内容你会写什么"><a class="markdownIt-Anchor" href="#17-如果给你一张白板可以在上面写上你想抗议的内容你会写什么"></a> 17. 如果给你一张白板，可以在上面写上你想抗议的内容，你会写什么？</h5><p>佛系少年暂时没有要抗议的，如果有那就去来一顿火锅解决问题。</p><h5 id="18-所有人问所有人-轮到你问问题了问一个你想问其他人的问题"><a class="markdownIt-Anchor" href="#18-所有人问所有人-轮到你问问题了问一个你想问其他人的问题"></a> 18. #所有人问所有人# 轮到你问问题了！问一个你想问其他人的问题？</h5><blockquote><p>你是否想过与多年后的自己进行一次对话？</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="https://www.larscheng.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://www.larscheng.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Nacos系列博客说明</title>
    <link href="https://www.larscheng.com/nacos-infos/"/>
    <id>https://www.larscheng.com/nacos-infos/</id>
    <published>2020-03-25T07:06:31.000Z</published>
    <updated>2022-01-02T05:18:26.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>最近回顾之前写的Nacos系列博客和源码，其中关于Nacos的基础使用教程在现在的版本虽然依旧适用，但是当时使用的还是<code>1.0.1</code>版本的Nacos-Server，如今Nacos已经迭代到了<code>1.2.0</code>。而且当时的SpringCloud-Alibaba还处于孵化期，SCA毕业后整个的<code>依赖</code>都有了一些变化。再加上如今的Nacos也修复了许多问题增加了权限功能等。</p><blockquote><p>之前的文章加源码可能给上手就是V1.2.0，或者更新版本的同学带来很多迷惑性，所以…</p></blockquote><p>之前的<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">源码项目</a>仍旧保留，我又新开了一坑，用作记录你从来没有玩过的<code>船新版本</code>Naocs系列博客源码。</p><table><thead><tr><th>名称</th><th>目录</th><th>源码</th></tr></thead><tbody><tr><td>基于Nacos:V1.0.1的九篇<code>Nacos入门到避坑</code>系列文章</td><td><a href="https://www.larscheng.com/categories/SpringCloud/Nacos/">点击查看</a></td><td><a href="https://github.com/larscheng/nacos-learning-samples/tree/V1.0.1" target="_blank" rel="noopener">github</a>  v1.0.1分支</td></tr><tr><td>基于Nacos:V1.2.0的<code>Nacos系列文章</code></td><td><code>暂时还没写</code></td><td><a href="https://github.com/larscheng/nacos-learning-samples/tree/master" target="_blank" rel="noopener">github</a> master分支</td></tr></tbody></table><p>源码项目：<a href="https://github.com/larscheng/nacos-learning-samples" target="_blank" rel="noopener">nacos-learning-samples</a> 分支说明：</p><ul><li>v1.0.1：基于Nacos:V1.0.1的九篇博客源码（优化了依赖关系，以前是多级Maven父子工程，比较乱）</li><li>master：基于v1.0.1源码进行了nacos依赖升级，使用最新版本的Nacos，以及后续文章源码都存放在此</li></ul><h1 id="后续文章"><a class="markdownIt-Anchor" href="#后续文章"></a> 后续文章</h1><p>Nacos系列文章已经写了9篇啦，基本把Nacos如何使用已经介绍的七七八八，随着Nacos的迭代，以及一些老哥的留言，后期会陆陆续续更新<code>Nacos-docker集群部署</code>、<code>Nacos使用过程中遇到的一些坑点</code> 、<code>Nacos新特性</code>等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
      <category term="Nacos" scheme="https://www.larscheng.com/categories/SpringCloud/Nacos/"/>
    
    
      <category term="Nacos" scheme="https://www.larscheng.com/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>菜鸡程序员的2019年度总结</title>
    <link href="https://www.larscheng.com/2019-summary/"/>
    <id>https://www.larscheng.com/2019-summary/</id>
    <published>2020-01-01T07:47:12.000Z</published>
    <updated>2022-01-02T05:18:26.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="碎碎念"><a class="markdownIt-Anchor" href="#碎碎念"></a> 碎碎念</h1><p>写这篇总结时已经是2020年的第一天了。不得不感慨时间过得太快，记忆中的2019仿佛一片空白，但是细细回味之后，这一年许多人许多事都还历历在目。</p><p>2019年过去，2020的到来。第一批90后已经迈三奔四，同样作为90后的我不由得意识到自己的年龄，自己确实已经不小了。但一想到自己的现状，只能说：<code>革命尚未成功，我辈仍需继续努力！！！</code></p><blockquote><p>灵魂拷问: 时间回到2019年年初，你当时立下的flag，现在又完成了多少呢？(反正我是惨不忍睹…)</p></blockquote><a id="more"></a> <p>2019年是我毕业后的第一年，可能18年还能厚脸皮说自己还是个学生，但是19年已经正式从学生到求职者的角色中转变过来，但实际上论参加工作时间的话，到目前为止已经过去<code>2年1个月</code>了(2017.11)，如果要是算年头的话，2020年已经是我成为程序员的<code>第4个</code>年头了，看着这些数据真的是<code>细思极恐</code>，再看看自己这个技术水平，哇<code>不忍直视</code>！</p><p>标题虽然写的是2019年度总结，但这也是我第一次写年度总结，我更想借此对自己从参加工作到现在的生活和工作进行梳理。整理过去的人和事，确定今后的方向（<code>立flag</code>），轻装上阵。</p><p>那闲话不多说，既然是总结，那就先对这过去的<code>3个年头</code>做一个简单的回溯吧</p><h1 id="2017"><a class="markdownIt-Anchor" href="#2017"></a> 2017</h1><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/life/20191011213042.png" alt="凌晨的城站" style="zoom: 25%;"><p>网易云热评上看到过这样一句话：</p><blockquote><p>跨越数千公里，只身来到一个陌生的城市，火车站凌晨昏黄的灯光照在脸上时大概是一个人最孤独的时候吧。</p></blockquote><p>然鹅生活中谁又何尝不是负重前行，忍受孤独呢？我们都是平凡的普通人，所以你只管努力，其他的交给时间就好。</p><h2 id="年度关键字"><a class="markdownIt-Anchor" href="#年度关键字"></a> 年度关键字</h2><ul><li>离家</li><li>萌新</li><li>新起点</li><li>努力</li></ul><h2 id="入职"><a class="markdownIt-Anchor" href="#入职"></a> 入职</h2><p>2017.11那时候也算是初生牛犊不怕虎，10月底拿到offer，签三方、学校请假、买车票一套操作带走后，直接闪现杭州。凌晨4点下火车时才有种如梦初醒的感觉（<code>我是谁？我在哪？我怎么跑这来了？？？</code>），在工作人员的引导下坐上了第一班公交车，晃悠晃悠到了现在的公司（<code>给工作人员点赞昂</code>）</p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/life/20191011213007.png" alt="工位" style="zoom: 25%;"><p>入职后来到一个新的环境，新的事物新的朋友。公司安排了员工宿舍，分配了导师。一周的接触后，现在想想真的很温馨，大家对我都很关照。记得那时上手的技术大部分都没用过。自己当时除了有点Java基础，框架懂点SSM，其他的就是一片空白，当时导师给我介绍公司的技术栈时真的有种听天书的感觉，有些又仿佛听过，当时的真实问答现场是这样的：</p><blockquote><p>导师：springboot用过么？ 我：…没…没用过，用过spring,springMvc(内心：面试咋没问到这个，这几个是不是有啥关系，名字这么像)<br>导师：那mybatisplus接触过吗？ 我：…也没…,就用过mybatis 导师：没事两个很像，好上手<br>…</p></blockquote><h2 id="成长"><a class="markdownIt-Anchor" href="#成长"></a> 成长</h2><p>11月就是一个接收新事物的一个月，学习到新的技术，认识到新的朋友。那段时间也许是出于自身的焦虑，也或许是作为实习生应该要有一个努力上进的态度，每晚都在办公室学习，造轮子很久，<code>庆幸自己遇到了一个很好的导师</code>，导师每天下班前都会习惯性的问我今天遇到了哪些问题，我也是厚脸皮将问题一一提出，导师则细心解答。</p><p>时间过得很快，每天过着充实的学习生活，当时就像一片海绵，疯狂的吸取自己缺少的那些水分。记得当时已经开始帮同事解决禅道上的一些小bug（<code>当时还用的禅道haha</code>），直到年底，12月底，项目组接到了一个新的项目，我也有幸成为了项目的一员。当时我也不会想到这个项目一作就做到了现在，而且做到现在最初的那些开发人员也就只剩下了我和导师，那些熟悉的面孔逐渐变成陌生又慢慢变为熟悉。</p><h1 id="2018"><a class="markdownIt-Anchor" href="#2018"></a> 2018</h1><blockquote><p>一辈子有很多夏天，但没有任何一个夏天像今夏</p></blockquote><p>2018年见了太多的别离，2018年也是毕业那年，记得那年夏天，记得那些人，四年美好的回忆</p><h2 id="年度关键字-2"><a class="markdownIt-Anchor" href="#年度关键字-2"></a> 年度关键字</h2><ul><li>毕设</li><li>旅行</li><li>毕业</li><li>博客</li><li>项目</li><li>读书学习分享</li><li>springboot、springcloud</li><li>linux、docker</li><li>mongodb、redis、rabbitmq</li><li>ci/cd</li></ul><p>2018算是自己人生中历史性的一年吧，这一年正式毕业摇身一变成为一名社会银，这一年完成了自己的毕业作品，这一年和她一起去走过了毕业旅行，这一年正真开始了自己的程序生涯。</p><h2 id="300块"><a class="markdownIt-Anchor" href="#300块"></a> 300块</h2><p>毕业前夕伴随着是劳神的毕业设计，从2017年底，确定毕设题目后（<code>《毕业设计选题系统》</code>），以自己最熟悉的springboot+mybatisplus+mysql+redis等技术，利用周末和返校的时间独自开发完成，并将该系统接入院系内开始内部测试使用，将毕业生从选题到结题的所有流程实现自动化。</p><p>就这样折腾下来，自己有幸还被评选为优秀毕业生，最后还发了300块钱（<code>虽然有点少,是真的少...哈哈哈嗝~</code>）</p><p>后来据指导老师的反馈说，系统已经正式在全院开始使用。</p><h2 id="成都"><a class="markdownIt-Anchor" href="#成都"></a> 成都</h2><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/life/20191011203502.png" alt="小酒馆" style="zoom:33%;"><p>毕业旅行应该是许多同学都必须要实现的愿望之一，有幸、碰巧我也实现了这一愿望，闪现到了成都耍了一圈。</p><p>记得那年有首《成都》火遍了大街小巷，当时决定去成都前还特意自己规划了一晚上的游玩路线，实际后来没能用得上哈哈。</p><p>其实无论是学习还是工作，如果条件允许的话一定要多出去走走，看看这大好河山，尝尝各地美食。让自己有更好的精神面貌来迎接工作和生活</p><h2 id="博客-分享"><a class="markdownIt-Anchor" href="#博客-分享"></a> 博客、分享</h2><p>回到公司，我开始迷上了一个东西：<code>博客</code></p><p>最初对于博客一直有敬畏之心，觉着能发表博客的都是大佬，都是业界大牛，这种想法直到我参加了一次小组的技术分享后发生了转变。</p><p>以前在学校虽然也组织一些活动，参加一些活动，但是那些都是在自己熟悉的同学老师面前，做一些自己擅长的事情。而作为一个职场新人技术小白组内的技术分享对我来说就像是关公面前耍大刀（<code>这个比拟比较夸大哈哈哈~</code>），记得当时分享的是<code>quartz</code>，当时做了很多准备，结合自己的使用经验，以及实践社区大佬的使用经验总结成书面的技术分享文章，后来分享效果还挺不错，起码把自己懂得，理解到的，用过的都分享了出来并做了总结。</p><p>通过那次的分享，逐渐明白完全掌握一个新知识新技术，并不是你会用就可以了，而是你能够将这个知识讲出来，教会别人，并能为其答疑解惑。</p><p>自此，博客成了我记录学习，总结知识的方法和途径。</p><h2 id="程序生涯开启"><a class="markdownIt-Anchor" href="#程序生涯开启"></a> 程序生涯开启</h2><p>自7月份后，程序生涯正式开启，进入打怪升级的模式，<code>我是一个莫得感情的编码机器</code>。</p><p>后半年陆续开始参与两个项目的开发工作，在有了之前的适应期，慢慢开始接触和掌握项目中的相关技术栈。</p><p>同时作为一个不安分的开发，在工作之余开始折腾持续集成持续部署，开始学习linux、docker、jenkins，好像走向了半道子运维的路线。</p><p>Java后端的世界广袤无垠，我也仅仅探索了冰山一角，每一个程序员都有相同的特点，比如都喜欢打篮球，比如都要实现架构师之梦，我也一样，心怀梦想在技术之路上不断向前。</p><h1 id="2019"><a class="markdownIt-Anchor" href="#2019"></a> 2019</h1><blockquote><p>拒绝拖延症，拒绝拖延症，拒绝拖延症</p></blockquote><p>2019年是生活重心都在工作的一年，这一年也是<code>五味杂陈</code>的一年，这一年暴露出了自身的很多潜藏问题和缺点。</p><h2 id="年度关键字-3"><a class="markdownIt-Anchor" href="#年度关键字-3"></a> 年度关键字</h2><ul><li>整合</li><li>规范</li><li>基础</li><li>参与开源</li><li>Nacos</li><li>博客</li><li>以考代学</li><li>Mycat、DRDS</li><li>influxDB</li><li>优秀员工</li></ul><p>这一年的项目情况就不多作介绍，主要对自己项目工作以外的一些事件进行总结</p><h2 id="五味杂陈"><a class="markdownIt-Anchor" href="#五味杂陈"></a> 五味杂陈</h2><p>说到五味杂陈，离不开情之一字，哈哈哈，这种事其实不应该出现在程序员的年度总结中，但是键盘敲到这里，思绪划过2019一整年，真的是五味杂陈，异地恋的痛点也算是这一年不可缺的的一部分，经历了很多的争吵，产生过很多的矛盾。异地恋考验着双方的同时又需要两个人的坚持，好在争吵平息，矛盾化解。愿这些烦恼都随2019一起远去。</p><h2 id="提高效率"><a class="markdownIt-Anchor" href="#提高效率"></a> 提高效率</h2><p>经过1年的打怪升级，项目组内的开发套路和基本架构都已经熟悉，在对目前项目中在使用的延时任务进行了整合，并以微服务形式提供接口支持。防止出现重复造轮子的现象，提高开发效率。</p><p>随着业务的细分，项目中的微服务越来越多，原本的手动配置管理已经愈加繁杂，在调研了市面上的微服务配置管理解决方案后，选用了<code>Nacos</code>作为配置中心和注册中心。并接入正在开发中的项目。目前Nacos已经落地公司多个项目中。在多个微服务的配置管理上大大提高了效率</p><p>调研了部门中各个项目组的代码提交习惯后，发现一个问题：提交记录没有任何规范可言，于是乎，不安分的我开始率先在小组内推广<code>规范式提交</code>，规范小组内的提交格式，并且向整个部门安利。</p><h2 id="返璞归真"><a class="markdownIt-Anchor" href="#返璞归真"></a> 返璞归真</h2><p>刚入行的时候就有朋友给提点过：<code>做这一行，到了最后拼的都是内功</code>，话俗理不俗！</p><p>一门语言，语言的基础就像武侠小说中的内功心法，而那些框架，中间件等等就好比武功招式绝学。那些武林大侠个个都是内功深厚，就好比张无忌武功初上光明顶时武功平平，但他却因习得九阳神功这一绝世无双的内功心法而能力战群雄。</p><p>Java开发同样如此，其实最核心的还是Java基础，这一年基本上停止了新框架的学习，重心放在了基础知识的复习和深入。</p><h2 id="考证"><a class="markdownIt-Anchor" href="#考证"></a> 考证</h2><p>在9月份时报考了软件设计师考试，抱着以考代学的心态（<code>因为自己基础太差</code>），稳扎稳打，踏实复习，最终结果还算令人满意成功通过了考试。</p><p>这门考试最佳的报考时间应该是大三大四，我到现在才考完全是因为自己的拖延症，不过现在回头去复习，很多基础的知识点都有一种恍然大悟的感觉。也算是恶补了一波基础知识。</p><p>虽然目前大众对这个证书不是太感冒，但是存在即合理，通过复习确实可以梳理计算机相关基础知识，同时可以系统的了解计算机相关知识点。如果你有兴趣不妨一试哟。</p><h2 id="博客"><a class="markdownIt-Anchor" href="#博客"></a> 博客</h2><p>博客输出已经成为一种习惯，虽然我的更新频率十分不规律，而且技术深度也一般，但是相信自己只要坚持输出，终会有所收获。</p><p>写博客已经不单单是记录和总结了，就像能用嘴巴说出来的东西，不一定能用文字清楚的表达。而写博客更多的是分享和文档撰写、信息归纳汇总的锻炼，就像锻炼一个人的文字表达能力一样。</p><p>今年最满意的是将自己在公司使用Nacos的历程记录成系列博客，虽然只是如何使用如何接入的基础性文章，但是也收到很多热心读者的信息反馈。</p><p>目前博客的访问人数也刚刚突破6000+，双十一的时候趁着有活动一次性给自己的域名续费了5年，这一年我也在不断的调整自己的写作风格，力求能够用简单朴实的文字将技术点清晰明了的传递给每一位读者。</p><h2 id="架构升级"><a class="markdownIt-Anchor" href="#架构升级"></a> 架构升级</h2><p>随着业务需求的升级，目前在用的部分架构和数据库解决方案已经不足以支撑后续业务，有幸参与到目前项目组的数据库解决方案升级计划中，开始负责TSDB和DRDS的调研和落地使用。</p><p>目前已经基本完成了TSDB的接入工作，后续会重点关注DRDS的相关调研和接入工作。</p><h1 id="暴露出的问题"><a class="markdownIt-Anchor" href="#暴露出的问题"></a> 暴露出的问题</h1><p>前面都是在总结一些自己的阶段性成果和大事件，但对于过程中暴露出额自身问题却只字未提，这里想把他们单拎出来，警示自己：</p><ul><li>未能时常关心到家人 -----&gt; 做到一周最少一次联系（<code>特别好奇是不是男生都和家里联系少？还是就我是这样？总之这样是不对的</code>）</li><li>重度拖延症 -----&gt; 为自己制定计划表，和奖惩措施</li><li>负能量多于正能量 -----&gt; 调整心态，微笑面对生活</li><li>读书太少 -----&gt; 提升内涵，多读书，读好书</li><li>运动太少 -----&gt; 加强锻炼，控制体重（<code>毕业到现在已经从120斤胖到140斤......惨不忍睹</code>）</li><li>熬夜太多 -----&gt; 早睡早起，狗命重要！！！</li><li>典型肥宅 -----&gt; 重拾兴趣爱好，充实业务生活</li></ul><p>多的flag着实不想立了，不想来年打脸，但以上这些已经列出来的问题点，是必须优先解决的。</p><h1 id="2020"><a class="markdownIt-Anchor" href="#2020"></a> 2020</h1><blockquote><p>逆水行舟不进则退，长期处于舒适区只会习惯于停留在原地</p></blockquote><p>最后的这一节，就像小时候写新学期打算一样，要求新的一年做出展望和规划，也是必不可少的。</p><p>新的一年当但是希望自己测试通过，全年无bug啦，哈哈哈</p><p>新的一年也算是一个新的起点，希望自己初心不改，保持现在的节奏稳扎稳打，努力提升自己，变得更优秀。</p><p>新的一年像上面提到的，要警惕<code>舒适区</code>，时时刻刻，必须要提醒自己，不能懈怠，懈怠你就破功了老弟！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;碎碎念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#碎碎念&quot;&gt;&lt;/a&gt; 碎碎念&lt;/h1&gt;
&lt;p&gt;写这篇总结时已经是2020年的第一天了。不得不感慨时间过得太快，记忆中的2019仿佛一片空白，但是细细回味之后，这一年许多人许多事都还历历在目。&lt;/p&gt;
&lt;p&gt;2019年过去，2020的到来。第一批90后已经迈三奔四，同样作为90后的我不由得意识到自己的年龄，自己确实已经不小了。但一想到自己的现状，只能说：&lt;code&gt;革命尚未成功，我辈仍需继续努力！！！&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灵魂拷问: 时间回到2019年年初，你当时立下的flag，现在又完成了多少呢？(反正我是惨不忍睹…)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.larscheng.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://www.larscheng.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java中“附近的人”实现方案讨论及代码实现</title>
    <link href="https://www.larscheng.com/nearby-search/"/>
    <id>https://www.larscheng.com/nearby-search/</id>
    <published>2019-12-18T11:53:25.000Z</published>
    <updated>2022-01-02T05:18:26.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>在我们平时使用的许多app中有<code>附近的人</code>这一功能，像微信、qq附近的人，哈罗、街兔附近的车辆。这些功能就在我们日常生活中出现。</p><blockquote><p>像类似于附近的人这一类业务，在Java中是如何实现的呢？</p></blockquote><p>本文就简单介绍下目前的几种解决方案，并提供简单的示例代码</p><p>注: 本文仅涉及<code>附近的人</code>这一业务场景的解决方案讨论，并未涉及到相关的技术细节和方案优化，各位看官可以放心阅读。</p><a id="more"></a> <h1 id="基本套路和方案"><a class="markdownIt-Anchor" href="#基本套路和方案"></a> 基本套路和方案</h1><p>目前业内的解决方案大都依据geoHash展开，考虑到不同的数据量以及不同的业务场景，本文主要讨论以下3种方案</p><ul><li><strong>Mysql+外接正方形</strong></li><li><strong>Mysql+geohash</strong></li><li><strong>Redis+geohash</strong></li></ul><h1 id="mysql外接正方形"><a class="markdownIt-Anchor" href="#mysql外接正方形"></a> Mysql+外接正方形</h1><p><code>外接矩形</code>的实现方式是相对较为简单的一种方式。</p><p>假设给定某用户的位置坐标, 求在该用户指定范围内的其他用户信息</p><blockquote><p>此时可以将位置信息和距离范围简化成平面几何题来求解</p></blockquote><h2 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h2><p>以当前用户为圆心，以给定距离为半径画圆，那么在这个圆内的所有用户信息就是符合结果的信息，直接检索圆内的用户坐标难以实现，我们可以通过获取这个圆的<code>外接正方形</code>。</p><p>通过外接正方形，获取<code>经度和纬度的最大最小值</code>，根据最大最小值可以将坐标在正方形内的用户信息搜索出来。</p><p>此时在外接正方形中不属于圆形区域的部分就属于多余的部分，这部分用户信息距离当前用户（圆心）的距离必定是大于给定半径的，故可以将其剔除，最终获得指定范围内的附近的人</p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/nearbysearch/20191210200831.png" style="zoom:67%;"><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><blockquote><p>这里只贴出部分核心代码，详细的代码可见源码：<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/NearbySearch" target="_blank" rel="noopener">NearBySearch</a></p></blockquote><p>在实现附近的人搜索中，需要根据位置经纬度点，进行一些距离和范围的计算，比如求球面外接正方形的坐标点，球面两坐标点的距离等，可以引入<a href="http://locationtech.github.io/spatial4j/apidocs/" target="_blank" rel="noopener">Spatial4j</a>库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spatial4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spatial4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>首先创建一张数据表<code>user</code></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'名称'</span>,</span><br><span class="line">  <span class="string">`longitude`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'经度'</span>,</span><br><span class="line">  <span class="string">`latitude`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'纬度'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><ol start="2"><li>假设已插入足够的测试数据，只要我们获取到外接正方形的四个关键点，就可以直接直接查询</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> SpatialContext spatialContext = SpatialContext.GEO;    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取附近x米的人</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> distance 距离范围 单位km</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userLng  当前经度</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userLat  当前纬度</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> json</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/nearby"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">nearBySearch</span><span class="params">(@RequestParam(<span class="string">"distance"</span>)</span> <span class="keyword">double</span> distance,</span></span><br><span class="line"><span class="function">                              @<span class="title">RequestParam</span><span class="params">(<span class="string">"userLng"</span>)</span> <span class="keyword">double</span> userLng,</span></span><br><span class="line"><span class="function">                              @<span class="title">RequestParam</span><span class="params">(<span class="string">"userLat"</span>)</span> <span class="keyword">double</span> userLat) </span>&#123;</span><br><span class="line">       <span class="comment">//1.获取外接正方形</span></span><br><span class="line">       Rectangle rectangle = getRectangle(distance, userLng, userLat);</span><br><span class="line">       <span class="comment">//2.获取位置在正方形内的所有用户</span></span><br><span class="line">       List&lt;User&gt; users = userMapper.selectUser(rectangle.getMinX(), rectangle.getMaxX(), rectangle.getMinY(), rectangle.getMaxY());</span><br><span class="line">       <span class="comment">//3.剔除半径超过指定距离的多余用户</span></span><br><span class="line">       users = users.stream()</span><br><span class="line">           .filter(a -&gt; getDistance(a.getLongitude(), a.getLatitude(), userLng, userLat) &lt;= distance)</span><br><span class="line">           .collect(Collectors.toList());</span><br><span class="line">       <span class="keyword">return</span> JSON.toJSONString(users);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> Rectangle <span class="title">getRectangle</span><span class="params">(<span class="keyword">double</span> distance, <span class="keyword">double</span> userLng, <span class="keyword">double</span> userLat)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> spatialContext.getDistCalc()</span><br><span class="line">           .calcBoxByDistFromPt(spatialContext.makePoint(userLng, userLat), </span><br><span class="line">                                distance * DistanceUtils.KM_TO_DEG, spatialContext, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>这里给出查询的sql</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id="selectUser" resultMap="BaseResultMap"&gt;</span><br><span class="line">    <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line">    <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">    <span class="keyword">and</span> (longitude <span class="keyword">BETWEEN</span> $&#123;minlng&#125; <span class="keyword">AND</span> $&#123;maxlng&#125;)</span><br><span class="line">    <span class="keyword">and</span> (latitude <span class="keyword">BETWEEN</span> $&#123;minlat&#125; <span class="keyword">AND</span> $&#123;maxlat&#125;)</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="mysqlgeohash"><a class="markdownIt-Anchor" href="#mysqlgeohash"></a> Mysql+geohash</h1><p>前面介绍了通过Mysql存储用户的信息和gps坐标，通过计算外接正方形的坐标点来粗略筛选结果集，最终剔除超过范围的用户。</p><blockquote><p>而现在要提到的<code>Mysql+geohash</code>方案，同样是以Mysql为基础，只不过引入了geohash算法，同时在查询上借助索引。</p></blockquote><p>geohash被广泛应用于位置搜索类的业务中，本文不对它进行展开说明，有兴趣的同学可以看一下这篇博客:<a href="https://www.cnblogs.com/LBSer/p/3310455.html" target="_blank" rel="noopener">[GeoHash核心原理解析]</a>，这里简单对它做一个描述：</p><p>GeoHash算法将经纬度坐标点编码成一个字符串,距离越近的坐标，转换后的<code>geohash字符串越相似</code>,例如下表数据：</p><table><thead><tr><th>用户</th><th>经纬度</th><th>Geohash字符串</th></tr></thead><tbody><tr><td>小明</td><td>116.402843,39.999375</td><td>wx4g8c9v</td></tr><tr><td>小华</td><td>116.3967,39.99932</td><td>wx4g89tk</td></tr><tr><td>小张</td><td>116.40382,39.918118</td><td>wx4g0ffe</td></tr></tbody></table><p>其中根据经纬度计算得到的geohash字符串，不同精度（字符串长度）代表了不同的距离误差。具体的不同精度的距离误差可参考下表：</p><table><thead><tr><th>geohash码长度</th><th>宽度</th><th>高度</th></tr></thead><tbody><tr><td>1</td><td>5,009.4km</td><td>4,992.6km</td></tr><tr><td>2</td><td>1,252.3km</td><td>624.1km</td></tr><tr><td>3</td><td>156.5km</td><td>156km</td></tr><tr><td>4</td><td>39.1km</td><td>19.5km</td></tr><tr><td>5</td><td>4.9km</td><td>4.9km</td></tr><tr><td>6</td><td>1.2km</td><td>609.4m</td></tr><tr><td>7</td><td>152.9m</td><td>152.4m</td></tr><tr><td>8</td><td>38.2m</td><td>19m</td></tr><tr><td>9</td><td>4.8m</td><td>4.8m</td></tr><tr><td>10</td><td>1.2m</td><td>59.5cm</td></tr><tr><td>11</td><td>14.9cm</td><td>14.9cm</td></tr><tr><td>12</td><td>3.7cm</td><td>1.9cm</td></tr></tbody></table><h2 id="实现思路-2"><a class="markdownIt-Anchor" href="#实现思路-2"></a> 实现思路</h2><p>使用Mysql存储用户信息，其中包括用户的经纬度信息和geohash字符串。</p><ol><li>添加新用户时计算该用户的geohash字符串，并存储到用户表中</li><li>当要查询某一gps附近指定距离的用户信息时，通过比对geohash误差表确定需要的geohash字符串精度</li><li>计算获得某一精度的当前坐标的geohash字符串，通过<code>WHERE geohash Like 'geohashcode%'</code>来查询数据集</li><li>如果geohash字符串的精度远大于给定的距离范围时，查询出的结果集中必然存在在范围之外的数据</li><li>计算两点之间距离，对于超出距离的数据进行剔除。</li></ol><h2 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h2><blockquote><p>这里只贴出部分核心代码，详细的代码可见源码：<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/NearbySearch" target="_blank" rel="noopener">NearBySearch</a></p></blockquote><p>同样的要涉及到坐标点的计算和geohash的计算，开始之前先导入<code>spatial4j</code></p><ol><li>创建数据表<code>user_geohash</code>,给geohash码添加索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_geohash`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'名称'</span>,</span><br><span class="line">  <span class="string">`longitude`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'经度'</span>,</span><br><span class="line">  <span class="string">`latitude`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'纬度'</span>,</span><br><span class="line">  <span class="string">`geo_code`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'经纬度所计算的geohash码'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`index_geo_hash`</span> (<span class="string">`geo_code`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加用户信息和范围搜索逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SpatialContext spatialContext = SpatialContext.GEO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 添加用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/addUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(@RequestBody UserGeohash user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认精度12位</span></span><br><span class="line">    String geoHashCode = GeohashUtils.encodeLatLon(user.getLatitude(),user.getLongitude());</span><br><span class="line">    <span class="keyword">return</span> userGeohashService.save(user.setGeoCode(geoHashCode).setCreateTime(LocalDateTime.now()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取附近指定范围的人</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> distance 距离范围 单位km</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len      geoHash的精度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userLng  当前经度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userLat  当前纬度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> json</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/nearby"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">nearBySearch</span><span class="params">(@RequestParam(<span class="string">"distance"</span>)</span> <span class="keyword">double</span> distance,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(<span class="string">"len"</span>)</span> <span class="keyword">int</span> len,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(<span class="string">"userLng"</span>)</span> <span class="keyword">double</span> userLng,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(<span class="string">"userLat"</span>)</span> <span class="keyword">double</span> userLat) </span>&#123;</span><br><span class="line">    <span class="comment">//1.根据要求的范围，确定geoHash码的精度，获取到当前用户坐标的geoHash码</span></span><br><span class="line">    String geoHashCode = GeohashUtils.encodeLatLon(userLat, userLng, len);</span><br><span class="line">    QueryWrapper&lt;UserGeohash&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;UserGeohash&gt;()</span><br><span class="line">            .likeRight(<span class="string">"geo_code"</span>,geoHashCode);</span><br><span class="line">    <span class="comment">//2.匹配指定精度的geoHash码</span></span><br><span class="line">    List&lt;UserGeohash&gt; users = userGeohashService.list(queryWrapper);</span><br><span class="line">    <span class="comment">//3.过滤超出距离的</span></span><br><span class="line">    users = users.stream()</span><br><span class="line">            .filter(a -&gt;getDistance(a.getLongitude(),a.getLatitude(),userLng,userLat)&lt;= distance)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(users);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 球面中，两点间的距离</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> longitude 经度1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> latitude  纬度1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userLng   经度2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userLat   纬度2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回距离，单位km</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getDistance</span><span class="params">(Double longitude, Double latitude, <span class="keyword">double</span> userLng, <span class="keyword">double</span> userLat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> spatialContext.calcDistance(spatialContext.makePoint(userLng, userLat),</span><br><span class="line">            spatialContext.makePoint(longitude, latitude)) * DistanceUtils.DEG_TO_KM;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面几步，就可以实现这一业务场景，不仅提高了查询效率，并且保护了用户的隐私，不对外暴露坐标位置。并且对于同一位置的频繁请求，如果是同一个geohash字符串，可以加上缓存，减缓数据库的压力。</p><h2 id="边界问题优化"><a class="markdownIt-Anchor" href="#边界问题优化"></a> 边界问题优化</h2><p>geohash算法将地图分为一个个矩形，对每个矩形进行编码，得到geohash码，但是<code>当前点与待搜索点距离很近但是恰好在两个区域</code>，用上面的方法则就不适用了。</p><blockquote><p>解决这一问题的办法：获取当前点所在区域附近的8个区域的geohash码，一并进行筛选。</p></blockquote><p>如何求解<code>附近的8个区域的geohash码</code>可参考<a href="https://blog.csdn.net/dokd229933/article/details/47021515" target="_blank" rel="noopener">Geohash求当前区域周围8个区域编码的一种思路</a></p><p>了解了思路，这里我们可以使用第三方开源库<code>ch.hsr.geohash</code>来计算，通过maven引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.hsr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>geohash<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对上一章节的<code>nearBySearch</code>方法进行修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取附近指定范围的人</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> distance 距离范围 单位km</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len      geoHash的精度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userLng  当前经度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userLat  当前纬度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> json</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/nearby"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">nearBySearch</span><span class="params">(@RequestParam(<span class="string">"distance"</span>)</span> <span class="keyword">double</span> distance,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(<span class="string">"len"</span>)</span> <span class="keyword">int</span> len,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(<span class="string">"userLng"</span>)</span> <span class="keyword">double</span> userLng,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(<span class="string">"userLat"</span>)</span> <span class="keyword">double</span> userLat) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.根据要求的范围，确定geoHash码的精度，获取到当前用户坐标的geoHash码</span></span><br><span class="line">    GeoHash geoHash = GeoHash.withCharacterPrecision(userLat, userLng, len);</span><br><span class="line">    <span class="comment">//2.获取到用户周边8个方位的geoHash码</span></span><br><span class="line">    GeoHash[] adjacent = geoHash.getAdjacent();</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;UserGeohash&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;UserGeohash&gt;()</span><br><span class="line">        .likeRight(<span class="string">"geo_code"</span>,geoHash.toBase32());</span><br><span class="line">    Stream.of(adjacent).forEach(a -&gt; queryWrapper.or().likeRight(<span class="string">"geo_code"</span>,a.toBase32()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.匹配指定精度的geoHash码</span></span><br><span class="line">    List&lt;UserGeohash&gt; users = userGeohashService.list(queryWrapper);</span><br><span class="line">    <span class="comment">//4.过滤超出距离的</span></span><br><span class="line">    users = users.stream()</span><br><span class="line">            .filter(a -&gt;getDistance(a.getLongitude(),a.getLatitude(),userLng,userLat)&lt;= distance)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="redisgeohash"><a class="markdownIt-Anchor" href="#redisgeohash"></a> Redis+GeoHash</h1><p>基于前两种方案，我们可以发现gps这类数据属于<code>读多写少</code>的情况，如果使用redis来实现附近的人，想必效率会大大提高。</p><blockquote><p>自Redis 3.2开始，Redis基于<a href="https://en.wikipedia.org/wiki/Geohash" target="_blank" rel="noopener">geohash</a>和<a href="http://redisdoc.com/sorted_set/index.html" target="_blank" rel="noopener">有序集合Zset</a>提供了地理位置相关功能</p></blockquote><p>Redis提供6条命令，来帮助我们我完成大部分业务的需求，关于Redis提供的geohash操作命令介绍可阅读博客：<a href="https://juejin.im/post/5da40462f265da5baf410a11" target="_blank" rel="noopener">Redis 到底是怎么实现“附近的人”这个功能的呢？</a></p><p>本文主要介绍下，我们示例代码中用到的两个命令：</p><ul><li><code>GEOADD key longitude latitude member</code>：将给定的空间元素（纬度、经度、名字）添加到指定的键里面<ul><li>例如添加小明的经纬度信息：GEOADD location 119.9886618073271630.27465803229662  小明</li></ul></li><li><code>GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [ASC|DESC] [COUNT count]</code>: 根据给定地理位置坐标获取指定范围内的地理位置集合(附近的人)<ul><li>例如查询某gps附近500m的用户坐标：GEORADIUS location 119.9886618073271630.27465803229662 500 m WITHCOORD</li></ul></li></ul><h2 id="实现思路-3"><a class="markdownIt-Anchor" href="#实现思路-3"></a> 实现思路</h2><ul><li>添加用户坐标信息到redis（<code>GEOADD</code>），redis会将经纬度参数值转换为52位的geohash码，</li><li>Redis以geohash码为score，将其他信息以Zset有序集合存入key中</li><li>通过调用<code>GEORADIUS</code>命令，获取指定坐标点某一范围内的数据</li><li>因geohash存在精度误差，剔除超过指定距离的数据</li></ul><h2 id="实现代码"><a class="markdownIt-Anchor" href="#实现代码"></a> 实现代码</h2><blockquote><p>这里只贴出部分核心代码，详细的代码可见源码：<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/NearbySearch" target="_blank" rel="noopener">NearBySearch</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GEO相关命令用到的KEY</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String KEY = <span class="string">"user_info"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">       Long flag = redisTemplate.opsForGeo().add(KEY, <span class="keyword">new</span> RedisGeoCommands.GeoLocation&lt;&gt;(</span><br><span class="line">               user.getName(), </span><br><span class="line">               <span class="keyword">new</span> Point(user.getLongitude(), user.getLatitude()))</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">return</span> flag != <span class="keyword">null</span> &amp;&amp; flag &gt; <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据当前位置获取附近指定范围内的用户</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> distance 指定范围 单位km ，可根据&#123;<span class="doctag">@link</span> org.springframework.data.geo.Metrics&#125; 进行设置</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userLng 用户经度</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userLat 用户纬度</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">nearBySearch</span><span class="params">(<span class="keyword">double</span> distance, <span class="keyword">double</span> userLng, <span class="keyword">double</span> userLat)</span> </span>&#123;</span><br><span class="line">       List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="comment">// 1.GEORADIUS获取附近范围内的信息</span></span><br><span class="line">       GeoResults&lt;RedisGeoCommands.GeoLocation&lt;Object&gt;&gt; reslut = </span><br><span class="line">           redisTemplate.opsForGeo().radius(KEY, </span><br><span class="line">                       <span class="keyword">new</span> Circle(<span class="keyword">new</span> Point(userLng, userLat), <span class="keyword">new</span> Distance(distance, Metrics.KILOMETERS)),</span><br><span class="line">                       RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs()</span><br><span class="line">                               .includeDistance()</span><br><span class="line">                               .includeCoordinates().sortAscending());</span><br><span class="line">       <span class="comment">//2.收集信息，存入list</span></span><br><span class="line">       List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;Object&gt;&gt;&gt; content = reslut.getContent();</span><br><span class="line">       <span class="comment">//3.过滤掉超过距离的数据</span></span><br><span class="line">       content.forEach(a-&gt; users.add(</span><br><span class="line">               <span class="keyword">new</span> User().setDistance(a.getDistance().getValue())</span><br><span class="line">               .setLatitude(a.getContent().getPoint().getX())</span><br><span class="line">               .setLongitude(a.getContent().getPoint().getY())));</span><br><span class="line">       <span class="keyword">return</span> JSON.toJSONString(users);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="方案总结"><a class="markdownIt-Anchor" href="#方案总结"></a> 方案总结</h1><table><thead><tr><th>方案</th><th>优势</th><th>缺点</th></tr></thead><tbody><tr><td>Mysql外接正方形</td><td>逻辑清晰，实现简单，支持多条件筛选</td><td>效率较低，不适合大数据量，不支持按距离排序</td></tr><tr><td>Mysql+Geohash</td><td>借助索引有效提高效率，支持多条件筛选</td><td>不支持按距离排序，存在数据库瓶颈</td></tr><tr><td>Redis+Geohash</td><td>效率高，集成便捷，支持距离排序</td><td>不适合复杂对象存储，不支持多条件查询</td></tr></tbody></table><p>总结以上三种方案，各有优劣，在不同的业务场景下，可选择不同的方案来实现。</p><p>当然目前附近的人的解决方案并不仅仅这三种，以上权当是这一功能的入门引子，希望对大家有所帮助。</p><blockquote><p>本文的三种方案均有源码提供，<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/NearbySearch" target="_blank" rel="noopener">源码地址</a></p></blockquote><h1 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h1><p><a href="https://juejin.im/post/5da40462f265da5baf410a11" target="_blank" rel="noopener">Redis 到底是怎么实现“附近的人”这个功能的呢？</a></p><p><a href="https://blog.csdn.net/dokd229933/article/details/47021515" target="_blank" rel="noopener">Geohash求当前区域周围8个区域编码的一种思路</a></p><p><a href="https://www.cnblogs.com/LBSer/p/3310455.html" target="_blank" rel="noopener">GeoHash核心原理解析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;在我们平时使用的许多app中有&lt;code&gt;附近的人&lt;/code&gt;这一功能，像微信、qq附近的人，哈罗、街兔附近的车辆。这些功能就在我们日常生活中出现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;像类似于附近的人这一类业务，在Java中是如何实现的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文就简单介绍下目前的几种解决方案，并提供简单的示例代码&lt;/p&gt;
&lt;p&gt;注: 本文仅涉及&lt;code&gt;附近的人&lt;/code&gt;这一业务场景的解决方案讨论，并未涉及到相关的技术细节和方案优化，各位看官可以放心阅读。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="附近的人" scheme="https://www.larscheng.com/tags/%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java时间处理2----时区TimeZone类方法探究(Java8以前)</title>
    <link href="https://www.larscheng.com/javadate2/"/>
    <id>https://www.larscheng.com/javadate2/</id>
    <published>2019-11-22T06:56:33.000Z</published>
    <updated>2022-01-02T05:18:26.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>本文转载于<code>CSDN博主「Gene Xu」</code><br>原文链接：<a href="https://blog.csdn.net/goodbye_youth/article/details/81807273" target="_blank" rel="noopener">https://blog.csdn.net/goodbye_youth/article/details/81807273</a></p></blockquote><h1 id="一-timezone-类的定义"><a class="markdownIt-Anchor" href="#一-timezone-类的定义"></a> 一、TimeZone 类的定义</h1><p>TimeZone 类位于 java.util 包中，是一个抽象类，主要包含了对于时区的各种操作，可以进行计算时间偏移量或夏令时等操作</p><a id="more"></a><h1 id="二-timezone-类常用方法"><a class="markdownIt-Anchor" href="#二-timezone-类常用方法"></a> 二、TimeZone 类常用方法</h1><blockquote><p>getAvailableIDs()</p></blockquote><ul><li>获取Java支持的所有时区 ID</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(TimeZone.getAvailableIDs()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asia/Shanghai, Asia/Chongqing, Asia/Hong_Kong, Asia/Macao, ...</span></span><br></pre></td></tr></table></figure><blockquote><p>getAvailableIDs(int rawOffset)</p></blockquote><ul><li>根据 时间偏移量 来获取时区 ID</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 东八区时间，与标准时间相差8小时</span></span><br><span class="line">System.out.println(Arrays.toString(TimeZone.getAvailableIDs(<span class="number">8</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// [Asia/Brunei, Asia/Choibalsan, Asia/Chongqing, Asia/Chungking, Asia/Harbin,</span></span><br><span class="line"><span class="comment">// Asia/Hong_Kong, Asia/Irkutsk, Asia/Kuala_Lumpur, Asia/Kuching, Asia/Macao, </span></span><br><span class="line"><span class="comment">// Asia/Macau, Asia/Makassar, Asia/Manila, Asia/Shanghai, Asia/Singapore, </span></span><br><span class="line"><span class="comment">// Asia/Taipei, Asia/Ujung_Pandang, Asia/Ulaanbaatar, Asia/Ulan_Bator, </span></span><br><span class="line"><span class="comment">// Australia/Perth, Australia/West, CTT, Etc/GMT-8, Hongkong, PRC, Singapore]</span></span><br></pre></td></tr></table></figure><blockquote><p>getDefault()</p></blockquote><ul><li>获取当前系统的默认时区，中国默认为东八区</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(TimeZone.getDefault()); </span><br><span class="line"></span><br><span class="line"><span class="comment">// sun.util.calendar.ZoneInfo[id="GMT+08:00",offset=28800000,</span></span><br><span class="line"><span class="comment">// dstSavings=0,useDaylight=false,transitions=0,lastRule=null]</span></span><br></pre></td></tr></table></figure><blockquote><p>setDefault(TimeZone zone)</p></blockquote><ul><li>设置当前系统的默认时区</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TimeZone.setDefault(TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>));</span><br><span class="line">System.out.println(TimeZone.getDefault());</span><br><span class="line"></span><br><span class="line"><span class="comment">// sun.util.calendar.ZoneInfo[id="Asia/Shanghai",offset=28800000,</span></span><br><span class="line"><span class="comment">// dstSavings=0,useDaylight=false,transitions=19,lastRule=null]</span></span><br></pre></td></tr></table></figure><blockquote><p>getTimeZone(String ID)</p></blockquote><ul><li>根据时区 ID 来获取其对应的时区</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(TimeZone.getTimeZone(<span class="string">"GMT+08:00"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// sun.util.calendar.ZoneInfo[id="GMT+08:00",offset=28800000,</span></span><br><span class="line"><span class="comment">// dstSavings=0,useDaylight=false,transitions=0,lastRule=null]</span></span><br></pre></td></tr></table></figure><blockquote><p>getTimeZone(ZoneId zoneId)</p></blockquote><ul><li>根据 ZoneId 对象来获取其对应的时区</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(TimeZone.getTimeZone(ZoneId.of(<span class="string">"GMT+08:00"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// sun.util.calendar.ZoneInfo[id="GMT+08:00",offset=28800000,</span></span><br><span class="line"><span class="comment">// dstSavings=0,useDaylight=false,transitions=0,lastRule=null]</span></span><br></pre></td></tr></table></figure><blockquote><p>getDisplayName()</p></blockquote><ul><li>获取该 TimeZone 对象的时区名称</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">System.out.println(timeZone.getDisplayName()); <span class="comment">// 中国标准时间</span></span><br></pre></td></tr></table></figure><blockquote><p>getDisplayName(Locale locale)</p></blockquote><ul><li>获取该 TimeZone 对象的时区名称，并根据 Locale 对象进行国际化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">System.out.println(timeZone.getDisplayName()); <span class="comment">// 中国标准时间</span></span><br><span class="line">System.out.println(timeZone.getDisplayName(Locale.ENGLISH)); <span class="comment">// China Standard Time</span></span><br></pre></td></tr></table></figure><blockquote><p>getDisplayName(boolean daylight, int style)</p></blockquote><ul><li><p>获取该 TimeZone 对象的时区名称</p></li><li><p>daylight</p><ul><li>true：指定夏令时名称</li><li>false：指定标准时间名称</li></ul></li><li><p>style</p><ul><li>TimeZone.LONG：显示全称</li><li>TimeZone.SHORT：显示简称</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">System.out.println(timeZone.getDisplayName()); <span class="comment">// 中国标准时间</span></span><br><span class="line">System.out.println(timeZone.getDisplayName(<span class="keyword">false</span>, TimeZone.LONG)); <span class="comment">// 中国标准时间</span></span><br><span class="line">System.out.println(timeZone.getDisplayName(<span class="keyword">false</span>, TimeZone.SHORT)); <span class="comment">// CST (China Standard Time)</span></span><br></pre></td></tr></table></figure><blockquote><p>getDisplayName(boolean daylight, int style, Locale locale)</p></blockquote><ul><li><p>获取该 TimeZone 对象的时区名称，并根据 Locale 对象进行国际化</p></li><li><p>daylight</p><ul><li>true：指定夏令时名称</li><li>false：指定标准时间名称</li></ul></li><li><p>style</p><ul><li>TimeZone.LONG：显示全称</li><li>TimeZone.SHORT：显示简称</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">System.out.println(timeZone.getDisplayName()); <span class="comment">// 中国标准时间</span></span><br><span class="line">System.out.println(timeZone.getDisplayName(<span class="keyword">false</span>, TimeZone.LONG, Locale.ENGLISH)); <span class="comment">// China Standard Time</span></span><br></pre></td></tr></table></figure><blockquote><p>getID()</p></blockquote><ul><li>获取该 TimeZone 对象的时区 ID</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">System.out.println(timeZone.getID()); <span class="comment">// Asia/Shanghai</span></span><br></pre></td></tr></table></figure><blockquote><p>setID(String ID)</p></blockquote><ul><li>设置该 TimeZone 对象的时区 ID</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">timeZone.setID(<span class="string">"Asia/Chongqing"</span>);</span><br><span class="line">System.out.println(timeZone.getID()); <span class="comment">// Asia/Chongqing</span></span><br></pre></td></tr></table></figure><blockquote><p>getOffset(long date)</p></blockquote><ul><li>获取该时间所在时区的时间偏移量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">System.out.println(timeZone.getOffset(System.currentTimeMillis())); <span class="comment">// 28800000</span></span><br></pre></td></tr></table></figure><blockquote><p>getDSTSavings()</p></blockquote><ul><li><p>在夏令时规则生效时，返回相对于标准时间提前的毫秒数</p></li><li><p>如果此时区不实施夏令时，则为 0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line"><span class="comment">// 中国没有夏令时，故为0</span></span><br><span class="line">System.out.println(timeZone.getDSTSavings()); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><blockquote><p>getRawOffset()</p></blockquote><ul><li>获取时间原始偏移量，该值不受夏令时的影响，故称为时间原始偏移量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">System.out.println(timeZone.getRawOffset()); <span class="comment">// 28800000</span></span><br></pre></td></tr></table></figure><blockquote><p>setRawOffset(int offsetMillis)</p></blockquote><ul><li>设置时间原始偏移量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">timeZone.setRawOffset(<span class="number">25200000</span>);</span><br><span class="line">System.out.println(timeZone.getRawOffset()); <span class="comment">// 25200000</span></span><br></pre></td></tr></table></figure><blockquote><p>toZoneId()</p></blockquote><ul><li>将 TimeZone 对象转换为 ZoneId 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">ZoneId zoneId = timeZone.toZoneId();</span><br><span class="line">System.out.println(zoneId); <span class="comment">// Asia/Shanghai</span></span><br></pre></td></tr></table></figure><blockquote><p>useDaylightTime()</p></blockquote><ul><li>查询此时区是否使用夏令时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">System.out.println(timeZone.useDaylightTime()); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>inDaylightTime(Date date)</p></blockquote><ul><li>查询给定的日期是否在此时区的夏令时中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">System.out.println(timeZone.inDaylightTime(<span class="keyword">new</span> Date())); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>hasSameRules(TimeZone other)</p></blockquote><ul><li><p>如果两时区仅时区 ID 不同，但具有相同的规则和时间偏移量，则返回 true</p></li><li><p>如果另一个时区为空，则返回 false</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimeZone timeZone1 = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">TimeZone timeZone2 = TimeZone.getTimeZone(<span class="string">"Asia/Chongqing"</span>);</span><br><span class="line">System.out.println(timeZone1.hasSameRules(timeZone2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转载于&lt;code&gt;CSDN博主「Gene Xu」&lt;/code&gt;&lt;br&gt;
原文链接：&lt;a href=&quot;https://blog.csdn.net/goodbye_youth/article/details/81807273&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/goodbye_youth/article/details/81807273&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一-timezone-类的定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-timezone-类的定义&quot;&gt;&lt;/a&gt; 一、TimeZone 类的定义&lt;/h1&gt;
&lt;p&gt;TimeZone 类位于 java.util 包中，是一个抽象类，主要包含了对于时区的各种操作，可以进行计算时间偏移量或夏令时等操作&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="时间处理" scheme="https://www.larscheng.com/tags/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java时间处理1----Date和Calendar方法探究(Java8以前)</title>
    <link href="https://www.larscheng.com/javadate1/"/>
    <id>https://www.larscheng.com/javadate1/</id>
    <published>2019-11-21T06:56:21.000Z</published>
    <updated>2022-01-02T05:18:26.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>时间的处理在Java中会经常用到，Java中常用的时间处理类有如下两种：</p><a id="more"></a><ul><li>Date: <code>日期类</code><ul><li>用来表示瞬时时间，精确到毫秒，他表示的是某一刹那的时间。Date不存在时区概念。</li><li>由于Date类不易于实现国际化，所以逐渐不被推荐使用，并且废弃了大部分方法。</li></ul></li><li>Calendar: <code>日历类</code>，可以理解为计算机历<ul><li>一方面是为了弥补Date的国际化缺陷，另一方面是将时间以日历的形式来表示和处理</li><li>Calendar包含时区和语言的概念</li><li>Calendar将时间细分成了<code>年月日时分秒毫秒上午下午夏时令等</code>概念，并提供这些概念的相关操作方法。</li></ul></li></ul><blockquote><p>下面我们来康康这两个工具类的一些常用方法。</p></blockquote><h2 id="date"><a class="markdownIt-Anchor" href="#date"></a> Date 📅</h2><blockquote><p>Date类位于<code>java.util</code>包下，是JDK中最早的时间处理类，但由于Date类不易于实现国际化，后不被推荐使用。</p><p>Date源自于JDK1.0，到如今Date类中的大部分构造函数和方法都已经废弃不推荐使用(<code>Deprecated</code>)</p></blockquote><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/java8date/20191121115207.png" style="zoom: 50%;"><p>目前还在使用的方法如下：</p><table><thead><tr><th>方法 : 返回值</th><th>参数说明</th><th>功能</th></tr></thead><tbody><tr><td>Date()</td><td>构造器</td><td>当前时间的Date对象</td></tr><tr><td>Date(long date)</td><td>构造器,<code>date</code>:与GMT1970年1月1日00:00:00之间的时间差(ms)</td><td>创建指定时间的Date对象</td></tr><tr><td>after(Date when):boolean</td><td><code>when</code>:待判断的Date对象</td><td>某一Date是否在when之后</td></tr><tr><td>before(Date when):boolean</td><td><code>when</code>:待判断的Date对象</td><td>某一Date是否在when之前</td></tr><tr><td>compareTo(Date anotherDate):int</td><td><code>anotherDate</code>:待比较的Date对象</td><td>Date对象与参数中的Date进行比较 ，<br><code>a.compareTo(b)</code>：a&gt;b:<code>正数</code>， a=b:<code>0</code>，a&lt;b:<code>负数</code></td></tr><tr><td>getTime():long</td><td></td><td>返回Date对象的时间戳</td></tr><tr><td>setTime(long time):void</td><td><code>time</code>:时间戳</td><td>设置Date对象的时间</td></tr></tbody></table><p>Date对象的使用示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * Date的常用方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> larscheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/21 13:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date1  = <span class="keyword">new</span> Date();</span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(System.currentTimeMillis()+<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"date1: "</span>+date1);<span class="comment">//date1: Thu Nov 21 13:54:52 CST 2019</span></span><br><span class="line">        System.out.println(<span class="string">"date2: "</span>+date2);<span class="comment">//date2: Thu Nov 21 13:54:53 CST 2019</span></span><br><span class="line">        System.out.println(<span class="string">"date1.compareTo(date2): "</span>+date1.compareTo(date2));<span class="comment">//-1</span></span><br><span class="line">        System.out.println(<span class="string">"date1.after(date2): "</span>+date1.after(date2));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">"date1.before(date2): "</span>+date1.before(date2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"date1.getTime(): "</span>+date1.getTime());<span class="comment">//1574315692607</span></span><br><span class="line">        date1.setTime(System.currentTimeMillis());</span><br><span class="line">        System.out.println(<span class="string">"setTime() ==&gt; date1.getTime(): "</span>+date1.getTime());<span class="comment">//1574315692628</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="calendar"><a class="markdownIt-Anchor" href="#calendar"></a> Calendar 📆</h2><blockquote><p>在JDK1.1后，处理时间时，推荐使用<code>Calendar</code>类，Calendar包含Date中所有的功能，并且比Date更复杂更强大。</p><p>Calendar是一个抽象类，不可以直接实例化它，但可以通过他提供的<code>getInstance</code>方法进行创建</p></blockquote><p>Calendar类在Date原有功能基础上，加强了对时间的处理和自定义等。其常用方法如下：</p><table><thead><tr><th>方法 : 返回值</th><th>参数说明</th><th>功能</th></tr></thead><tbody><tr><td>getInstance():Calendar</td><td></td><td>对外提供Calendar的创建入口<br>(该方法还有<code>两个重载方法</code>，<br>主要用于自定义时区，语言环境)</td></tr><tr><td>after(Object when):boolean</td><td><code>when</code>:待判断的Calendar对象</td><td>某一Date是否在when之后</td></tr><tr><td>before(Object when):boolean</td><td><code>when</code>:待判断的Calendar对象</td><td>某一Date是否在when之前</td></tr><tr><td>compareTo(Calendar a):int</td><td><code>a</code>:待比较的Calendar对象</td><td>Date对象与参数中的Date进行比较 ，<br><code>a.compareTo(b)</code>：a&gt;b:<code>正数</code>， a=b:<code>0</code>，a&lt;b:<code>负数</code></td></tr><tr><td>getTime():Date</td><td></td><td>将Calendar日期对象转换为Date对象</td></tr><tr><td>setTime(Date date):void</td><td><code>date</code>:Date对象</td><td>将Date对象表示的时间值设置给Calendar日期对象</td></tr><tr><td>getTimeInMillis():long</td><td></td><td>返回Calendar日期对象的时间戳</td></tr><tr><td>setTimeInMillis(long millis):void</td><td><code>millis</code>:时间戳</td><td>用给定long值设置日历的当前时间</td></tr><tr><td>get(int field):int</td><td><code>field</code>:日历字段(Calendar.YEAR)</td><td>获取指定日历字段的值</td></tr><tr><td>set(int field, int val):void</td><td><code>field</code>:日历字段,<code>val</code>:具体值</td><td>设置日历字段的值</td></tr><tr><td>add(int field, int amount):void</td><td><code>field</code>:日历字段,<code>amount</code>:加减值</td><td>基于日历的规则实现日期加减。amout可为负数</td></tr><tr><td>roll(int field, boolean up):void</td><td><code>field</code>:日历字段,<code>up</code>:T加/F减</td><td>在指定日历字段上添加或减去<code>1个时间单元</code></td></tr><tr><td>roll(int field, int amount):void</td><td><code>field</code>:日历字段,<code>amount</code>:加减值</td><td>在指定日历字段上添加或减去<code>指定的时间单元</code></td></tr></tbody></table><p>以上仅仅是Calendar类中的一部分常用方法，更多详细的方法大家可以参考源码</p><blockquote><p>Calendar类是基于日历的时间处理类，在使用他之前需要注意下面一些小细节：</p></blockquote><ul><li><p><code>Calendar.MONTH</code>: 初始值为0，最大值11，所以在格式化时间时<code>记得+1</code></p></li><li><p>在使用set方法时，<code>Calendar.HOUR</code>为12小时制，<code>Calendar.HOUR_OF_DAY</code>为24小时制</p></li><li><p>add与roll都可以实现指定字段的加减，两者的区别在于<u><strong>add会进位而roll不会</strong></u>，例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//add与roll的区别</span></span><br><span class="line">SimpleDateFormat sf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">   Calendar ca1 = Calendar.getInstance();<span class="comment">//2019-11-21 16:24:31</span></span><br><span class="line">   Calendar ca2 = Calendar.getInstance();<span class="comment">//2019-11-21 16:24:31</span></span><br><span class="line">   ca1.add(Calendar.MONTH,<span class="number">3</span>);<span class="comment">//add加3个月</span></span><br><span class="line">   ca2.roll(Calendar.MONTH,<span class="number">3</span>);<span class="comment">//roll加3个月</span></span><br><span class="line">   System.out.println(sf.format(ca1.getTime()));<span class="comment">//进位：2020-02-21 16:24:31</span></span><br><span class="line">   System.out.println(sf.format(ca2.getTime()));<span class="comment">//不进位：2019-02-21 16:24:31</span></span><br></pre></td></tr></table></figure></li></ul><p>Calendar类的常用方法使用示例如下：</p><h3 id="add"><a class="markdownIt-Anchor" href="#add"></a> add</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//add:基于日历规则实现日期加减</span></span><br><span class="line">System.out.println(<span class="string">"#################### add #####################"</span>);</span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">System.out.println(<span class="string">"当前月份："</span>+(cal.get(Calendar.MONTH)+<span class="number">1</span>));</span><br><span class="line">cal.add(Calendar.MONTH,<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"加上2个月："</span>+(cal.get(Calendar.MONTH)+<span class="number">1</span>));</span><br><span class="line">cal.add(Calendar.MONTH,-<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"再加上-2个月："</span>+(cal.get(Calendar.MONTH)+<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h3 id="set"><a class="markdownIt-Anchor" href="#set"></a> set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set:设置日历字段的值</span></span><br><span class="line">System.out.println(<span class="string">"#################### set #####################"</span>);</span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.set(Calendar.YEAR,<span class="number">2018</span>);</span><br><span class="line">System.out.println(<span class="string">"修改年份后："</span>+calendar.get(Calendar.YEAR));</span><br><span class="line">calendar.set(<span class="number">2018</span>, Calendar.MAY,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">11</span>);</span><br><span class="line">System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(calendar.getTime()));</span><br></pre></td></tr></table></figure><h3 id="get"><a class="markdownIt-Anchor" href="#get"></a> get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get:返回指定日历字段的值</span></span><br><span class="line">System.out.println(<span class="string">"#################### get #####################"</span>);</span><br><span class="line">System.out.println(<span class="string">"当前日期:"</span>+calendar.get(Calendar.YEAR)+<span class="string">"-"</span>+calendar.get(Calendar.MONTH)</span><br><span class="line">        +<span class="string">"-"</span>+calendar.get(Calendar.DATE));</span><br><span class="line">System.out.println(<span class="string">"当前时间:"</span>+calendar.get(Calendar.HOUR_OF_DAY)+<span class="string">":"</span>+calendar.get(Calendar.MINUTE)</span><br><span class="line">        +<span class="string">":"</span>+calendar.get(Calendar.SECOND)+<span class="string">":"</span>+calendar.get(Calendar.MILLISECOND));</span><br><span class="line">System.out.println(<span class="string">"12小时制:"</span>+calendar.get(Calendar.HOUR));</span><br><span class="line">System.out.println(<span class="string">"24小时制:"</span>+calendar.get(Calendar.HOUR_OF_DAY));</span><br></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>本文主要对时间处理类进行了方法梳理和说明，实际的使用中还会掺杂着时区和时间格式化等操作。</p><p>下篇文章我们接着来了解下Java中时区类TimeZone的基本使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;时间的处理在Java中会经常用到，Java中常用的时间处理类有如下两种：&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="时间处理" scheme="https://www.larscheng.com/tags/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>FastJson中JSONString、JavaBean、JSONObject、JSONArray的转换关系及API示例</title>
    <link href="https://www.larscheng.com/fastjson-api/"/>
    <id>https://www.larscheng.com/fastjson-api/</id>
    <published>2019-11-20T09:40:36.000Z</published>
    <updated>2022-01-02T05:18:26.505Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p><code>JSON</code>作为一种轻量级的数据交换格式，在我们日常的开发中使用十分广泛，就Java后端的开发工作中，JSON字符串与Java对象之间相互转换是常常遇到的操作。</p><p>虽然平时用到的挺多的，但是因为用于JSON处理的包有很多种，每种工具集的功能和使用方式也都不同，很容易在使用时造成混乱。</p><blockquote><p>本文就结合<code>FastJson</code>部分源码，简单整理了下<code>常用的API及其使用示例</code></p></blockquote><p>本文FastJson版本：<a href="">1.2.54</a></p><h1 id="转换图"><a class="markdownIt-Anchor" href="#转换图"></a> 转换图</h1><p>根据FastJson源码大致整理出了这么一张转换图：</p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/fastJson/20191120135250.png" style="zoom: 67%;"><p>可以看到参与转换的对象主要有图中五种：</p><ol><li><strong>JSONString</strong>：<code>json字符串</code></li><li><strong>JSONObject</strong>：<code>json对象</code></li><li><strong>JSONArray</strong>：<code>json对象数组</code></li><li><strong>JavaBean</strong>：<code>java对象</code></li><li><strong>List<javabean></javabean></strong>：<code>java对象集合</code></li></ol><p>转化中用到的方法的方法名有如下几种：</p><ul><li><strong>parse</strong>: <code>JSONString ==&gt; JSONObject/JSONArray</code></li><li><strong>parseObject</strong>: <code>JSONString ==&gt; JSONObject/JavaBean</code></li><li><strong>pareseArray</strong>: <code>JSONString ==&gt; JSONObject/List&lt;JavaBean&gt;</code></li><li><strong>toJSONString</strong>: <code>JavaBean/JSONObject ==&gt; JSONString</code></li><li><strong>toJSON</strong>: <code>JavaBean ==&gt; JSONObject</code></li><li><strong>toJavaObject</strong>:<code>JSONObject ==&gt; JavaBean</code></li></ul><h1 id="常用api"><a class="markdownIt-Anchor" href="#常用api"></a> 常用API</h1><blockquote><p>本文种仅列举<code>平常使用频率较高</code>的API，其他的重载方法可参考<code>源码</code>，大都是对序列化/反序列化过程进行定制化。</p></blockquote><h2 id="tojsonstring"><a class="markdownIt-Anchor" href="#tojsonstring"></a> toJSONString</h2><blockquote><p>实现了json对象(<code>JSONObject</code>)<mark>&gt;json字符串(<code>JSONString</code>)，和Java对象(<code>JavaBean</code>)</mark>&gt;json字符串(<code>JSONString</code>)的转化</p></blockquote><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/fastJson/20191120151949.png" style="zoom:50%;"><p>从源码中可以看到这一方法被重载了多个，我们日常会用到的有如下几个：</p><table><thead><tr><th>方法 : 返回值</th><th>参数说明</th><th>功能</th></tr></thead><tbody><tr><td>toJSONString(Object object):String</td><td><code>object</code>: 需要进行序列化的对象javaBean或者JSONObject</td><td>将对象序列化为json字符串</td></tr><tr><td>toJSONString(Object object, boolean prettyFormat):String</td><td><code>prettyFormat</code>：是否格式化输出json字符串</td><td>格式化输出json字符串</td></tr><tr><td>toJSONString(Object object, SerializerFeature… features):String</td><td><code>features</code>：序列化额外属性配置，非必填</td><td>根据指定属性进行序列化</td></tr><tr><td>toJSONStringWithDateFormat(Object object, String dateFormat, SerializerFeature… features):String</td><td><code>dateFormat</code>：日期格式(<code>yyyy-MM-dd</code>)</td><td>序列化时格式化日期</td></tr></tbody></table><p>这些方法中最常用的即为：<code>toJSONString(Object object)</code></p><h2 id="parse"><a class="markdownIt-Anchor" href="#parse"></a> parse</h2><blockquote><p>实现了json字符串(<code>JSONString</code>)<mark>&gt;json对象(<code>JSONObject</code>)，和json字符串(<code>JSONString</code>)</mark>&gt;json对象数组(<code>JSONArray</code>)的转化</p></blockquote><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/fastJson/20191120151033.png" style="zoom:50%;"><table><thead><tr><th>方法 : 返回值</th><th>参数说明</th><th>功能</th></tr></thead><tbody><tr><td>parse(String text):Object</td><td><code>text</code>：json字符串</td><td>反序列化json字符串</td></tr></tbody></table><h2 id="parseobject"><a class="markdownIt-Anchor" href="#parseobject"></a> parseObject</h2><blockquote><p>实现了json字符串(<code>JSONString</code>)<mark>&gt;json对象(<code>JSONObject</code>)，和json字符串(<code>JSONString</code>)</mark>&gt;Java对象(<code>JavaBean</code>)的转化</p></blockquote><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/fastJson/20191120152143.png" style="zoom:50%;"><table><thead><tr><th>方法 : 返回值</th><th>参数说明</th><th>功能</th></tr></thead><tbody><tr><td>parseObject(String text):JSONObject</td><td><code>text</code>:json字符串</td><td>反序列化json字符串为Json对象</td></tr><tr><td>parseObject(String text, Class<t> clazz):T</t></td><td><code>clazz</code>:指定反序列化后的类</td><td>json字符串转java对象</td></tr><tr><td>parseObject(String text, TypeReference<t> type, Feature… features):T</t></td><td><code>type</code>:构造转化类型，<code>features</code>:反序列化额外属性</td><td>json字符串转java对象</td></tr></tbody></table><h2 id="parsearray"><a class="markdownIt-Anchor" href="#parsearray"></a> parseArray</h2><blockquote><p>实现了json字符串(<code>JSONString</code>)==&gt;json对象数组(<code>JSONArray)，和json字符串(</code>JSONString<code>)==&gt;Java对象集合(</code>List<javabean>`)的转化</javabean></p></blockquote><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/fastJson/20191120160101.png" style="zoom: 67%;"><table><thead><tr><th>方法 : 返回值</th><th>参数说明</th><th>功能</th></tr></thead><tbody><tr><td>parseArray(String text) :JSONArray</td><td><code>text</code>:json字符串</td><td>将json字符串反序列化为JSON数组对象</td></tr><tr><td>parseArray(String text, Class<t> clazz):List<t></t></t></td><td><code>clazz</code>:指定转化后的类</td><td>将json字符串反序列化为java对象集合</td></tr></tbody></table><h2 id="tojsontojavaobject"><a class="markdownIt-Anchor" href="#tojsontojavaobject"></a> toJSON/toJavaObject</h2><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/fastJson/20191120171451.png" style="zoom:50%;"><blockquote><p>toJSON()实现了Java对象(<code>JavaBean</code>)==&gt;Json对象(<code>JSONObject</code>)的转换</p><p>toJavaObject()实现了Json对象(<code>JSONObject</code>)==&gt;Java对象(<code>JavaBean</code>)的转换</p></blockquote><table><thead><tr><th>方法 : 返回值</th><th>参数说明</th><th>功能</th></tr></thead><tbody><tr><td>toJSON(Object javaObject):Object</td><td><code>javaObject</code>：java对象</td><td>java对象转化为Json对象</td></tr><tr><td>toJavaObject(JSON json, Class<t> clazz):T</t></td><td><code>json</code>:json对象，<code>clazz</code>：要转化的类型</td><td>json对象转化为java对象</td></tr></tbody></table><h1 id="代码示例"><a class="markdownIt-Anchor" href="#代码示例"></a> 代码示例</h1><p>Student学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.larscheng.www.jsontest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * 学生类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> larscheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/19 19:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类FastJsonTest.java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.larscheng.www.jsontest.fastJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.larscheng.www.jsontest.Course;</span><br><span class="line"><span class="keyword">import</span> com.larscheng.www.jsontest.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * fastJson的api示例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> larscheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/11/19 19:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Student LIMING = <span class="keyword">new</span> Student(<span class="string">"liming"</span>, <span class="number">20</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LIMING_STR = </span><br><span class="line">        <span class="string">"&#123;'age':20,'birthday':1574163958480,'name':'liming'&#125;"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Course MATH = <span class="keyword">new</span> Course(<span class="string">"数学课"</span>, <span class="string">"高等代数"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Course CHINESE = <span class="keyword">new</span> Course(<span class="string">"语文课"</span>, <span class="string">"大学语文"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> List&lt;Course&gt; COURSES = Arrays.asList(MATH, CHINESE);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String COURSES_STR = </span><br><span class="line">        <span class="string">"[&#123;'desc':'高等代数','name':'数学课'&#125;,&#123;'desc':'大学语文','name':'语文课'&#125;]"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> JSONObject LIMING_MAP = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            LIMING_MAP.put(<span class="string">"name"</span>, <span class="string">"liming"</span>);</span><br><span class="line">            LIMING_MAP.put(<span class="string">"age"</span>, <span class="number">20</span>);</span><br><span class="line">            LIMING_MAP.put(<span class="string">"birthday"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//############ toJSONString ###############</span></span><br><span class="line">        <span class="comment">/*JavaBean---&gt;JSONString*/</span></span><br><span class="line">        System.err.println(<span class="string">"JavaBean---&gt;JSONString(默认无格式):"</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(LIMING));</span><br><span class="line">        System.err.println(<span class="string">"JavaBean---&gt;JSONString(带格式):"</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(LIMING, <span class="keyword">true</span>));</span><br><span class="line">        System.err.println(<span class="string">"JavaBean---&gt;JSONString(日期格式化):"</span>);</span><br><span class="line">        System.out.println(JSON.toJSONStringWithDateFormat(LIMING, <span class="string">"yyyy-MM-dd"</span>) + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*JSONObject---&gt;JSONString*/</span></span><br><span class="line">        System.err.println(<span class="string">"JSONObject---&gt;JSONString(带格式):"</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(LIMING_MAP, <span class="keyword">true</span>) + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*List&lt;JavaBean&gt;---&gt;JSONString*/</span></span><br><span class="line">        System.err.println(<span class="string">"List&lt;JavaBean&gt;---&gt;JSONString(默认双引号):"</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(COURSES));</span><br><span class="line">        System.err.println(<span class="string">"List&lt;JavaBean&gt;---&gt;JSONString(单引号):"</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(COURSES, SerializerFeature.UseSingleQuotes));</span><br><span class="line">        System.err.println(<span class="string">"List&lt;JavaBean&gt;---&gt;JSONString(单引号+带格式):"</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(COURSES, SerializerFeature.UseSingleQuotes,SerializerFeature.PrettyFormat) + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//########## parse/parseObject ###################</span></span><br><span class="line">        <span class="comment">/*JSONString---&gt;JSONObject*/</span></span><br><span class="line">        System.err.println(<span class="string">"JSONString---&gt;JSONObject(parse):"</span>);</span><br><span class="line">        JSONObject jsonObject1 = (JSONObject) JSON.parse(LIMING_STR);</span><br><span class="line">        System.out.println(jsonObject1.toString());</span><br><span class="line">        System.err.println(<span class="string">"JSONString---&gt;JSONObject(parseObject):"</span>);</span><br><span class="line">        System.out.println(JSON.parseObject(LIMING_STR).toString() + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.err.println(<span class="string">"JSONString---&gt;JavaBean:"</span>);</span><br><span class="line">        Student student1 = JSON.parseObject(LIMING_STR,Student.class);</span><br><span class="line">        System.out.println(student1.hashCode()+<span class="string">"\t"</span>+student1.toString());</span><br><span class="line">        System.err.println(<span class="string">"JSONString---&gt;JavaBean:"</span>);</span><br><span class="line">        Student student2 = JSON.parseObject(LIMING_STR,<span class="keyword">new</span> TypeReference&lt;Student&gt;()&#123;&#125;);</span><br><span class="line">        System.out.println(student2.hashCode()+<span class="string">"\t"</span>+student2.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//########### parse/parseArray ################</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*JSONString---&gt;JSONArray*/</span></span><br><span class="line">        System.err.println(<span class="string">"JSONString---&gt;JSONArray(parse):"</span>);</span><br><span class="line">        JSONArray jsonArray1 = (JSONArray) JSON.parse(COURSES_STR);</span><br><span class="line">        System.out.println(jsonArray1.toString());</span><br><span class="line">        System.err.println(<span class="string">"JSONString---&gt;JSONArray(parseArray):"</span>);</span><br><span class="line">        System.out.println(JSON.parseArray(COURSES_STR).toString());</span><br><span class="line"></span><br><span class="line">        System.err.println(<span class="string">"JSONString---&gt;List&lt;JavaBean&gt;:"</span>);</span><br><span class="line">        List&lt;Course&gt; courses1 = JSON.parseArray(COURSES_STR,Course.class);</span><br><span class="line">        System.out.println(courses1.hashCode()+<span class="string">"\t"</span>+courses1.toString()+<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//######### toJSON/toJavaObject ################</span></span><br><span class="line">        System.err.println(<span class="string">"JavaBean---&gt;JSONObject:"</span>);</span><br><span class="line">        System.out.println(JSON.toJSON(LIMING));</span><br><span class="line"></span><br><span class="line">        System.err.println(<span class="string">"JSONObject---&gt;JavaBean:"</span>);</span><br><span class="line">        System.out.println(JSON.toJavaObject(LIMING_MAP,Student.class));</span><br><span class="line">        System.out.println(LIMING_MAP.toJavaObject(Student.class));</span><br><span class="line">        System.out.println((Student)LIMING_MAP.toJavaObject(<span class="keyword">new</span> TypeReference&lt;Student&gt;()&#123;&#125;));</span><br><span class="line">        System.out.println(LIMING_MAP.toJavaObject(<span class="keyword">new</span> TypeReference&lt;Student&gt;()&#123;&#125;.getType())+<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>基本常用的方法都进行了代码测试，使用过程中可能会出现混淆的情况，但是只要记住了文中的转换图，相信应该会加深印象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="工具" scheme="https://www.larscheng.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="FastJSON" scheme="https://www.larscheng.com/tags/FastJSON/"/>
    
      <category term="JSON" scheme="https://www.larscheng.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>2019.11软考软件设计师归来心得体会及复习备考指南</title>
    <link href="https://www.larscheng.com/sde-summary/"/>
    <id>https://www.larscheng.com/sde-summary/</id>
    <published>2019-11-12T06:34:57.000Z</published>
    <updated>2022-01-02T05:18:26.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><blockquote><p>本文<code>文字量比较大</code>，废话比较多😂。如果感到不适，建议<code>直接阅读各段标题</code>即可<br>干货和建议都在标题栏，📢文末有我整理的<code>2019软件设计师考点思维脑图</code>，以及备考<code>资料</code>大全分享</p></blockquote><blockquote><p><code>2019.12.18更新</code>：昨天得知成绩已出，没想到过了，此处省略1W个哈哈哈😁…(<code>58/62</code>,同志们我们高级见~)</p></blockquote><p>上周六(11.09)参加了软考软件设计师的考试，考试分上午场和下午场。总的来说题型比较常规，但是作为<code>战五渣</code>的我还是很担心能否过线😭。（个人感觉这次是下午简单<code>上午难</code>）</p><a id="more"></a> <p>不过不管结果如何，经过这段时间的备考，已经把自己大学落下的基础知识都从头补了一遍，如今回过头复习数据结构、组成原理、软件工程真的就有一种<code>恍然大悟</code>、<code>原来如此</code>的感觉。复习下来，收获还是很多的。</p><p>话不多说，总结下考试心得和备考指南，<code>希望自己的闲言碎语能给你的复习备考带来帮助</code></p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sde/20191112143014.png" alt="软考知识体系图"></p><h1 id="考试介绍"><a class="markdownIt-Anchor" href="#考试介绍"></a> 考试介绍</h1><blockquote><p>考试全称：全国计算机技术与软件工程专业技术资格考试，分为初、中、高级，详细介绍可以 <a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E6%B0%B4%E5%B9%B3%E8%80%83%E8%AF%95" target="_blank" rel="noopener">百度了解一下</a></p></blockquote><p>软件设计师考试属于软考中的<code>中级考试</code>,一年两次，报名费140元，考试时间一般在<code>5月份和11月份</code>。</p><p>软件设计师考试分<code>上午场</code>和<code>下午场</code>考试，其中上午场：</p><ul><li>考点：综合知识（详细可参考《软件设计师考试冲刺（习题与解答）》）</li><li>题型：75道单项选择，每题1分（<code>其中70~75题为英语完形填空</code>）</li><li>考试时间：9:00-11:30</li><li>及格分数：<code>45及以上</code></li></ul><p>下午场：</p><ul><li>考点：数据流图、UML、ER模型关系模式、算法应用、面向对象编程（<code>包括但不仅限于这5个大类</code>）</li><li>题型：问答题、填空题、代码填空题等，一共6道大题，每题15分，其中第5、6题为选答题，任选其一即可</li><li>考试时间：14:00-16:30</li><li>及格分数：<code>45及以上</code></li></ul><h1 id="考试心得"><a class="markdownIt-Anchor" href="#考试心得"></a> 考试心得</h1><p>说是心得其实就是些爬坑经验，如何准备考试，如何面对考试想必大家比我擅长，随便一位都是身经百战，这里我有几个在复习中发现的问题，作为建议讲给大家。</p><h2 id="1能早考就早考最好不要拖最佳备考时间-大三~大四"><a class="markdownIt-Anchor" href="#1能早考就早考最好不要拖最佳备考时间-大三~大四"></a> <mark>1.能早考就早考！最好不要拖！最佳备考时间 “大三~大四”</mark></h2><p>出名儿要趁早，软考也得趁早，最佳的复习考试时间就是大三到大四，因为软考初级、中级、高级所涉及到的知识点都是大学期间学过的知识。知识点覆盖面广，知识点多而杂，只有在大三这段时间所有的知识你都刚学过，考试大大减少复习的难度。</p><p>就拿<code>中级软件设计师考试内容</code>为例，备考教材中的<code>12个章节的考点</code>正好为为一个<code>计算机科学与技术专业</code>的学生大一到大四所有学过的专业课。</p><p>如果你不幸错过了大三、大四的最佳备考期，<code>别怕！你不是一个人，因为我也是</code>，然后才发现毕业后备考有多痛苦，不说了，说多了都是泪😭😭</p><h2 id="2制定复习计划切勿朝三暮四"><a class="markdownIt-Anchor" href="#2制定复习计划切勿朝三暮四"></a> <mark>2.制定复习计划，切勿朝三暮四</mark></h2><p>软考的考点基本都一个特点：<code>特别多、特别杂、特别容易忘</code></p><p>我是八月中旬（11.9考试）开始复习的，因为白天要上班，所以每天就晚上复习。才开始是下班在家里复习，然后发现效率极差，因为我几乎是<code>复习5分钟玩耍2小时</code>。没办法，第二周开始我就下班后在公司复习（我司几乎<code>没人加班</code>，所以也没人管我）。</p><p>开始在决定在公司复习后，我就详细制定了<a href="https://www.larscheng.com/others/life/">一套复习计划</a>，把复习分成三轮来</p><ul><li>🎈 一轮：基础知识点复习，覆盖面广，知识点杂乱</li><li>🎈 二轮：刷题、通过刷题填补知识漏洞，同时回顾一轮（<code>当时的感觉几乎就是前学后忘</code>）</li><li>🎈 三轮：冲刺</li></ul><p>我因为基础比较差，做计划时一轮复习计划用时45天左右，二轮用一个月，三轮两个礼拜。</p><p>其实当时也只是为了有个复习计划，但是现在回首，没想到自己居然能坚持下来，也是厉害了，这再没考过真实丢人丢到姥姥家😥。</p><p>说这么多，其实就是想说，<strong>既然是备考，就一定得要有复习计划</strong>，我的计划仅仅是一种参考，每个人的复习习惯、学习方式都不同，但是一定要给自己定一个复习计划来约束自己、提醒自己。</p><h2 id="3最好找个队友"><a class="markdownIt-Anchor" href="#3最好找个队友"></a> <mark>3.最好找个队友</mark></h2><p>一个人注定是寂寞的，你想想每天就你一个人深夜复习，多无聊。于是我就怂恿了两个憨憨同事和我一起备考。👯‍👯‍</p><p>其实找个队友，最大的好处就是让你有一个比较好的<code>学习氛围</code>，产生一种竞争，复习竞争。</p><p>当然个体差异，每个人学习习惯不同，<code>此条建议非必选</code></p><h1 id="备考指南"><a class="markdownIt-Anchor" href="#备考指南"></a> 备考指南</h1><p>如果你已经准备好了复习计划、带上了复习的队友，那么我就把我复习时用到的干货全部交予你。</p><h2 id="1考什么"><a class="markdownIt-Anchor" href="#1考什么"></a> <mark>1.考什么？</mark></h2><p>无论你开始复习与否，首先要弄清楚的就是你要考的科目他<code>考什么</code>？下面两个点是最重要的：</p><ul><li>🎈 考试大纲</li><li>🎈 考点分布</li></ul><p>考试大纲直接在网上都可以搜到，一般来说参考上一年的考试大纲就可以，复习前仔细阅读考试大纲是非常有必要的。</p><p>至于各个章节的考点就要通过官方教材作为参考了。</p><h2 id="2教程考点真题足以"><a class="markdownIt-Anchor" href="#2教程考点真题足以"></a> <mark>2.教程+考点+真题足以</mark></h2><p>我用的复习材料就是这三样：</p><ul><li>《软件设计师教程》-第五版（<code>所有知识点，详细！！！多！！！</code>）</li><li>《软件设计师考试冲刺（习题与解答）》（<code>各章节考点梳理及30道历年真题</code>）</li><li>真题套卷（<code>买你喜欢的就好</code>）</li></ul><p>其实买这两本书就够了，其他的书都没必要，第五版教程讲的很多很多、很杂，而《软件设计师考试冲刺（习题与解答）》讲的很精简，他每一章分两部分<code>本章考点归纳</code>和<code>30道真题</code>。</p><p>所以这两本书可以<code>很好的结合</code>：根据<code>《软件设计师考试冲刺（习题与解答）》</code>中的考点去阅读<code>《软件设计师教程》</code>，考点复习完后，回头来完成<code>30道真题</code></p><p>基本我每一章节都是这么个循环过来的</p><p>请记住：<code>《软件设计师教程》</code>你把他当作新华词典就好，千万不要抱着他从头到尾的读，那样是很耗费时间的。</p><p>根据考试的考点有针对性的去看这本书。快速建立知识骨架</p><h2 id="3建立各章节知识体系骨架"><a class="markdownIt-Anchor" href="#3建立各章节知识体系骨架"></a> <mark>3.建立各章节知识体系骨架</mark></h2><p>在我复习的过程中，经常出现一个现象就是<code>前学后忘</code>，一个月前刚过的点，一个国庆节回来忘的一干二净，为此我不免要继续回顾一遍。</p><p>但是这里不是要强调<code>回顾复习</code>，而是要强调<code>建立知识体系骨架</code>，在你一轮复习时，脑海中对于每一个章节建立一个知识体系的简图（你可以像我一样直接<code>画在Process中</code>）。</p><p>一旦你建立了<code>体系骨架</code>后，任何一个知识点遗忘或者做题不确定答案时，你可以<code>第一时间知道</code>这个考点是那个章节，那个部分的知识点。</p><p>就在这个回顾、二次复习的过程中<code>逐渐完善</code>自己的<code>知识体系骨架图</code></p><p>通过这种方式，多而杂的知识点<code>不再是一盘散沙</code>，在你的脑海中他们是<code>分门别类，各有归属的图形</code>。</p><h2 id="4一定要刷真题"><a class="markdownIt-Anchor" href="#4一定要刷真题"></a> <mark>4.一定要刷真题</mark></h2><p>说实话，我一轮复习过完脑袋里还是一片混乱，加上过了一个国庆节，回来之后那些知识点犹如水和面粉在脑袋里一样。</p><p>就酱紫，连续刷了<code>2018-2015的8套真题</code>后，大概到10月底的状态如下：</p><ul><li>🎈 有了一个大体上的考点知识骨架图在脑海里</li><li>🎈 知道常考的题型，和一些惯用套路</li><li>🎈 知道自己已经掌握的部分和未掌握的地方</li></ul><p>效果还是很明显的，做题可以帮你整合知识点，让你查漏补缺。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>以上就是我个人在备考中的一些经历和建议。希望能对您有所帮助。</p><p>下面分享一些总结的知识和用到的一些资源：</p><ul><li>自己总结的<a href="https://www.processon.com/view/link/5d6b8a92e4b0b5cfa9d2aaf2" target="_blank" rel="noopener">2019软件设计师考点体系图</a></li><li>自己总结的<a href="https://www.larscheng.com/tags/%E6%8E%92%E5%BA%8F/">8种排序算法的分析和代码演示</a></li><li>自己总结的<a href="https://www.processon.com/view/link/5d09ee29e4b0955b9363191b#map" target="_blank" rel="noopener">23种设计模式分类和特性介绍</a></li><li><a href="https://www.bilibili.com/video/av19665344/" target="_blank" rel="noopener">B站视频教程</a></li><li><a href="https://pan.baidu.com/s/1HpSICdOgEC571l8YrFysLg" target="_blank" rel="noopener">软件设计师资料包</a>, 提取码：<code>v57u</code> : 内含视频、讲义、教程、真题、模拟题…等等等</li></ul><blockquote><p>哔哔赖赖了半天，还是祝大家备考顺利，一次通过！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本文&lt;code&gt;文字量比较大&lt;/code&gt;，废话比较多😂。如果感到不适，建议&lt;code&gt;直接阅读各段标题&lt;/code&gt;即可&lt;br&gt;
干货和建议都在标题栏，📢文末有我整理的&lt;code&gt;2019软件设计师考点思维脑图&lt;/code&gt;，以及备考&lt;code&gt;资料&lt;/code&gt;大全分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;2019.12.18更新&lt;/code&gt;：昨天得知成绩已出，没想到过了，此处省略1W个哈哈哈😁…(&lt;code&gt;58/62&lt;/code&gt;,同志们我们高级见~)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上周六(11.09)参加了软考软件设计师的考试，考试分上午场和下午场。总的来说题型比较常规，但是作为&lt;code&gt;战五渣&lt;/code&gt;的我还是很担心能否过线😭。（个人感觉这次是下午简单&lt;code&gt;上午难&lt;/code&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.larscheng.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="软考" scheme="https://www.larscheng.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>你还没用过“约定式提交”吗？那你赶紧来补补知识吧</title>
    <link href="https://www.larscheng.com/commit-log/"/>
    <id>https://www.larscheng.com/commit-log/</id>
    <published>2019-11-11T09:49:52.000Z</published>
    <updated>2022-01-02T05:18:26.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>本文为介绍约定式提交，主要从以下几点展开：</p><ul><li><a href="">现状分析</a></li><li><a href="">约定式提交</a><ul><li><a href="">优点</a></li><li><a href="">规范</a></li></ul></li><li><a href="">commitizen</a></li><li><a href="">standard-version</a></li></ul><p>本文对应的github项目地址：<a href="https://github.com/larscheng/Conventional-Commits-Demo" target="_blank" rel="noopener">https://github.com/larscheng/Conventional-Commits-Demo</a></p><a id="more"></a> <h1 id="现状分析"><a class="markdownIt-Anchor" href="#现状分析"></a> 现状分析</h1><p>目前我们的项目在commit时基本上五花八门，各领风骚。虽然不如网上的那些恶搞commit记录，但是这一现象严重影响我们在阅读记录和查找bug原因时的效率。</p><p>我们可以感受下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/commit/20191111163609.png" alt="真实项目commit记录"></p><p>可以对比看看同样按照规范式提交的项目的commit记录</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/commit/20191111165841.png" alt=""></p><blockquote><p>两种commit message的对比很明显说明了情况，统一的提交信息，不仅看起来舒服，而且读起来更舒服</p></blockquote><p>其实已经越来越多的人开始意识到规范化提交的重要性，据我在公司实地采访了一圈，前端团队早已经开始<code>约定式提交</code>，这也可能是因为目前社区中主流的提交规范都是由<a href="https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">Angular提交准则</a>形成。</p><blockquote><p><strong>为了提高开发效率，减少在处理问题时耗费的时间，推荐大家在写完代码，提交时能够使用以下规范：</strong></p></blockquote><ul><li>规范化提交(不一定是文中提到的方式,但无论哪种方式，要做到<code>统一</code>、<code>简明</code>)</li><li>一处变更一次commit(谨防多处、多次修改堆积成一次commit提交，这对后期bug分析将是灾难)</li></ul><h1 id="约定式提交"><a class="markdownIt-Anchor" href="#约定式提交"></a> 约定式提交</h1><p>约定式提交：每次使用<code>git commit</code> 的时候都需要写commit message,如果message的 style是<code>按照固定的模版格式书写</code>，对于后期的维护和编写changelog都有巨大的好处。</p><p>而且现在的很多自动生成changelog的工具，都是建立在约定式提交的基础之上。</p><h2 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h2><ul><li>可读性好，清晰，不必深入看代码即可了解当前commit的作用。</li><li>为 Code Reviewing做准备</li><li>方便跟踪工程历史</li><li>让其他的开发者在运行 git blame 的时候想跪谢</li><li>提高项目的整体质量，提高个人工程素质</li></ul><h2 id="约定式提交规范"><a class="markdownIt-Anchor" href="#约定式提交规范"></a> 约定式提交规范</h2><p><a href="https://conventionalcommits.org/lang/zh-Hans" target="_blank" rel="noopener">约定式提交规范</a>是基于<a href="https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">Angular提交准则</a>形成，提交说明的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;([可选的作用域]): &lt;描述&gt;</span><br><span class="line">// 空一行</span><br><span class="line">[可选的正文]</span><br><span class="line">// 空一行</span><br><span class="line">[可选的脚注]</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;类型&gt;</code>是为了向类库使用者表明其意图，其可选值为：</p><ul><li>feat: 表示新增了一个功能</li><li>fix: 表示修复了一个 bug</li><li>docs: 表示只修改了文档</li><li>style: 表示修改格式、书写错误、空格等不影响代码逻辑的操作</li><li>refactor: 表示修改的代码不是新增功能也不是修改 bug，比如代码重构</li><li>perf: 表示修改了提升性能的代码</li><li>test: 表示修改了测试代码</li><li>build: 表示修改了编译配置文件</li><li>chore: 无 src 或 test 的操作</li><li>revert: 回滚操作</li></ul><p><code>[可选的作用域]</code>: 是为了描述 此次 commit 影响的范围，比如: route, component, utils, build, api, website, docs</p><p><code>&lt;描述&gt;</code>: 此次提交的简短描述</p><p><code>[可选的正文]</code>: 此次提交的详细描述，描述为什么修改，做了什么样的修改，以及开发的思路等等，输入 <code>\n</code> 换行</p><p><code>[可选的页脚]</code>: 主要写下面2种</p><ul><li>Breaking changes: 在可选的正文或脚注的起始位置带有 BREAKING CHANGE: 的提交，表示引入了破坏性变更（这和语义化版本中的 MAJOR 相对应）。</li><li>Closed issues: 罗列此次提交修复的 bug，如 fixes issue #110</li></ul><h1 id="commitizen"><a class="markdownIt-Anchor" href="#commitizen"></a> Commitizen</h1><p><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">Commitizen</a>是一个撰写合格 Commit message 的工具。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>安装命令如下：任选其一</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ npm install -g commitizen       (全局安装)</span><br><span class="line">&gt; $ npm install -d commitizen       (项目安装)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ commitizen init cz-conventional-changelog --save --save-exact</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>ps: 对于<code>非Node项目</code>(java、php…)在执行上一条命令前,需要手动创建<a href="">package.json</a>文件</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ npm init --yes</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>通过如上命令生成<a href="">package.json</a>文件基本格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node ./bin/www"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后，凡是用到<code>git commit</code>命令，一律改为使用<code>git cz</code>。这时，就会出现选项，用来生成符合格式的 Commit message。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/commit/GIF.gif" alt="git-cz"></p><h2 id="standard-version"><a class="markdownIt-Anchor" href="#standard-version"></a> standard-version</h2><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成</p><p><a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener">standard-version</a>就是生成 Change log 的工具</p><h2 id="安装使用"><a class="markdownIt-Anchor" href="#安装使用"></a> 安装使用</h2><p>安装命令如下：任选其一</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ npm i -g standard-version       (全局安装)</span><br><span class="line">&gt; $ npm i -S standard-version       (项目安装)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>生成CHANGELOG：</p><p>在<a href="">package.json</a>中的<code>script</code>中 加入配置:</p><blockquote><p>“scirpt”:{“release”:“standard-version”}</p></blockquote><p>直接执行，即可生成CHANGELOG文件</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ npm run release</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>备注：</p><blockquote><p>生成CHANGELOG的工具很多，<a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli" target="_blank" rel="noopener">conventional-changelog-cli</a>也可以用来生成CHANGELOG，安装使用方法和<code>standard-version</code>类似</p></blockquote><p>本项目的CHANGELOG生成实例：<a href="https://github.com/larscheng/Conventional-Commits-Demo/blob/master/CHANGELOG.md" target="_blank" rel="noopener">CHANGELOG查看</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;本文为介绍约定式提交，主要从以下几点展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;现状分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;约定式提交&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;优点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;commitizen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;standard-version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文对应的github项目地址：&lt;a href=&quot;https://github.com/larscheng/Conventional-Commits-Demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/larscheng/Conventional-Commits-Demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://www.larscheng.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="工具介绍" scheme="https://www.larscheng.com/tags/%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="约定式提交" scheme="https://www.larscheng.com/tags/%E7%BA%A6%E5%AE%9A%E5%BC%8F%E6%8F%90%E4%BA%A4/"/>
    
  </entry>
  
  <entry>
    <title>教你如何看懂UML中的类图及类图中的关系</title>
    <link href="https://www.larscheng.com/uml-class/"/>
    <id>https://www.larscheng.com/uml-class/</id>
    <published>2019-10-29T05:53:14.000Z</published>
    <updated>2022-01-02T05:18:26.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>本文作为设计模式系列的第零篇文章，其主要时教大家如何去看懂设计模式中常见的类图，以及类间的关系。因为无论你从哪里学习设计模式，都避免不了类图的阅读和理解。</p><p>本文主要从以下几个方面介绍：</p><ol><li><strong>UML介绍</strong></li><li><strong>类图介绍</strong></li><li><strong>类与类之间的关系</strong></li></ol><a id="more"></a> <h1 id="uml介绍"><a class="markdownIt-Anchor" href="#uml介绍"></a> UML介绍</h1><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件蓝图的可视化建模语言，1997 年被国际对象管理组织（OMG）采纳为面向对象的建模语言的国际标准。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p>UML集成了Booch，OMT和面向对象程序设计的概念，将这些方法融合为单一的，通用的，并且可以广泛使用的建模语言。UML打算成为可以对并发和分布式系统的标准建模语言。</p><p>UML发展至今在UML2.2种已经定义了14种图示，<strong>本文不对UML展开说明</strong>，感兴趣的同学可以翻一下<code>大学课本《软件工程》</code></p><blockquote><p>本文我们重点讲解在设计模式中用到最多的类图。</p></blockquote><h1 id="类图介绍"><a class="markdownIt-Anchor" href="#类图介绍"></a> 类图介绍</h1><p>类图（Class Diagram）展现了一组对象、接口、协作和它们之间的关系</p><h2 id="类图的组成"><a class="markdownIt-Anchor" href="#类图的组成"></a> 类图的组成</h2><p>类图中通常由 <code>类、接口、协作、关系</code>组成</p><h2 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h2><p>类：是对对象的抽象，具有相似结构、行为和关系的一组对象的描述符，用来描述系统的静态部分。类的图示如下</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/uml/20191028160550.png" alt="Student类"></p><ul><li>最上面是类名称</li><li>中间部分包含类的属性（[可见性]属性名:类型[=默认值] —&gt; <code>+ age:Integer = 1</code>）</li><li>底部部分包含类的方法（[可见性]名称(参数列表)[:返回类型] —&gt; <code>+ eat(String food):String</code>）</li></ul><blockquote><p>其中的<code>可见性</code>表示该属性对类外的元素是否可见<br>包括公有（Public）、私有（Private）、受保护（Protected）和默认（Default）4 种<br>在类图中分别用符号<code>+</code>、<code>-</code>、<code>#</code>、<code>~</code>表示。</p></blockquote><h2 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h2><p>接口（Interface）<code>是一种特殊的类</code>，它具有类的结构但不可被实例化，只可以被子类实现。它包含抽象操作，但不包含属性。它描述了类或组件对外可见的动作。在 UML 中，接口有两种表示方法，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/uml/20191028164413.png" alt="Person接口两种表示"></p><h2 id="关系"><a class="markdownIt-Anchor" href="#关系"></a> 关系</h2><p>这里以图形接口、长方形类、圆形类的类图为例，长方形和圆形都实现了图形接口，他们之间存在<code>实现关系</code>,类图如下：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/uml/20191028165559.png" alt="实现"></p><p>从图中可以发现，长方形类和圆形类都通过<code>虚线空心箭头</code>指向图形接口，这在类图中表示他们存在实现关系。</p><h1 id="类与类之间的关系"><a class="markdownIt-Anchor" href="#类与类之间的关系"></a> 类与类之间的关系</h1><p>根据类与类之间的耦合度从弱到强排列，UML 中的类图有以下几种关系：<br><code>依赖关系</code>、<code>关联关系</code>、<code>聚合关系</code>、<code>组合关系</code>、<code>泛化关系</code>和<code>实现关系</code>。</p><h2 id="依赖关系"><a class="markdownIt-Anchor" href="#依赖关系"></a> 依赖关系</h2><p>对象之间最弱的一种关联方式，是临时性的关联。代码中一般指由局部变量、函数参数、返回值建立的对于其他对象的调用关系以及对静态方法的调用。一个类调用被依赖类中的某些方法而得以完成这个类的一些职责。在类图使用<code>带箭头的虚线</code>表示依赖，箭头从使用类指向被依赖的类。</p><p>如图所示，程序员与电脑的类图中，程序员想要写代码，需要用到电脑，程序员与电脑之间存在<code>依赖关系</code></p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/uml/20191028182715.png" alt="依赖"></p><h2 id="关联关系"><a class="markdownIt-Anchor" href="#关联关系"></a> 关联关系</h2><p>对象之间一种引用关系，比如客户类与订单类之间的关系。这种关系通常使用类的属性表达。<br>关联又分为<code>一般关联</code>、<code>聚合关联</code>与<code>组合关联</code>。</p><h3 id="一般关联"><a class="markdownIt-Anchor" href="#一般关联"></a> 一般关联</h3><p>一般关联在类图使用<code>带箭头或者没有箭头的实线</code>表示，箭头从使用类指向被关联的类。可以是单向和双向，也可以没有箭头。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/uml/20191028185716.png" alt="一般关联"></p><p>如图所示，单向关联中，可以看到Student类有home属性，且Student类引用了Home类</p><p>在双向关联中，不难发现Student类引用了Teacher类，Teacher类也相应的引用了Student类</p><h3 id="聚合关联"><a class="markdownIt-Anchor" href="#聚合关联"></a> 聚合关联</h3><p>聚合关系是一种特殊的关联关系，表示has-a的关系，是一种不稳定的包含关系，聚合关系强调的是整体和部分的关系，其中<code>部分可以脱离整体而存在</code>。<br>例如学校有老师，而老师脱离学校后仍可以教授学生。</p><p>在UML类图中聚合用<code>带空心菱形的直线</code>表示，其中菱形指向整体，学校与老师的类图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/uml/20191028190745.png" alt="聚合关联"></p><h3 id="组合关联"><a class="markdownIt-Anchor" href="#组合关联"></a> 组合关联</h3><p>组合关系也是一种特殊的关联关系，表示contains-a的关系，它与聚合关系很像，也是强调整体与部分的关系，不同的是<code>部分无法脱离整体存在</code>。</p><p>比如我们的身体有心脏、大脑、四肢等重要器官，对于一个健康的身体而言，任何一个器官都不能少</p><p>在UML类图中聚合用<code>带实心菱形的直线</code>表示，其中菱形指向整体，身体与心脏的类图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/uml/20191028191449.png" alt="组合关联"></p><h2 id="泛化关系"><a class="markdownIt-Anchor" href="#泛化关系"></a> 泛化关系</h2><p>泛化关系在Java中也叫作继承关系，表示is-a的关系，是对象之间耦合度最大的一种关系，子类继承父类的所有细节。</p><p>在UML中我们用<code>带空心三角形的直线</code>来表示,其中空心三角指向父类，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/uml/20191028192818.png" alt="泛化关系"></p><h2 id="实现关系"><a class="markdownIt-Anchor" href="#实现关系"></a> 实现关系</h2><p>接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>实现关系上文也有讲到，在 UML 类图中，实现关系使用<code>带空心三角箭头的虚线</code>来表示，箭头从实现类指向接口。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>UML作为一个严谨的软件建模语言，经过20多年的发展已经成为业界的标准建模语言，大家接触它最多的时候应该时大学中，反倒工作中很少用到。</p><p>但是关于UML的基本常识和基本使用是作为一个开发人员的必修课，就像在学习设计模式时，你首先就得学会读懂类图，能够画出类图。</p><p>相信读完本文，类图已经难不倒你了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;本文作为设计模式系列的第零篇文章，其主要时教大家如何去看懂设计模式中常见的类图，以及类间的关系。因为无论你从哪里学习设计模式，都避免不了类图的阅读和理解。&lt;/p&gt;
&lt;p&gt;本文主要从以下几个方面介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;UML介绍&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类图介绍&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类与类之间的关系&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://www.larscheng.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.larscheng.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="UML" scheme="https://www.larscheng.com/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>设计模式总览</title>
    <link href="https://www.larscheng.com/dp-overview/"/>
    <id>https://www.larscheng.com/dp-overview/</id>
    <published>2019-10-29T05:49:58.000Z</published>
    <updated>2022-01-02T05:18:26.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>前段时间，跟着<code>Gang of Four</code>学习了设计模式，虽然23种设计模式都过了一遍，<code>好像懂了但是好像又有些不明白</code>。刚好在软考备考时设计模式也是考点。故此，通过这一次的再复习索性整理出设计模式的一套学习笔记，<code>笔记中会通过生活中的例子详细讲解各种常用模式，并利用Java代码实现。</code></p><blockquote><p>本文主要通过以下几点来对设计模式进行总结：</p></blockquote><ol><li><strong>设计模式的背景</strong></li><li><strong>设计模式的概念</strong></li><li><strong>设计模式的的7大原则</strong></li><li><strong>设计模式的的4大要素</strong></li><li><strong>常见的23种设计模式</strong></li></ol><a id="more"></a> <h1 id="设计模式的背景"><a class="markdownIt-Anchor" href="#设计模式的背景"></a> 设计模式的背景</h1><p><code>设计模式</code>这个术语最初并不是出现在软件设计中，而是被用于<code>建筑领域</code>的设计中。</p><p>直到<code>1990年</code>，软件工程界才开始研讨<code>设计模式</code>的话题，后来召开了多次关于设计模式的研讨会。</p><p>在 <code>1994年</code>，由 <code>Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides</code> 四人合作出版了<code>《设计模式：可复用面向对象软件的基础》</code>（Design Patterns - Elements of Reusable Object-Oriented Software） 一书，该书<code>首次</code>提到了软件开发中设计模式的概念，并收录了23种设计模式。</p><h1 id="设计模式的概念"><a class="markdownIt-Anchor" href="#设计模式的概念"></a> 设计模式的概念</h1><p>首先初次接触设计模式的同学一定要牢记</p><blockquote><p>设计模式不是某种语言，不是某种框架，更不是什么架构模式，它只是前辈们爬了无数坑、秃了头总结出来的代码设计经验！！！</p></blockquote><p>其概念如下：</p><p>软件设计模式（Software Design Pattern），又称<code>设计模式</code>，是一套被反复使用、多数人知晓的、经过分类编目的、<code>代码设计经验的总结</code>。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的<code>解决方案</code>。也就是说，它是解决特定问题的<code>一系列套路</code>，是前辈们的代码设计经验的总结，具有一定的<code>普遍性</code>，可以<code>反复使用</code>。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p><p>简单概括可得出如下要点：</p><ul><li>代码设计经验的总结</li><li>通用解决方案</li><li>解决问题的套路</li><li>反复使用</li><li>提高重用性、可读性、可靠性</li></ul><h1 id="常见的23种设计模式"><a class="markdownIt-Anchor" href="#常见的23种设计模式"></a> 常见的23种设计模式</h1><blockquote><p>根据各个模式的作用和目的可划分为<code>创建型模式、结构型模式和行为型模式</code> 3 种。</p></blockquote><table><thead><tr><th>模式类型</th><th>模式</th></tr></thead><tbody><tr><td>创建型模式（5）<br><code>对象怎么来:用于创建对象</code></td><td>● <a href="">工厂模式（Factory Pattern）</a><br> ● <a href="">抽象工厂模式（Abstract Factory Pattern）</a><br>● <a href="">单例模式（Singleton Pattern）</a><br>● <a href="">建造者模式（Builder Pattern）</a><br>● <a href="">原型模式（Prototype Pattern）</a></td></tr><tr><td>结构型模式（7）<br><code>对象和谁有关：用于处理类或对象的组合</code></td><td>● <a href="">适配器模式（Adapter Pattern）</a><br> ● <a href="">桥接模式（Bridge Pattern）</a><br>● <a href="">xxx过滤器模式（Filter、Criteria Pattern）</a><br>● <a href="">组合模式（Composite Pattern）</a><br>● <a href="">装饰器模式（Decorator Pattern）</a><br>● <a href="">外观模式（Facade Pattern）</a><br>● <a href="">享元模式（Flyweight Pattern）</a><br>● <a href="">代理模式（Proxy Pattern）</a></td></tr><tr><td>行为型模式（11）<br> <code>对象与对象在干嘛：用于描述类、对象相互交互的责任分配</code></td><td>● <a href="">责任链模式（Chain of Responsibility Pattern）</a><br> ● <a href="">命令模式（Command Pattern）</a><br>● <a href="">解释器模式（Interpreter Pattern）</a><br>● <a href="">迭代器模式（Iterator Pattern）</a><br>● <a href="">中介者模式（Mediator Pattern）</a><br>● <a href="">备忘录模式（Memento Pattern）</a><br>● <a href="">观察者模式（Observer Pattern）</a><br>● <a href="">状态模式（State Pattern）</a><br>● <a href="">xxx空对象模式（Null Object Pattern）</a><br>● <a href="">策略模式（Strategy Pattern）</a><br>● <a href="">模板模式（Template Pattern）</a><br>● <a href="">访问者模式（Visitor Pattern）</a></td></tr></tbody></table><blockquote><p>根据模式的操作对象来分（类或对象），可分为<code>类模式和对象模式</code>2种。</p></blockquote><ul><li>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。<ul><li>工厂方法、（类）适配器、模板方法、解释器属于类模式。</li></ul></li><li>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。<ul><li>除了以上 4 种类模式，其他的都是对象模式。</li></ul></li></ul><h1 id="设计模式的的7大原则"><a class="markdownIt-Anchor" href="#设计模式的的7大原则"></a> 设计模式的的7大原则</h1><p>你可能没有听过设计模式的原则，但是想必你一定知道<code>面向对象设计的原则</code>。如果都是第一次听说，那么接着往下看</p><p>在设计模式中，所有的模式都是基于这些设计原则来解决问题</p><ol><li><strong>依赖倒转原则（Dependence Inversion Principle）</strong><ul><li>高层模块（稳定）不应该依赖低层模块（变化），二者都依赖抽象（稳定）。抽象(稳定)不应该依赖于实现细节(变化),实现细节应该依赖于抽象(稳定)</li></ul></li><li><strong>开闭原则（Open Close Principle）</strong><ul><li>充分发挥面向对象，对现实事物进行抽象化，实现对扩展开放，对修改关闭，<code>程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果</code></li></ul></li><li><strong>单一职责原则（Single responsibility principle）</strong><ul><li><code>一个类因其他变化的原因只有一个职责</code>。多个职责会引起耦合，牵一发动全身，此原则的核心是解耦和增强内聚性。</li></ul></li><li><strong>里氏代换原则（Liskov Substitution Principle）</strong><ul><li>实现抽象化的具体步骤规范，<code>子类可以当作父类用，并拥有自身独有的行为</code></li></ul></li><li><strong>接口隔离原则（Interface Segregation Principle）</strong><ul><li>使用多个隔离的接口<code>优于</code>单个重度耦合接口，降低依赖，降低耦合</li></ul></li><li><strong>迪米特法则，又称最少知道原则（Demeter Principle）</strong><ul><li>一个实体应当尽可能少的与其他实体产生联系，<code>防止过度耦合</code></li></ul></li><li><strong>合成复用原则（Composite Reuse Principle）</strong><ul><li>尽量使用合成/聚合的方式，<code>而不是使用继承</code>。</li></ul></li></ol><h1 id="设计模式的的四大要素"><a class="markdownIt-Anchor" href="#设计模式的的四大要素"></a> 设计模式的的四大要素</h1><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：</p><blockquote><p>模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等</p></blockquote><p>其中最关键的元素包括以下 4 个主要部分。</p><ol><li><strong>模式名称（PatternName）</strong><ul><li>对于一个模式进行命名，模式名称有助于我们理解和记忆该模式计。</li></ul></li><li><strong>问题（Problem）</strong><ul><li>问题描述了该模式的应用环境。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</li></ul></li><li><strong>解决方案（Solution）</strong><ul><li>针对问题的解决方案，其内容给出了设计的各个组成部分，它们之间的关系、职责划分和协作方式</li></ul></li><li><strong>效果（Consequence）</strong><ul><li>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。</li></ul></li></ol><h1 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h1><blockquote><p>本文是根据<code>Gang of Four</code>书中的23中设计模式展开讨论的，实际上，经过了近25年的发展，设计模式已经不仅仅局限于这23种。</p></blockquote><p>设计模式是前辈们总结的优秀代码设计经验，是无法依次完全掌握的，其中很多都是需要结合实际场景的，需要我们先学习这种思想，学习前辈们优秀的案例，逐渐培养自己对代码的思维模式，当你遇到相应的场景时，能够知道通过何种设计模式进行优化，通过这种理解加应用的过程，就是对设计模式的逐渐掌握。</p><p>学习新知识都是需要循序渐进，当你了解了这23种典型的设计模式，并对它有一定理解后，相信无论是在日常开发，还是CodeReview时都可以设计和写出优秀的代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;前段时间，跟着&lt;code&gt;Gang of Four&lt;/code&gt;学习了设计模式，虽然23种设计模式都过了一遍，&lt;code&gt;好像懂了但是好像又有些不明白&lt;/code&gt;。刚好在软考备考时设计模式也是考点。故此，通过这一次的再复习索性整理出设计模式的一套学习笔记，&lt;code&gt;笔记中会通过生活中的例子详细讲解各种常用模式，并利用Java代码实现。&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要通过以下几点来对设计模式进行总结：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;设计模式的背景&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计模式的概念&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计模式的的7大原则&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计模式的的4大要素&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常见的23种设计模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://www.larscheng.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.larscheng.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>萌新入门Github请看这里，学不会远程教</title>
    <link href="https://www.larscheng.com/github-study/"/>
    <id>https://www.larscheng.com/github-study/</id>
    <published>2019-10-14T05:11:02.000Z</published>
    <updated>2022-01-02T05:18:26.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="http://dingyue.nosdn.127.net/JcpLscAwNgVArlscUVGqvcI53bmIQlpy9TID6kp1NFk1d1540607416695compressflag.jpg" alt=""></p><h1 id="一些废话"><a class="markdownIt-Anchor" href="#一些废话"></a> 一些废话</h1><blockquote><p>本文的主旨是为初次接触Github的同学提供一个入门的演示，如果你已经是Github老鸟，可以忽略本文哦，另外本文只是抛砖引玉，其实最好的教程是官方文档！！！</p></blockquote><ul><li><a href="https://github.com/" target="_blank" rel="noopener">Github官网</a></li><li><a href="https://guides.github.com/activities/hello-world/" target="_blank" rel="noopener">Github使用指南-Web页面</a></li><li><a href="https://help.github.com/cn/enterprise/2.18/user" target="_blank" rel="noopener">Github官方中文版文档-ALL</a></li></ul><a id="more"></a> <p>Github目前虽然十分火热，但是对于第一次接触这一类产品的同学来说，上手还是有一定难度的</p><blockquote><p>本文就聊一聊如何使用Github，相信读完本文，你一定可以掌握以下几点：</p></blockquote><ul><li>Github是什么</li><li>Github可以做什么</li><li>Git与Github的关系</li><li>本地项目上传至Github</li><li>克隆远程仓库修改后提交</li><li>举一反三Github、Gitee、Coding</li></ul><h1 id="github是什么"><a class="markdownIt-Anchor" href="#github是什么"></a> Github是什么</h1><blockquote><p>全球最大的同性交友平台—&gt;全球最大的程序猿交流平台—&gt;一个神奇的地方</p></blockquote><p>Github是目前最火的网站之一，在这里很多的用户都是从事程序相关工作，又被戏称为<code>全球最大的程序猿交流平台</code>, 从最初仅活跃在程序员圈子中发展到现在各行各业的使用，经常用Github你就会发现，这真的是个神奇的地方，这里有很多五花八门，有趣的仓库。</p><p>那么Github到底是什么呢？<br>Wiki 百科上是这么说的</p><blockquote><p>GitHub 是一个共享虚拟主机服务，用于存放使用Git版本控制的软件代码和内容项目。它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner 使用Ruby on Rails编写而成。</p></blockquote><p>官方是这么说的</p><blockquote><p>GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.</p></blockquote><p>用我的<code>工地英语</code>翻译过来意思就是</p><blockquote><p>GitHub是用于版本控制和协作的代码托管平台。它使您和其他人可以在任何地方共同处理项目。</p></blockquote><p>虽然官方概括的很精简，但是过于官方，以至于我也一脸懵*，不过我们脑海里可以对她有以下几点印象：</p><ul><li>存放代码、存放项目</li><li>版本控制</li><li>托管平台</li><li>共同处理项目</li></ul><h1 id="github可以做什么"><a class="markdownIt-Anchor" href="#github可以做什么"></a> Github可以做什么</h1><p>在了解了Github是什么后，如果你以为github就是个存代码的地方那你就太年轻了，你完全想不到全球网民的脑洞有多强大，Github都快玩出了花。</p><p>除了最基础的可用来<code>存储和管理项目工程</code>外，Github还可以做很多其他事情：</p><ul><li>网站</li><li>个人博客</li><li>说明文档</li><li>管理配置文件</li><li>收集资料</li><li>面试简历</li><li>托管编程环境</li><li>写书、写小说</li><li>资源共享</li><li>招聘信息发布</li><li>老师布置作业，学生交作业</li><li>公益活动</li><li>等等等…五花八门千奇百怪</li></ul><h1 id="git与github的关系"><a class="markdownIt-Anchor" href="#git与github的关系"></a> Git与Github的关系</h1><p>从GitHub的介绍上我们不难看出，GitHub托管的是Git代码仓库。</p><blockquote><p>这时候可能又有同学想问“这个Git又是什么鬼？他和Github又有什么关系”</p></blockquote><p>Git是一个分布式的版本控制系统，可以对项目进行版本管理。而GitHub可以托管各种git库，并提供一个web界面</p><p>Git只是一个源代码管理工具（<code>管理代码的版本</code>） 并不能实现代码的共享。<br>而我们将本地的Git库（<code>使用Git版本控制的软件代码和内容项目</code>）上传到Github上，通过GitHub实现共享，达到不同之间的协同工作</p><p>所以在正式使用Github之前，需要先学会使用Git管理项目工程，即学会版本控制</p><blockquote><p>Git的命令大全和原理性知识本文不做拓展，大家如有兴趣可以去<a href="https://git-scm.com/docs" target="_blank" rel="noopener">Git官方文档</a>翻阅学习哦</p></blockquote><h1 id="本地项目上传至github"><a class="markdownIt-Anchor" href="#本地项目上传至github"></a> 本地项目上传至Github</h1><p>在开始本节介绍前呢需要大家准备以下环境和账号：</p><ul><li>Github账号</li><li>本地电脑安装Git</li></ul><h3 id="在github中创建新的仓库"><a class="markdownIt-Anchor" href="#在github中创建新的仓库"></a> 在Github中创建新的仓库</h3><p>直接进入创建仓库页面：<a href="https://github.com/new" target="_blank" rel="noopener">https://github.com/new</a></p><p>或者通过按钮进入创建页面：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/20191014111622.png" alt="新建仓库"></p><p>具体的创建步骤如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/20191014111956.png" alt="新建仓库"></p><p>创建成功后会跳转到如下页面：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/20191014112407.png" alt="GithubStudy"></p><p>仔细看图上，不难发现，他已经告诉你接下来该怎么做，如何创建一个新的存储库（<code>create a new repository on the command line</code>）</p><p>下面我们按照他给的方式，来试一下看看效果~</p><h2 id="配置本地git环境"><a class="markdownIt-Anchor" href="#配置本地git环境"></a> 配置本地Git环境</h2><blockquote><p>如果是第一次使用 Git，你需要设置署名和邮箱</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;用户名&quot;</span><br><span class="line">$ git config --global user.email &quot;电子邮箱&quot;</span><br></pre></td></tr></table></figure><p>设置成功后在Github提交记录中就会显示本次提交人的信息</p><h2 id="创建本地项目"><a class="markdownIt-Anchor" href="#创建本地项目"></a> 创建本地项目</h2><p>创建一个用于托管在Github中的项目工程</p><h3 id="创建本地文件夹"><a class="markdownIt-Anchor" href="#创建本地文件夹"></a> 创建本地文件夹</h3><p>创建一个名为 <code>GithubStudy</code> 的文件夹</p><h3 id="本地git仓库初始化"><a class="markdownIt-Anchor" href="#本地git仓库初始化"></a> 本地git仓库初始化</h3><p>进入 <code>GithubStudy</code> 文件夹 右键打开<code>git bash here</code>，执行如下命令，进行本地git仓库初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/gitinit.gif" alt="git init"></p><p>完成后在当前项目里面会有一个.git文件夹 是用来记录当前本地仓库（如果看不到需要勾上显示隐藏文件）</p><h3 id="创建文件"><a class="markdownIt-Anchor" href="#创建文件"></a> 创建文件</h3><p>在文件夹下创建一个<code>README.md</code>，其内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 1.学习使用Github：本地项目上传至Github</span><br></pre></td></tr></table></figure><h3 id="添加到暂存区"><a class="markdownIt-Anchor" href="#添加到暂存区"></a> 添加到暂存区</h3><p>此时把将项目的修改全部添加到暂存区 ，意思就是保存此次的所有修改</p><p>在<code>GithubStudy</code> 文件夹 右键打开<code>git bash here</code>，执行如下命令<code>git add .</code>(注意有点…)</p><blockquote><p>ps: <code>git add .</code>：添加全部文件到暂存区，<code>git add README.md</code>：指定文件添加到暂存区</p></blockquote><h3 id="提交到本地仓库"><a class="markdownIt-Anchor" href="#提交到本地仓库"></a> 提交到本地仓库</h3><p>把当前暂存区添加的文件提交到本地仓库（提交后就表示创建了一个代码的版本）</p><p>在<code>GithubStudy</code> 文件夹 右键打开<code>git bash here</code>，执行如下命令 <code>git commit -m '提交日志'</code></p><p>提交完成后就会把代码提交到.git文件夹（本地git仓库） 并且会自动创建一个代码的版本</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/20191014111059.png" alt="git commit"></p><h3 id="指定远程服务器仓库"><a class="markdownIt-Anchor" href="#指定远程服务器仓库"></a> 指定远程服务器仓库</h3><p>继续在<code>git bash here</code>中执行命令:<code>git remote add origin {项目仓库地址}</code></p><p>注意：这里的<code>项目仓库地址</code>是你在github创建完新仓库时自动生成的，比如我刚刚创建后生成的是：<code>https://github.com/larscheng/GithubStudy.git</code></p><p>执行完上述命令后，远程仓库的地址就指定好了，我们随时都可以推送项目</p><h2 id="推送至github"><a class="markdownIt-Anchor" href="#推送至github"></a> 推送至Github</h2><p>所有准备工作都已完成，现在就需要我们将项目推送至GitHub，你也可以理解为上传。</p><p>在<code>GithubStudy</code> 文件夹下右键打开<code>git bash here</code>，执行如下命令 <code>git push -u origin master</code></p><p>注：初次提交时，会需要验证你的Github用户名和密码，根据命令提示输入后即可完成推送</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/20191014114249.png" alt="推送"></p><p>此时你再进入Github刚刚创建的仓库中，刷新页面后，看到的应该是如下的样子：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/20191014114413.png" alt="推送成功"></p><h2 id="在线修改项目并提交"><a class="markdownIt-Anchor" href="#在线修改项目并提交"></a> 在线修改项目并提交</h2><p>这里，我在项目中创建了一个新的文件夹名叫<code>update.txt</code> 修改操作可以参考如下动态图</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/updata.gif" alt="新建文件"></p><h2 id="拉取最新版本"><a class="markdownIt-Anchor" href="#拉取最新版本"></a> 拉取最新版本</h2><p>此时我们本地的项目已经不是最新的了，如何进行版本同步，获取最新的代码呢，执行如下命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/20191014115406.png" alt="git pull"></p><p>执行成功后，本地代码即为最新咯</p><h1 id="克隆远程仓库修改后提交"><a class="markdownIt-Anchor" href="#克隆远程仓库修改后提交"></a> 克隆远程仓库修改后提交</h1><p>这一节，主要演示的是：当你已有一个github项目，如何将它克隆至本地，修改后推送至github</p><p>这里还是以<code>GithubStudy</code>项目为演示,在Github下该仓库的首页中复制仓库地址：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/20191014124046.png" alt="GithubStudy主页"></p><h2 id="克隆"><a class="markdownIt-Anchor" href="#克隆"></a> 克隆</h2><p>新建文件夹<code>GithubStudyClone</code></p><p>在<code>GithubStudyClone</code> 文件夹下右键打开<code>git bash here</code>，执行如下命令 <code>git clone {项目仓库地址}</code></p><p>注意：这里的<code>项目仓库地址</code>是你在github创建完新仓库时自动生成的，比如我创建后生成的是：<code>https://github.com/larscheng/GithubStudy.git</code>，每个人的地址都会有所不同，记得替换哦</p><p>执行结果如下：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/clone.gif" alt="clone"></p><h2 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h2><p>修改文件<code>README.md</code>，在原有内容中加入如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 2.学习使用Github：克隆远程仓库修改后提交</span><br></pre></td></tr></table></figure><h2 id="添加提交推送"><a class="markdownIt-Anchor" href="#添加提交推送"></a> 添加+提交+推送</h2><p>修改完成后，执行如下三条命令，即可推送至GitHub</p><p>在<code>GithubStudyClone/GithubStudy</code> 目录下右键打开<code>git bash here</code>，依次执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &apos;修改README&apos;</span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/githubstudy/20191014125022.png" alt=""></p><blockquote><p>此时进入GitHub中查看<code>GithubStudy</code>,你会发现我们刚刚的修改已经生效</p></blockquote><h1 id="对比"><a class="markdownIt-Anchor" href="#对比"></a> 对比</h1><p>上面对于Github的入门使用已经基本介绍完了，Github目前以被微软收入囊中，对于国内用户来说由于网络的原因访问Github时往往不是那么的顺畅。</p><p>那么国内是否有Github同类型的产品呢？答案当然是有的</p><ul><li>码云(<a href="http://gitee.com" target="_blank" rel="noopener">gitee.com</a>)是 <a href="http://OSCHINA.NET" target="_blank" rel="noopener">OSCHINA.NET</a> 推出的代码托管平台,支持 Git 和 SVN,提供免费的私有仓库托管。</li><li>Coding 是一个面向开发者的云端开发平台，目前提供代码托管，运行空间，质量控制，项目管理等功能。</li></ul><p>这两款产品作为代码托管平台来说与Github几乎一样，都是优秀的托管平台。</p><p>如果你烦恼于GitHub的访问限制，那完全可以考虑使用Gitee、或者Coding</p><blockquote><p>所以问题来了，产品都换了，那怎么用呢？ GitHub我都是才学会，又要学Coding、Gitee</p></blockquote><p>不用担心，操作一摸一样，你完全可以用上面Github讲解的操作流程来使用Gitee、Coding。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><blockquote><p>本文不是Git的安装教程、也不是原理分析文章，本文旨在为初次接触Github的同学提供一个容易上手的中文演示</p></blockquote><p>本文中也存在一些难点和坑点，例如</p><ul><li>Git命令的使用</li><li>Github身份验证</li><li>Github的其他功能使用</li><li>等等…</li></ul><p>其实大家不用害怕，东西虽然多，但是都很好理解，当你遇到问题时要学会运用搜索引擎、学会阅读官方文档。</p><p>当然如果有问题也可以留言或者邮件联系我哦</p><blockquote><p>如果阅读完本文后，你已经基本掌握了Github的使用，这里为大家提供一些高阶操作的文章：</p></blockquote><ul><li><a href="http://www.ruanyifeng.com/blog/2018/10/git-internals.html" target="_blank" rel="noopener">Git原理入门-阮一峰</a></li><li><a href="https://www.jianshu.com/p/360bdda5157f" target="_blank" rel="noopener">Git常用命令详解</a></li><li><a href="https://help.github.com/cn/enterprise/2.18/user" target="_blank" rel="noopener">Github官方中文版文档-ALL</a></li><li><a href="https://www.larscheng.com/create-blog/">基于hexo和coding免费搭建个人博客网站-larscheng</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dingyue.nosdn.127.net/JcpLscAwNgVArlscUVGqvcI53bmIQlpy9TID6kp1NFk1d1540607416695compressflag.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一些废话&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一些废话&quot;&gt;&lt;/a&gt; 一些废话&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本文的主旨是为初次接触Github的同学提供一个入门的演示，如果你已经是Github老鸟，可以忽略本文哦，另外本文只是抛砖引玉，其实最好的教程是官方文档！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.github.com/activities/hello-world/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github使用指南-Web页面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/cn/enterprise/2.18/user&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github官方中文版文档-ALL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="教程" scheme="https://www.larscheng.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="GitHub" scheme="https://www.larscheng.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的工作原理探究</title>
    <link href="https://www.larscheng.com/hexo-principle/"/>
    <id>https://www.larscheng.com/hexo-principle/</id>
    <published>2019-09-26T08:34:27.000Z</published>
    <updated>2022-01-02T05:18:26.504Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>原文作者：赵彪<br>原文地址：<a href="http://coderunthings.com/2017/08/20/howhexoworks/" target="_blank" rel="noopener">《hexo是怎么工作的》</a></p></blockquote><p>你可能用过hexo(或者jekyll)来搭建自己的博客网站。通常我们在安装、配置完成hexo之后，借助hexo，一般通过以下步骤，就可以完成一篇博客的编写及发布，真是方便极了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init           // 创建一个新的hexo项目</span><br><span class="line">$ hexo new mynewblog  // 新建一篇标题为mynewblog的文章</span><br><span class="line">$ hexo server         // 为hexo在本地起一个http server, 然后通过浏览器访问博客</span><br><span class="line">$ hexo generate       // 生成将要发布的博客网站包含html在内的静态资源</span><br><span class="line">$ hexo deploy         // 将generate的结果发布到_config.yml中指定的仓库</span><br></pre></td></tr></table></figure><p>可是，从hexo init到hexo deploy中间发生了什么呢？为了搞清楚这一过程、理解hexo的工作原理，本文将试着回答以下问题:</p><ul><li>命令行中的hexo是什么</li><li>hexo是怎么将我们写好的markdown转换成html的</li><li>hexo插件是如何工作的</li><li>本地的hexo项目和git page有什么关系</li></ul><p>本文<strong>不是</strong>:</p><ul><li>hexo的安装、使用教程</li><li>git page的使用教程</li></ul><h1 id="命令行中的hexo是什么"><a class="markdownIt-Anchor" href="#命令行中的hexo是什么"></a> 命令行中的hexo是什么?</h1><p><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexo</a>项目在github上已经有超过17k的star了，但是你知道吗，日常我们在命令行”操作”hexo时所输入的<strong>hexo</strong>(例如hexo init)并不是这个17k个star的项目! 是的，我们在命令行中所输入的”hexo”实际是<a href="https://github.com/hexojs/hexo-cli/tree/master/lib" target="_blank" rel="noopener"><strong>hexo-cli</strong></a>项目，该项目在github上的star还不足50个。</p><blockquote><p>hexo可以粗略分为三个子项目，分别是:</p><ul><li>hexo-cli</li><li>hexo (下文中用hexo core来指代)</li><li>hexo plugins</li></ul><p>其中hexo plugins不是指某一个单独的项目，而是泛指所有的hexo plugin项目。</p><p>请看下图:<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/butterfly/20190926162927.png" alt=""><br>让我们结合这张图来大致看看这三个项目的作用(下面的链接均是指向Github中相关的源码):</p><ul><li><dl><dt>hexo-cli</dt><dd>hexo命令行项目，作用是:</dd></dl><ol><li>启动hexo命令(进程)，及其参数<a href="https://github.com/hexojs/hexo-cli/blob/5e0969ffa64dec427428a245ab2d65beaf23123b/lib/hexo.js#L49" target="_blank" rel="noopener">解析</a>机制。每次我们输入’hexo xxx’命令后，都会通过node调用hexo-cli中的<a href="https://github.com/hexojs/hexo-cli/blob/5e0969ffa64dec427428a245ab2d65beaf23123b/lib/hexo.js#L13" target="_blank" rel="noopener">entry函数</a>(比如，可以把’hexo init’视为’node hexo-cli/entry.js init’)</li><li>实现hexo命令的<a href="https://github.com/hexojs/hexo-cli/tree/master/lib/console" target="_blank" rel="noopener">三个初始参数(功能)</a>: init / version / help</li><li><a href="https://github.com/hexojs/hexo-cli/blob/5e0969ffa64dec427428a245ab2d65beaf23123b/lib/hexo.js#L85" target="_blank" rel="noopener">加载</a>hexo核心模块，并<a href="https://github.com/hexojs/hexo-cli/blob/5e0969ffa64dec427428a245ab2d65beaf23123b/lib/hexo.js#L47" target="_blank" rel="noopener">初始化</a></li></ol></li><li><dl><dt>hexo core</dt><dd>hexo核心，他的主要作用如下:</dd></dl><ol><li>实现了hexo功能<a href="https://github.com/hexojs/hexo/blob/master/lib/hexo/index.js#L59" target="_blank" rel="noopener">扩展对象</a></li><li>实现了hexo核心功能, 如new, publish, generate等（其实是一些hexo插件，下文中会详细分析）</li></ol></li><li><dl><dt>hexo plugins</dt><dd>指一些能够扩展hexo的插件。插件可以按功能分成两类:</dd></dl><ol><li>扩展hexo命令的参数，如<a href="https://github.com/hexojs/hexo-server" target="_blank" rel="noopener">hexo-server</a>(安装这个插件以后才能使用hexo server命令)</li><li>扩展hexo解析文件的”能力”，如增加jade模版解析功能的<a href="https://github.com/hexojs/hexo-renderer-jade" target="_blank" rel="noopener">hexo-render-jade</a>插件</li></ol></li></ul></blockquote><h1 id="从markdown到html的旅程"><a class="markdownIt-Anchor" href="#从markdown到html的旅程"></a> 从markdown到html的旅程</h1><p>简单来说，hexo中，从markdown到html的generate过程中做了两件事：</p><ol><li>模板渲染</li><li>模板渲染</li></ol><p>是的，就是这样，就是两次模板渲染。只不过两次渲染的输入、渲染模板的引擎、输出不一样。此处应该有一个表格：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/butterfly/20190926162956.png" alt=""><br>还得有一张图:<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/butterfly/20190926163010.png" alt=""></p><blockquote><p>对上面表格和图的说明:</p><ul><li>hexo core在generate的过程中会产生一个对象，我们在这里把这个对象称为article。第一次渲染的主要目的就是给这个对象添加title,content等属性。其中:<ol><li>article.title, article.date, article.tags, article.categories等属性来自yml front的部分</li><li>article.content是markdown文章解析后的html片段</li></ol></li><li>hexo项目目录下包含三个子目录，<ol><li>source目录，写博客的主要工作目录。这个目录下存放的是我们的markdown文章以及js, images, css</li><li>themes目录，主题目录，定义了即将生成的html的layout, 和html中需要加载的css, js, images</li><li>public目录, hexo generate的最终输出目录。里面包含了整个博客网站的html, css, js, images</li></ol></li><li>第二次渲染，需要引入对应模板文件格式的插件，如.ejs文件就需要使用hexo-render-ejs插件，.jade文件需要使用hexo-render-jade插件，而.sass文件则需要hexo-render-sass插件来转换成css文件。hexo的这一设计有点类似webpack中的loader。</li></ul></blockquote><h2 id="hexo插件是如何工作的"><a class="markdownIt-Anchor" href="#hexo插件是如何工作的"></a> hexo插件是如何工作的</h2><p>hexo和webpack还有一点类似的地方就是插件驱动理念。即hexo(和webpack)是先实现一套(插件)扩展系统，然后再往扩展系统中添加插件来实现自身的功能。即我们日常使用的hexo init, hexo new，hexo generate等等功能都是通过一个个插件(其实就是一个个function)实现的。</p><blockquote><p>具体来讲就是:</p><ol><li><a href="https://github.com/hexojs/hexo/blob/master/lib/hexo/index.js#L59" target="_blank" rel="noopener">hexo.extend</a>这个对象的每个属性都是一个用来绑定(特定)插件的对象。（所谓”绑定”，其实就是对象的register方法）</li><li>hexo<a href="https://github.com/hexojs/hexo/blob/master/lib/hexo/index.js#L153" target="_blank" rel="noopener">初始化</a>过程中先加载内部插件，再加载外部插件</li></ol><p>而这些插件的功能分为两大类: 命令行插件和generate过程相关功能，例如：</p><ul><li>命令行插件, hexo <a href="https://github.com/hexojs/hexo/blob/master/lib/plugins/console/index.js#L47" target="_blank" rel="noopener">new</a>, 是在hexo.extend.console对象上绑定的一个<a href="https://github.com/hexojs/hexo/blob/master/lib/plugins/console/new.js" target="_blank" rel="noopener">插件</a></li><li>generate过程相关的插件，如上文提到的往article对象添加title,content等属性的功能，是通过往hexo.extend.processer对象上<a href="https://github.com/hexojs/hexo/blob/master/lib/plugins/processor/index.js#L13" target="_blank" rel="noopener">绑定</a>post插件来<a href="https://github.com/hexojs/hexo/blob/master/lib/plugins/processor/post.js#L52" target="_blank" rel="noopener">实现</a>的</li></ul><p>所以，当我们想自己动手写插件时，就是像hexo官网给出的<a href="https://hexo.io/api/console.html" target="_blank" rel="noopener">这样</a>,调用某个对象的register方法，如hexo.extend.console.register。</p></blockquote><h1 id="hexo和git-page"><a class="markdownIt-Anchor" href="#hexo和git-page"></a> hexo和git page</h1><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/butterfly/20190926163046.png" alt=""></p><p>如上图，(用户通过浏览器访问到的)git page上的博客网站其实是hexo generate之后生成的public目录下的内容。</p><blockquote><p>所以，一个hexo博客项目应该有两个仓库:</p><ol><li>(基于hexo init结果的)<a href="https://github.com/buildAll/blogsrc" target="_blank" rel="noopener">博客编写仓库</a>。可以把这个项目看成一个代码库，用来”开发”博客网站(包含写博客，生成博客等任务)</li><li>存放(hexo generate结果的)<a href="https://github.com/buildAll/buildall.github.io" target="_blank" rel="noopener">public目录仓库</a>。这个项目是”只读”的，我们不会直接修改这个仓库的内容，我们也不会对这个仓库直接进行git pull、git commit、git push等常规操作。这个仓库的内容就是public目下的内容，即是通过hexo generate产生、hexo deploy提交的。</li></ol></blockquote><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>hexo简洁、强大的功能来自于自身优雅的系统设计:</p><ol><li>hexo进程启动、hexo核心对象封装、插件系统分别独立</li><li>自身采用插件驱动，生来就具备高可扩展性</li></ol><p>希望读完这篇文章你能对hexo本身有更深入的理解，也能通过hexo的代码设计，对自己以后写出更优雅的代码有所启发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客" scheme="https://www.larscheng.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://www.larscheng.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-theme-butterfly修改调整记录教程</title>
    <link href="https://www.larscheng.com/butterfly/"/>
    <id>https://www.larscheng.com/butterfly/</id>
    <published>2019-09-19T08:38:13.000Z</published>
    <updated>2022-01-02T05:18:26.504Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>首先感谢<a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/dev" target="_blank" rel="noopener">Butterfly</a>作者<a href="https://jerryc.me" target="_blank" rel="noopener">jerryc</a>,提供了一个非常优秀的博客主题</p></blockquote><blockquote><p>2020.3.27 更新：<br>我目前已经更换了博客主题，butterfly也更新了许多新功能，本文的修改仅在我当时使用的版本中测试过，如果你使用的是最新版的butterfly，建议本文的diy修改仅作参考哦</p><p>ＧＬ＆ＨF</p></blockquote><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>在阅读本文之前，确保您已经了解并使用过<a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/dev" target="_blank" rel="noopener">hexo-theme-butterfly</a>主题。</p><p>如果你还没有使用过，那推荐你一款美观大气的hexo主题：<a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/dev" target="_blank" rel="noopener">hexo-theme-butterfly</a></p><p>其实在主题的使用过程中也是新语言的学习过程。</p><h1 id="首页背景图片屏占比"><a class="markdownIt-Anchor" href="#首页背景图片屏占比"></a> 首页背景图片屏占比</h1><p>1.在主题配置文件<code>themes/Butterfly/_config.yml</code>最后边添加如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首页背景图片屏占比，1：100%，2：50%，1.5：75%</span></span><br><span class="line"><span class="string">homepage：</span></span><br><span class="line"><span class="attr">    ratio:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>2.修改<code>themes/Butterfly/layout/includes/additional-js.pug</code>该文件内代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">....省略....</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alignContent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> n = $(<span class="built_in">window</span>).height()/!&#123;theme.homepage.ratio&#125;, e = <span class="built_in">document</span>.querySelectorAll(<span class="string">".full_page"</span>), i = <span class="number">0</span>; i &lt; e.length; i++)</span><br><span class="line">  ....省略....</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>此处将<code>homepage.ratio</code>属性设置为2。首页效果如下：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/butterfly/20190919155516.png" alt="首页背景图片屏占比"></p><h1 id="首页设置多个子标题"><a class="markdownIt-Anchor" href="#首页设置多个子标题"></a> 首页设置多个子标题</h1><p>1.修改主题配置文件<code>themes/Butterfly/_config.yml</code>的<code>subtitle</code>属性，例如修改前为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  sub1:</span> <span class="string">所有的不平凡都来自平凡!</span></span><br><span class="line"><span class="attr">  sub2:</span> <span class="string">All</span> <span class="string">the</span> <span class="string">extraordinary</span> <span class="string">from</span> <span class="string">ordinary!</span></span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  sub:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">所有的不平凡都来自平凡</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">分享Java技术记录点滴生活...</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">今天最好的表现是明天最低的要求</span></span><br></pre></td></tr></table></figure><p>2.修改<code>themes/Butterfly/layout/includes/additional-js.pug</code>该文件内代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script.</span><br><span class="line">  <span class="keyword">var</span> typed = <span class="keyword">new</span> Typed(<span class="string">".subtitle"</span>, &#123;</span><br><span class="line">  strings: <span class="string">'!&#123;theme.subtitle.sub&#125;'</span>.split(<span class="string">','</span>),<span class="comment">//修改这里</span></span><br><span class="line">  startDelay: <span class="number">300</span>,</span><br><span class="line">  typeSpeed: <span class="number">100</span>,</span><br><span class="line">  loop: <span class="literal">true</span>,</span><br><span class="line">  backSpeed: <span class="number">50</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>将之前的单个读取，改为直接读取数组再拆分<br>这里有一个瑕疵，它使用逗号<code>split(&quot;,&quot;)</code>进行拆分，所以当sub中有逗号的话，用转义符代替</p></blockquote><h1 id="icp备案国徽图标显示"><a class="markdownIt-Anchor" href="#icp备案国徽图标显示"></a> ICP备案国徽图标显示</h1><p>1.修改主题配置文件<code>themes/Butterfly/_config.yml</code>的<code>ICP</code>属性，为其添加国徽图标的路径<code>pic</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ICP:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="string">ture</span></span><br><span class="line"><span class="attr">  pic:</span> <span class="string">/img/beian.png</span>  <span class="comment">#备案国徽小图路径</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">http://www.beian.gov.cn</span></span><br><span class="line"><span class="attr">  text:</span> <span class="string">浙ICP备12345678号</span></span><br></pre></td></tr></table></figure><p>2.修改<code>themes/Butterfly/layout/includes/footer.pug</code>该文件内代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if theme.ICP.enable</span><br><span class="line">  .icp</span><br><span class="line">    a(href=theme.ICP.url target=&quot;_blank&quot;)</span><br><span class="line">      img.lozad(data-src=`$&#123;theme.ICP.pic&#125;` onerror=`onerror=null;src=&apos;$&#123;theme.ICP.pic&#125;&apos;` style=&quot;padding:0px;vertical-align: text-bottom;&quot;)</span><br><span class="line">      span=theme.ICP.text</span><br></pre></td></tr></table></figure><p>修改后效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/butterfly/20190919161332.png" alt=""></p><h1 id="添加友情链接侧边栏"><a class="markdownIt-Anchor" href="#添加友情链接侧边栏"></a> 添加友情链接侧边栏</h1><p>1.修改主题配置文件<code>themes/Butterfly/_config.yml</code>的<code>aside</code>属性，添加侧边栏友链属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line"><span class="attr">  card_author:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  card_announcement:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  card_recent_post:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  card_categories:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  card_tags:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  card_archives:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  card_webinfo:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  card_links:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span>  <span class="comment"># 是否开启友链侧边栏显示</span></span><br><span class="line"><span class="attr">    num:</span> <span class="number">6</span>        <span class="comment"># 显示个数</span></span><br><span class="line"><span class="attr">    flink:</span> <span class="attr">http://www.larscheng.com/friends/</span> <span class="comment"># 友链页面地址</span></span><br></pre></td></tr></table></figure><p>1.在目录<code>themes/Butterfly/layout/includes/widget</code>下新建文件<code>card_links.pug</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.card_widget.card-links</span><br><span class="line">  .card-content</span><br><span class="line">    .item_headline</span><br><span class="line">      i.fa.fa-handshake-o(aria-hidden=&quot;true&quot;)</span><br><span class="line">      span= _p(&apos;aside.card_links&apos;)</span><br><span class="line">    each i in site.data.link</span><br><span class="line">        if(i.class_name === &quot;友情链接&quot;)</span><br><span class="line">            ul.aside_category_item</span><br><span class="line">              each item,index in i.link_list</span><br><span class="line">                if(index &lt;= theme.aside.card_links.num)</span><br><span class="line">                    li.aside_category_list</span><br><span class="line">                      a(href=item.link  title=item.name+&quot; : &quot;+item.descr target=&quot;_blank&quot;)</span><br><span class="line">                         img.lozad(data-src=item.avatar alt=item.name onerror=`onerror=null;src=&apos;$&#123;theme.lodding_bg.flink&#125;&apos;` height=&quot;35px&quot;)</span><br><span class="line">                         item=item.name</span><br><span class="line">              li.aside_category_list.find_more</span><br><span class="line">                a(href=theme.aside.card_links.flink  target=&quot;_blank&quot;) 查看更多</span><br></pre></td></tr></table></figure><p>其中<code>_p('aside.card_links')</code>是根据语言环境获取侧边栏标题：友情链接。可以到<code>themes/Butterfly/languages</code>下进行添加</p><p>需要注意的一点是<code>if(i.class_name === &quot;友情链接&quot;)</code>这个判断这里是用来判断需要显示的数据</p><blockquote><p>Butterfly 的友情链接模板中存在多个class，通常我们只需要显示<code>友情链接</code>这一部分而已，所以会有这一判断<br>此处应该有更优雅的处理方式，但是限于水平有限，先暂且这样实现</p></blockquote><p>link.yml示例文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">class:</span></span><br><span class="line"><span class="attr">  class_name:</span> <span class="string">友情鏈接</span></span><br><span class="line"><span class="attr">  link_list:</span></span><br><span class="line">    <span class="number">1</span><span class="string">:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">      link:</span> <span class="attr">https://blog.xxx.com</span></span><br><span class="line"><span class="attr">      avatar:</span> <span class="attr">https://cdn.xxxxx.top/avatar.png</span></span><br><span class="line"><span class="attr">      descr:</span> <span class="string">xxxxxxx</span></span><br><span class="line">    <span class="number">2</span><span class="string">:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">xxxxxx</span></span><br><span class="line"><span class="attr">      link:</span> <span class="attr">https://www.xxxxxxcn/</span></span><br><span class="line"><span class="attr">      avatar:</span> <span class="attr">https://xxxxx/avatar.png</span></span><br><span class="line"><span class="attr">      descr:</span> <span class="string">xxxxxxx</span>  </span><br><span class="line"></span><br><span class="line"><span class="attr">class2:</span></span><br><span class="line"><span class="attr"> class_name:</span> <span class="string">鏈接無效</span></span><br><span class="line"><span class="attr"> link_list:</span></span><br><span class="line">   <span class="number">1</span><span class="string">:</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">夢xxx</span></span><br><span class="line"><span class="attr">     link:</span> <span class="attr">https://blog.xxx.com</span></span><br><span class="line"><span class="attr">     avatar:</span> <span class="attr">https://xxxx/avatar.png</span></span><br><span class="line"><span class="attr">     descr:</span> <span class="string">xxxx</span></span><br><span class="line">   <span class="number">2</span><span class="string">:</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">xx</span></span><br><span class="line"><span class="attr">     link:</span> <span class="attr">https://www.axxxx.cn/</span></span><br><span class="line"><span class="attr">     avatar:</span> <span class="attr">https://x</span></span><br><span class="line"><span class="attr">     descr:</span> <span class="string">xx</span></span><br></pre></td></tr></table></figure><p>3.修改<code>themes/Butterfly/layout/includes/aside.pug</code>文件，添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_links.enable</span><br><span class="line">  include widget/card_links.pug</span><br></pre></td></tr></table></figure><blockquote><p>需要注意改代码片段添加的先后位置，决定了它在页面上被渲染的顺序</p></blockquote><p>修改完毕后，显示的基本效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/butterfly/20190919155941.png" alt="友链侧边栏"></p><h1 id="其他小改动"><a class="markdownIt-Anchor" href="#其他小改动"></a> 其他小改动</h1><p>这部分的修改适合强迫症晚期患者…</p><h2 id="文章列表图片文字比例调整"><a class="markdownIt-Anchor" href="#文章列表图片文字比例调整"></a> 文章列表图片文字比例调整</h2><p>这个属于css样式的调整，你可以直接在浏览器调整为你想要的样式属性后</p><p>到<code>themes/Butterfly/source/css/_layout/z-other.styl</code>内进行修改</p><ul><li>文章列表的图片样式：<code>#recent-posts .post_cover</code></li><li>文章列表的内容预览样式：<code>.recent-post-info</code></li></ul><blockquote><p>大小、比列都由你定。</p></blockquote><h2 id="归档侧边栏查看更多按钮"><a class="markdownIt-Anchor" href="#归档侧边栏查看更多按钮"></a> 归档侧边栏查看更多按钮</h2><p>查看<code>themes/Butterfly/layout/includes/widget/card_archives.pug</code>发现它直接调用了<code>list_archives</code>方法</p><p>emmmmmm，能力有限我又去暴力改代码了…找到<code>/node_modules/hexo/lib/plugins/helper/list_archives.js</code><br>修改<code>if (style === 'list') {·······}</code>内的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (style === <span class="string">'list'</span>) &#123;</span><br><span class="line">  result += <span class="string">`&lt;ul class="<span class="subst">$&#123;className&#125;</span>-list"&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = data.length; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    item = data[i];</span><br><span class="line"></span><br><span class="line">    result += <span class="string">`&lt;li class="<span class="subst">$&#123;className&#125;</span>-list-item"&gt;`</span>;</span><br><span class="line"></span><br><span class="line">    result += <span class="string">`&lt;a class="<span class="subst">$&#123;className&#125;</span>-list-link" href="<span class="subst">$&#123;link(item)&#125;</span>"&gt;`</span>;</span><br><span class="line">    result += transform ? transform(item.name) : item.name;</span><br><span class="line">    result += <span class="string">'&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (showCount) &#123;</span><br><span class="line">      result += <span class="string">`&lt;span class="<span class="subst">$&#123;className&#125;</span>-list-count"&gt;<span class="subst">$&#123;item.count&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result += <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    result += <span class="string">`&lt;li class="<span class="subst">$&#123;className&#125;</span>-list-item"&gt;`</span>;</span><br><span class="line">    result += <span class="string">`&lt;a style="text-align: center;font-size: 13px" class="<span class="subst">$&#123;className&#125;</span>-list-link" href="<span class="subst">$&#123;link()&#125;</span>"&gt;`</span>;</span><br><span class="line">    result += <span class="string">'查看更多'</span>;</span><br><span class="line">    result += <span class="string">'&lt;/a&gt;'</span>;</span><br><span class="line">    result += <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">  result += <span class="string">'&lt;/ul&gt;'</span>;</span><br></pre></td></tr></table></figure><p>然后你看到的效果大概是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/butterfly/20190919162236.png" alt="归档"></p><h1 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h1><p>以上就是我在<a href="">hexo-theme-butterfly</a>的使用过程中，个人修改的一些记录，如果你也钟意这些修改，不妨试试吧😁</p><p>GL&amp;HF…😜</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客" scheme="https://www.larscheng.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://www.larscheng.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>排序8：基数排序</title>
    <link href="https://www.larscheng.com/radix-sort/"/>
    <id>https://www.larscheng.com/radix-sort/</id>
    <published>2019-09-12T07:27:15.000Z</published>
    <updated>2022-01-02T05:18:26.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>原文作者：<a href="https://itimetraveler.github.io" target="_blank" rel="noopener">Mr.Seven</a><br>原文地址：<a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">八大排序算法总结与java实现</a><br><a href="https://www.larscheng.com/others/allsort/style/">❤查看排序算法动态演示❤查看排序算法动态演示❤查看排序算法动态演示</a></p></blockquote><h1 id="基数排序-radix-sort"><a class="markdownIt-Anchor" href="#基数排序-radix-sort"></a> 基数排序 (Radix Sort)</h1><p>基数排序的发明可以追溯到1887年赫尔曼·何乐礼在打孔卡片制表机（Tabulation Machine）,排序器每次只能看到一个列。<br>它是基于元素值的<code>每个位</code>上的字符来排序的。 对于数字而言就是分别基于<code>个位，十位，百位或千位</code>等等数字来排序。</p><p>基数排序是一种<code>非比较型</code>整数排序算法，其原理是将整数按<code>位数(个十百千...)切割</code>成不同的数字，然后每个位数分别比较。</p><p>由于整数也可以是表达字符串和特定格式的浮点数，所以基数排序也不是只能用于整数。</p><h1 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h1><p>将所有待比较数值统一为同样的数位长度，数位较短的数前面补0，然后，从最低位开始依次进行一次排序。这样从最低位排序一直到最高位完成以后，数列就变成一个有序数列</p><p>基数排序按照优先从高位或低位来排序有两种实现方案：</p><ul><li><p>MSD（Most significant digital） 从最左侧高位开始进行排序。先按k1排序分组, 同一组中记录, 关键码k1相等, 再对各组按k2排序分成子组, 之后, 对后面的关键码继续这样的排序分组, 直到按最次位关键码kd对各子组排序后. 再将各组连接起来, 便得到一个有序序列。MSD方式适用于位数多的序列。</p></li><li><p>LSD （Least significant digital）从最右侧低位开始进行排序。先从kd开始排序，再对kd-1进行排序，依次重复，直到对k1排序后便得到一个有序序列。LSD方式适用于位数少的序列。</p></li></ul><p>动态示意图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/radix-sort_sample.gif" alt="基数排序"></p><h1 id="算法分析"><a class="markdownIt-Anchor" href="#算法分析"></a> 算法分析</h1><p>以LSD为例，从最低位开始，具体算法描述如下：</p><ol><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ol><h1 id="java代码"><a class="markdownIt-Anchor" href="#java代码"></a> Java代码</h1><p>基数排序：通过序列中各个元素的值，对排序的N个元素进行若干趟的<code>“分配”与“收集”</code>来实现排序。</p><ul><li><p>分配：我们将L[i]中的元素取出，首先确定其个位上的数字，根据该数字分配到与之序号相同的桶中</p></li><li><p>收集：当序列中所有的元素都分配到对应的桶中，再按照顺序依次将桶中的元素收集形成新的一个待排序列L[]。对新形成的序列L[]重复执行分配和收集元素中的十位、百位…直到分配完该序列中的最高位，则排序结束</p></li><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * 基数排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lars</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/12 13:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序前:"</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        radixsort(Arrays.copyOf(arr, arr.length));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基数排序（LSD 从低位开始）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 待排序数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixsort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//待排元素最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = Arrays.stream(arr).max().getAsInt();</span><br><span class="line">        <span class="keyword">int</span> maxDight = String.valueOf(max).length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//申请一个桶空间</span></span><br><span class="line">        <span class="keyword">int</span>[][] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">        <span class="comment">//从个位开始</span></span><br><span class="line">        <span class="keyword">int</span> base = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxDight; i++) &#123;</span><br><span class="line">            <span class="comment">//各个桶中元素个数</span></span><br><span class="line">            <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.分配：将所有元素分配到桶中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="comment">//确定当前位的数字</span></span><br><span class="line">                <span class="keyword">int</span> num = (arr[j] % base) / (base / <span class="number">10</span>);</span><br><span class="line">                buckets[num][temp[num]] = arr[j];</span><br><span class="line">                <span class="comment">//num桶中元素个数+1</span></span><br><span class="line">                temp[num]++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//收集：将不同桶里数据挨个捞出来,为下一轮高位排序做准备,</span></span><br><span class="line">            <span class="comment">// 由于靠近桶底的元素排名靠前,因此从桶底先捞</span></span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; buckets.length; b++) &#123;</span><br><span class="line">                <span class="comment">//第b个桶中共有temp[b]个元素</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; temp[b]; p++) &#123;</span><br><span class="line">                    arr[k++] = buckets[b][p];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//本轮结束，开始下一位的分配收集</span></span><br><span class="line">            base *= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"排序后:"</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复杂度"><a class="markdownIt-Anchor" href="#复杂度"></a> 复杂度</h1><p>以下是基数排序算法复杂度，其中k为最大数的位数：</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(d*(n+r))</td><td>O(d*(n+r))</td><td>O(d*(n+r))</td><td>O(n+r)</td></tr></tbody></table><p>其中，<code>d 为位数</code>，<code>r为基数</code>，<code>n 为原数组个数</code>。<br>在基数排序中，因为没有比较操作，所以在复杂上，最好的情况与最坏的情况在时间上是一致的，均为<code>O(d*(n + r))</code>。</p><p>基数排序不改变相同元素之间的相对顺序，因此它是稳定的排序算法。</p><h1 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h1><ol><li>数据范围较小，建议在小于1000</li><li>每个数值都要大于等于0</li></ol><p>基数排序更适合用于对时间, 字符串等这些整体权值未知的数据进行排序。</p><h1 id="桶概念算法对比"><a class="markdownIt-Anchor" href="#桶概念算法对比"></a> 桶概念算法对比</h1><p>基数排序、计数排序、桶排序三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>基数排序：根据键值的每位数字来分配桶</li><li>计数排序：每个桶只存储单一键值</li><li>桶排序：每个桶存储一定范围的数值</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="排序" scheme="https://www.larscheng.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序7：归并排序</title>
    <link href="https://www.larscheng.com/merge-sort/"/>
    <id>https://www.larscheng.com/merge-sort/</id>
    <published>2019-09-11T11:13:55.000Z</published>
    <updated>2022-01-02T05:18:26.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>原文作者：<a href="https://itimetraveler.github.io" target="_blank" rel="noopener">Mr.Seven</a><br>原文地址：<a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">八大排序算法总结与java实现</a><br><a href="https://www.larscheng.com/others/allsort/style/">❤查看排序算法动态演示❤查看排序算法动态演示❤查看排序算法动态演示</a></p></blockquote><h1 id="归并排序-merging-sort"><a class="markdownIt-Anchor" href="#归并排序-merging-sort"></a> 归并排序 (Merging Sort)</h1><p>归并排序是建立在归并操作上的一种有效的排序算法。</p><p>归并算法用到了<code>分治法</code>的思想,且各层分治递归可以同时进行。(<code>快速排序也引入了分治思想</code>)</p><h1 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h1><p>归并排序算法是将两个（或两个以上）有序表合并成一个新的有序表，即<code>把待排序序列分为若干个子序列</code>，每个子序列是有序的。然后再把有序子序列<code>合并为整体</code>有序序列。</p><p>动态示意图如下：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/mergingsort1.gif" alt="归并排序"></p><h1 id="算法描述"><a class="markdownIt-Anchor" href="#算法描述"></a> 算法描述</h1><p>归并排序可通过两种方式实现：</p><ol><li>自上而下的递归</li><li>自下而上的迭代</li></ol><h3 id="递归法假设共有n个元素"><a class="markdownIt-Anchor" href="#递归法假设共有n个元素"></a> 递归法（假设共有n个元素）</h3><ol><li>将序列每相邻两个数字进行归并操作，形成floor(n/2)个序列，排序后每个序列包含两个元素</li><li>将上述序列再次归并，形成floor(n/4)个序列，每个序列包含四个元素；</li><li>重复步骤2，直到所有的元素排序完毕</li></ol><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/merging-sort.gif" alt="归并排序"></p><h3 id="迭代法"><a class="markdownIt-Anchor" href="#迭代法"></a> 迭代法</h3><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li><li>重复步骤③直到某一指针到达序列尾</li><li>将另一序列剩下的所有元素直接复制到合并序列尾</li></ol><h1 id="java代码实现"><a class="markdownIt-Anchor" href="#java代码实现"></a> Java代码实现</h1><p>归并排序其实要做两件事：</p><ul><li>分解：将序列每次折半拆分</li><li>合并：将划分后的序列段两两排序合并</li></ul><p>因此，归并排序实际上就是两个操作，拆分+合并</p><blockquote><p>如何合并？</p></blockquote><p><code>L[first…mid]</code>为第一段，<code>L[mid+1…last]</code>为第二段，并且两端已经有序，现在我们要将两端合成达到<code>L[first…last]</code>并且也有序。</p><p>首先依次从第一段与第二段中取出元素比较，将较小的元素赋值给temp[]<br>重复执行上一步，当某一段赋值结束，则将另一段剩下的元素赋值给temp[]<br>此时将temp[]中的元素复制给L[]，则得到的L[first…last]有序</p><blockquote><p>如何分解？</p></blockquote><p>在这里，我们采用<code>递归</code>的方法，首先将待排序列分成A,B两组；然后重复对A、B序列分组；直到分组后组内只有一个元素，此时我们认为组内所有元素有序，则分组结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lars</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/11 11:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergingSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序前:"</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(mergingSort(Arrays.copyOf(arr,arr.length))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergingSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = arr.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] leftArr = Arrays.copyOfRange(arr, <span class="number">0</span>, num);</span><br><span class="line">        <span class="keyword">int</span>[] rightArr = Arrays.copyOfRange(arr, num, arr.length);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"split two array: "</span> + Arrays.toString(leftArr) + <span class="string">" And "</span> + Arrays.toString(rightArr));</span><br><span class="line">        <span class="comment">//递归：将序列拆分为若干个最小单元后进行合并</span></span><br><span class="line">        <span class="keyword">return</span> mergeTwoArray(mergingSort(leftArr), mergingSort(rightArr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeTwoArray(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//申请额外的空间存储合并之后的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr1.length + arr2.length];</span><br><span class="line">        <span class="comment">//选取两个序列中的较小值放入新数组</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; arr1.length &amp;&amp; j &lt; arr2.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr1[i] &lt;= arr2[j]) &#123;</span><br><span class="line">                result[k++] = arr1[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[k++] = arr2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//序列1中多余的元素移入新数组</span></span><br><span class="line">        <span class="keyword">while</span> (i&lt;arr1.length)&#123;</span><br><span class="line">            result[k++]=arr1[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//序列2中多余的元素移入新数组</span></span><br><span class="line">        <span class="keyword">while</span> (j&lt;arr2.length)&#123;</span><br><span class="line">            result[k++]=arr2[j++];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println("Merging: " + Arrays.toString(result));</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上, 长度为n的数组, 最终会调用mergeSort函数2n-1次。<code>通过自上而下的递归实现的归并排序, 将存在堆栈溢出的风险</code>。</p><h1 id="复杂度"><a class="markdownIt-Anchor" href="#复杂度"></a> 复杂度</h1><p>从效率上看，归并排序可算是排序算法中的”<code>佼佼者</code>”,假设数组长度为n，那么拆分数组共需logn，又每步都是一个普通的合并子数组的过程， 时间复杂度为O(n)， 故其综合时间复杂度为O(nlogn)。<br>另一方面， 归并排序多次递归过程中拆分的子数组需要保存在内存空间， 其空间复杂度为O(n)。</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(n)</td></tr></tbody></table><p>交换元素时，可以在相等的情况下做出不移动的限制，所以归并排序是可以稳定的；</p><blockquote><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。</p></blockquote><h1 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h1><p>若n较大，则应采用时间复杂度为O(nlog2(n))的排序方法：快速排序、堆排序或归并排序</p><p>但是如果<code>对算法的稳定性有所要求</code>的话，即相同元素的顺序不被改变，那这时就可以使用归并排序。</p><p>因为通过之前文章的分析可以知道<code>快速排序、堆排序都是不稳定的排序算法</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="排序" scheme="https://www.larscheng.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序6：快速排序</title>
    <link href="https://www.larscheng.com/quick-sort/"/>
    <id>https://www.larscheng.com/quick-sort/</id>
    <published>2019-09-10T11:43:25.000Z</published>
    <updated>2022-01-02T05:18:26.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>原文作者：<a href="https://itimetraveler.github.io" target="_blank" rel="noopener">Mr.Seven</a><br>原文地址：<a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">八大排序算法总结与java实现</a><br><a href="https://www.larscheng.com/others/allsort/style/">❤查看排序算法动态演示❤查看排序算法动态演示❤查看排序算法动态演示</a></p></blockquote><h1 id="快速排序-quick-sort"><a class="markdownIt-Anchor" href="#快速排序-quick-sort"></a> 快速排序 （Quick Sort）</h1><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！</p><p>快速排序是一种<code>分而治之</code>思想在排序算法上的典型应用。快速排序是在<code>冒泡排序</code>的基础上进行的改良，快排在面试中也是常客。</p><h1 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h1><p>快速排序的基本思想：<strong>挖坑填数+分治法</strong>。</p><p>先选择一个元素作为基准，通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以<code>递归</code>进行，以此达到整个数据变成有序序列。</p><p>动态演示如图，其中第一个基准元素位最后一个元素</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/Sorting_quicksort_anim.gif" alt="快速排序"></p><h1 id="算法描述"><a class="markdownIt-Anchor" href="#算法描述"></a> 算法描述</h1><p>快速排序使用分治策略来把一个序列（list）分为两个子序列（sub-lists）。步骤为：</p><ol><li>从数列中挑出一个元素，称为”基准”（pivot）。</li><li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><p>递归到最底部时，数列的大小是0或1，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><p>如图所示：数组[7,5,6,3,5,1,2,9,5,8,4],以第一个元素7为基准</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/quicksort1.gif" alt="快速排序分区1"></p><p>首次分区后可以得到<code>[5,6,3,5,1,2,4,5]</code>和<code>[7,8,9]</code>两组数据，继续以<code>第一个元素为基准</code>进行两个数组的分区</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/quicksort2.gif" alt="快速排序分区2"></p><p>如此循环往复，即可得到有序序列</p><h1 id="java实现"><a class="markdownIt-Anchor" href="#java实现"></a> Java实现</h1><p>用伪代码描述如下：</p><ol><li>i = L; j = R; 将基准数挖出形成第一个坑a[i]。（L:左侧下标起点，R:右侧下标起点）</li><li>j–，由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。</li><li>i++，由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。</li><li>再重复执行2，3二步，直到i==j，将基准数填入a[i]中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序前:"</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="keyword">int</span>[] a = Arrays.copyOf(arr, arr.length);</span><br><span class="line"></span><br><span class="line">        quicksort1(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksort1</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt;= <span class="number">0</span> || low &gt;= high) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftIndex = low;</span><br><span class="line">        <span class="keyword">int</span> rightIndex = high;</span><br><span class="line">        <span class="comment">//挖坑1：保存基准的值</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[leftIndex];</span><br><span class="line">        <span class="keyword">while</span> (leftIndex &lt; rightIndex) &#123;</span><br><span class="line">            <span class="comment">//坑2：从后向前找到比基准小的元素，插入到基准位置坑1中</span></span><br><span class="line">            <span class="keyword">while</span> (leftIndex &lt; rightIndex &amp;&amp; arr[rightIndex] &gt;= temp) &#123;</span><br><span class="line">                <span class="comment">//不做交换</span></span><br><span class="line">                rightIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右侧数据小于基准，进行交换</span></span><br><span class="line">            arr[leftIndex] = arr[rightIndex];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//坑3：从前往后找到比基准大的元素，放到刚才挖的坑2中</span></span><br><span class="line">            <span class="keyword">while</span> (leftIndex &lt; rightIndex &amp;&amp; arr[leftIndex] &lt;= temp) &#123;</span><br><span class="line">                leftIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左侧数据大于基准，进行交换</span></span><br><span class="line">            arr[rightIndex] = arr[leftIndex];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//基准值填补到坑3中，准备分治递归快排</span></span><br><span class="line">        arr[leftIndex] = temp;</span><br><span class="line"></span><br><span class="line">        quicksort1(arr, low, leftIndex - <span class="number">1</span>);</span><br><span class="line">        quicksort1(arr, leftIndex + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是<code>递归版</code>的快速排序：通过把<code>基准temp插入到合适的位置</code>来实现分治，并<code>递归</code>地对分治后的两个划分继续快排。</p><blockquote><p>那么非递归版的快排如何实现呢？</p></blockquote><p>因为<code>递归的本质是栈</code>，所以我们非递归实现的过程中，可以<code>借助栈</code>来保存中间变量就可以实现非递归了。在这里中间变量也就是<code>通过partition函数</code>划分区间之后分成左右两部分的首尾指针，只需要保存这两部分的首尾指针即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序（非递归）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ①. 从数列中挑出一个元素，称为"基准"（pivot）。</span></span><br><span class="line"><span class="comment"> * ②. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</span></span><br><span class="line"><span class="comment"> * ③. 把分区之后两个区间的边界（low和high）压入栈保存，并循环①、②步骤</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr   待排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序前:"</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        quickSortByStack(Arrays.copyOf(arr, arr.length));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortByStack</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        stack.push(<span class="number">0</span>);</span><br><span class="line">        stack.push(arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> high = stack.pop();</span><br><span class="line">            <span class="keyword">int</span> low = stack.pop();</span><br><span class="line">            <span class="keyword">int</span> pivot = partition(arr, low, high);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pivot &gt; low) &#123;</span><br><span class="line">                stack.push(low);</span><br><span class="line">                stack.push(pivot - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pivot &lt; high &amp;&amp; pivot &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                stack.push(pivot + <span class="number">1</span>);</span><br><span class="line">                stack.push(high);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"排序后:"</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt;= <span class="number">0</span> || low &gt;= high) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftIndex = low;</span><br><span class="line">        <span class="keyword">int</span> rightIndex = high;</span><br><span class="line">        <span class="comment">//挖坑1：保存基准的值</span></span><br><span class="line">        <span class="keyword">int</span> pivot = arr[leftIndex];</span><br><span class="line">        <span class="keyword">while</span> (leftIndex &lt; rightIndex) &#123;</span><br><span class="line">            <span class="comment">//坑2：从后向前找到比基准小的元素，插入到基准位置坑1中</span></span><br><span class="line">            <span class="keyword">while</span> (leftIndex &lt; rightIndex &amp;&amp; arr[rightIndex] &gt;= pivot) &#123;</span><br><span class="line">                <span class="comment">//不做交换</span></span><br><span class="line">                rightIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右侧数据小于基准，进行交换</span></span><br><span class="line">            arr[leftIndex] = arr[rightIndex];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//坑3：从前往后找到比基准大的元素，放到刚才挖的坑2中</span></span><br><span class="line">            <span class="keyword">while</span> (leftIndex &lt; rightIndex &amp;&amp; arr[leftIndex] &lt;= pivot) &#123;</span><br><span class="line">                leftIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左侧数据大于基准，进行交换</span></span><br><span class="line">            arr[rightIndex] = arr[leftIndex];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//基准值填补到坑3中，准备分治递归快排</span></span><br><span class="line">        arr[leftIndex] = pivot;</span><br><span class="line">        <span class="keyword">return</span> leftIndex;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复杂度"><a class="markdownIt-Anchor" href="#复杂度"></a> 复杂度</h1><p>快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。</p><p>但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。</p><p>为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个不稳定的排序方法。</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><p>快速排序排序效率非常高。 虽然它运行最糟糕时将达到O(n²)的时间复杂度, 但通常平均来看, 它的时间复杂为O(nlogn), 比同样为O(nlogn)时间复杂度的归并排序还要快.</p><h1 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h1><p>快速排序似乎更偏爱乱序的数列, 越是乱序的数列, <code>它相比其他排序而言</code>, 相对效率更高.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="排序" scheme="https://www.larscheng.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序5：冒泡排序</title>
    <link href="https://www.larscheng.com/bubble-sort/"/>
    <id>https://www.larscheng.com/bubble-sort/</id>
    <published>2019-09-09T11:50:07.000Z</published>
    <updated>2022-01-02T05:18:26.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>本文参考于：<a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">八大排序算法总结与java实现</a><br><a href="https://www.larscheng.com/others/allsort/style/">❤查看排序算法动态演示❤查看排序算法动态演示❤查看排序算法动态演示</a></p></blockquote><h1 id="冒泡排序-bubble-sort"><a class="markdownIt-Anchor" href="#冒泡排序-bubble-sort"></a> 冒泡排序 （Bubble Sort）</h1><blockquote><p>冒泡应该是大部分同学第一个接触到的排序算法，冒泡在面试中也有很高的出现频率。所以务必要将其掌握。</p></blockquote><h1 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h1><p>冒泡排序依次遍历要排序的元素序列，依次比较两个相邻的元素，如果他们的顺序错误就进行交换。如此往复，知道待排序列中没有相邻元素要交换时排序完成。</p><p>其动态演示如图：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/bubble-sort.gif" alt="冒泡排序----图片来源网络"></p><p>从其动态图可以看出，冒泡排序法在每轮遍历后都会将<code>最大</code>或者<code>最小</code>的元素慢慢的<code>浮</code>到顶端，这种下现象就像气泡上浮一般，所以算法命名<code>冒泡</code>排序</p><h1 id="算法描述"><a class="markdownIt-Anchor" href="#算法描述"></a> 算法描述</h1><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h1 id="java实现"><a class="markdownIt-Anchor" href="#java实现"></a> JAVA实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lars</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/9 15:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序前:"</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        Bubble(Arrays.copyOf(arr, arr.length));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 若序列原本有序，会有多余的遍历和比较</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bubble</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//控制外层比较轮数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//控制内层需要参与比较的序列大小</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">                <span class="comment">//相邻元素比较</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">//交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"排序后:"</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>冒泡排序还有一种优化算法，就是建立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序,即可结束遍历</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 优化版本，若序列有序，1次遍历后直接结束</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleDemo</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 设定一个标记</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line"></span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复杂度"><a class="markdownIt-Anchor" href="#复杂度"></a> 复杂度</h1><ul><li>最好情况：序列原本有序（一轮遍历）时间复杂度为O(n)</li><li>最差情况：序列为反序，时间复杂度为O(n²)</li></ul><p>平均来讲, 时间复杂度为O(n²)，</p><p>冒泡排序中只有缓存的temp变量需要内存空间, 因此空间复杂度为常量O(1).</p><p>Tips: 由于冒泡排序只在相邻元素大小不符合要求时才调换他们的位置, 它并不改变相同元素之间的相对顺序, 因此它是稳定的排序算法.</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><h1 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h1><p>主要看数据的顺序情况，如果数据本身已经是离最终排序结果不远的，通过加个交换标识，冒泡排序可能是更快的。<br>所以所有排序算法的试用性都是分场景来看的，但是不得不承认<code>冒泡排序在性能要求高的场景下，通用性不高</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="排序" scheme="https://www.larscheng.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序4：堆排序</title>
    <link href="https://www.larscheng.com/head-sort/"/>
    <id>https://www.larscheng.com/head-sort/</id>
    <published>2019-09-08T11:25:34.000Z</published>
    <updated>2022-01-02T05:18:26.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>本文参考于：<a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">八大排序算法总结与java实现</a></p></blockquote><h1 id="堆排序-head-sort"><a class="markdownIt-Anchor" href="#堆排序-head-sort"></a> 堆排序 （Head Sort）</h1><blockquote><p>1991年的计算机先驱奖获得者、斯坦福大学计算机科学系教授罗伯特·弗洛伊德(Robert W．Floyd) 和威廉姆斯(J．Williams) 在1964年共同发明了著名的堆排序算法(Heap Sort).</p></blockquote><p>堆的定义如下：n个元素的序列 {k1,k2,⋅⋅⋅,kn} 当且仅当满足下关系时，称之为堆。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">小</mi><mi mathvariant="normal">顶</mi><mi mathvariant="normal">堆</mi><mi mathvariant="normal">：</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mi>i</mi></msub><mo>≤</mo><msub><mi>k</mi><mrow><mn>2</mn><mi>i</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mi>i</mi></msub><mo>≤</mo><msub><mi>k</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable></mrow><mi mathvariant="normal">大</mi><mi mathvariant="normal">顶</mi><mi mathvariant="normal">堆</mi><mi mathvariant="normal">：</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>k</mi><mrow><mn>2</mn><mi>i</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>k</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>k</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable></mrow><mo stretchy="false">(</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mrow><mo fence="true">⌊</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence="true">⌋</mo></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">小顶堆：\begin{cases}k_i \leq k_{2i}\\\\k_i \leq k_{2i+1}\end{cases} 大顶堆：\begin{cases}k_i \geq k_{2i}\\\\k_i \geq k_{2i+1}\end{cases} (i=1,2,...,\left \lfloor \frac{n}{2}   \right \rfloor)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">顶</span><span class="mord cjk_fallback">堆</span><span class="mord cjk_fallback">：</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">顶</span><span class="mord cjk_fallback">堆</span><span class="mord cjk_fallback">：</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8359999999999999em;vertical-align:-0.686em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">⌊</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">⌋</span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中的两种情况又分为<code>小顶堆</code>和<code>大顶堆</code></p><p>把此序列对应的二维数组看成一个完全二叉树。<br>那么堆的含义就是：<code>完全二叉树中任何一个非叶子节点的值均不大于（或不小于）其左，右孩子节点的值</code>。</p><p>由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。</p><p>因此我们可使用大顶堆进行升序排序, 使用小顶堆进行降序排序。</p><h1 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h1><p>先将序列建立堆，然后输出堆顶元素，然后再将剩下的序列在建立新的堆，在输出堆顶元素，以此类推，直到所有元素均输出为止，此时输出的元素序列即为有序序列</p><p>动态演示如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/heap_sort_gif.gif" alt="堆排序"></p><h1 id="算法描述"><a class="markdownIt-Anchor" href="#算法描述"></a> 算法描述</h1><ol><li>先将初始序列K[1…n]建成一个大顶堆, 那么此时第一个元素K1最大, 此堆为初始的无序区</li><li>再将关键字最大的记录K1 (即堆顶, 第一个元素)和无序区的最后一个记录 Kn 交换,并将Kn取出， 由此得到新的无序区K[1…n-1]和有序区K[n]</li><li>交换K1 和 Kn 后, K1在堆顶可能违反堆性质, 因此需将K[1…n-1]调整为堆. 然后重复步骤2, 直到无序区只有一个元素时停止.</li></ol><p>简单总结可以分为三个部分操作</p><ol><li>建立堆(大顶堆or小顶堆)</li><li>取出堆顶元素，将最后一个元素放在堆顶</li><li>重建堆，重复步骤2</li></ol><h1 id="java实现"><a class="markdownIt-Anchor" href="#java实现"></a> Java实现</h1><p>对于堆节点的访问：</p><ul><li>父节点i的左子节点在位置：<code>(2*i+1)</code>;</li><li>父节点i的右子节点在位置：<code>(2*i+2)</code>;</li><li>子节点i的父节点在位置：<code>floor((i-1)/2)</code>;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/8 15:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeadSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序前:"</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        HeadSort1(Arrays.copyOf(arr, arr.length));</span><br><span class="line">        HeadSort2(Arrays.copyOf(arr, arr.length));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeadSort2</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//1.建堆</span></span><br><span class="line">            buidHead(arr, len);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.取出堆顶（把堆顶与数组最后一个元素进行交换）</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = arr[len - <span class="number">1</span>];</span><br><span class="line">            arr[len - <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.重新建堆</span></span><br><span class="line">            len = len - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"排序后:"</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buidHead</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> leftIndex = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> rightIndex = leftIndex + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//默认父节点最大</span></span><br><span class="line">            <span class="keyword">int</span> maxIndex = i;</span><br><span class="line">            <span class="keyword">if</span> (leftIndex &lt; len &amp;&amp; arr[leftIndex] &gt; arr[maxIndex]) &#123;</span><br><span class="line">                maxIndex = leftIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rightIndex &lt; len &amp;&amp; arr[rightIndex] &gt; arr[maxIndex]) &#123;</span><br><span class="line">                maxIndex = rightIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最大值确认，如果父节点不是最大则交换</span></span><br><span class="line">            <span class="keyword">if</span> (maxIndex != i) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[maxIndex];</span><br><span class="line">                arr[maxIndex] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeadSort1</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每次循环数组长度缩小1，相当于取出堆顶元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">//建堆</span></span><br><span class="line">            buildMaxHead(arr, i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//堆顶元素与Kn交换,下次循环开始前取出Kn(数组长度减1)</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = arr[i - <span class="number">1</span>];</span><br><span class="line">            arr[i - <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"排序后:"</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHead</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt;= <span class="number">0</span> || arr.length &lt; limit) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从最后一个非叶子节点开始比较，进行建堆</span></span><br><span class="line">        <span class="keyword">int</span> parentIdx = limit / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (; parentIdx &gt;= <span class="number">0</span>; parentIdx--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parentIdx * <span class="number">2</span> + <span class="number">1</span> &gt;= limit) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左子节点位置</span></span><br><span class="line">            <span class="keyword">int</span> left = parentIdx * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//右子节点位置，如果没有右节点，默认为左节点位置</span></span><br><span class="line">            <span class="keyword">int</span> right = (left + <span class="number">1</span>) &gt;= limit ? left : (left + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> maxChildId = arr[left] &gt;= arr[right] ? left : right;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//交换父节点与左右子节点中的最大值</span></span><br><span class="line">            <span class="keyword">if</span> (arr[maxChildId] &gt; arr[parentIdx]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[parentIdx];</span><br><span class="line">                arr[parentIdx] = arr[maxChildId];</span><br><span class="line">                arr[maxChildId] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复杂度"><a class="markdownIt-Anchor" href="#复杂度"></a> 复杂度</h1><p>以上,</p><ol><li>建立堆的过程, 从length/2 一直处理到0, 时间复杂度为O(n);</li><li>调整堆的过程是沿着堆的父子节点进行调整, 执行次数为堆的深度, 时间复杂度为O(lgn);</li><li>堆排序的过程由n次第2步完成, 时间复杂度为O(nlgn).</li></ol><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(nlog2n)</td><td>O(1)</td></tr></tbody></table><p>Tips: 由于多次任意下标相互交换位置, 相同元素之间原本相对的顺序被破坏了, 因此, 它是不稳定的排序.</p><h1 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h1><p><strong>由于堆排序中初始化堆的过程比较次数较多, 因此它不太适用于小序列.</strong></p><p>在堆排序算法分析过程中可以发现，堆排序通过构建堆，率先将最大或者最小的元素找出来。</p><p>所以，堆排序往往适用于，<code>不需要对序列整体排序，只需要找到最大或者最小元素</code>的场景</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="排序" scheme="https://www.larscheng.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序3：选择排序</title>
    <link href="https://www.larscheng.com/select-sort/"/>
    <id>https://www.larscheng.com/select-sort/</id>
    <published>2019-09-07T10:07:38.000Z</published>
    <updated>2022-01-02T05:18:26.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>原文作者：<a href="https://itimetraveler.github.io" target="_blank" rel="noopener">Mr.Seven</a><br>原文地址：<a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">八大排序算法总结与java实现</a><br><a href="https://www.larscheng.com/others/allsort/style/">❤查看排序算法动态演示❤查看排序算法动态演示❤查看排序算法动态演示</a></p></blockquote><h1 id="选择排序selection-sort"><a class="markdownIt-Anchor" href="#选择排序selection-sort"></a> 选择排序（Selection Sort）</h1><p>从算法逻辑上看，选择排序是一种简单直观的排序算法，在简单选择排序过程中，所需移动记录的次数比较少。</p><h1 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h1><p>选择排序的基本思想：比较 + 交换。</p><p>在未排序序列中找到最小（大）元素，存放到未排序序列的起始位置。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/slectsort.gif" alt="选择排序动态演示--来源互联网"></p><h1 id="算法描述"><a class="markdownIt-Anchor" href="#算法描述"></a> 算法描述</h1><ol><li>从待排序序列中，找到关键字最小的元素；</li><li>如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；</li><li>从余下的 N - 1 个元素中，找出关键字最小的元素，重复1、2步，直到排序结束。</li></ol><h1 id="java代码实现"><a class="markdownIt-Anchor" href="#java代码实现"></a> JAVA代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lars</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/7 17:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序前:"</span>+Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        selectSort1(Arrays.copyOf(arr,arr.length));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 从待排序序列中，找到关键字最小的元素；</span></span><br><span class="line"><span class="comment">     * 2. 如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；</span></span><br><span class="line"><span class="comment">     * 3. 从余下的 N - 1 个元素中，找出关键字最小的元素，重复①、②步，直到排序结束。</span></span><br><span class="line"><span class="comment">     *    仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr  待排序数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort1</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//待排序列第一个默认为最小</span></span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="comment">//依次与其他元素比较找出最小元素的下标</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最小元素下标不是i，则将i与最小下标所在元素交换位置</span></span><br><span class="line">            <span class="keyword">if</span> (min!=i)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[min];</span><br><span class="line">                arr[min] = arr[i];</span><br><span class="line">                arr[i]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"排序后:"</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复杂度"><a class="markdownIt-Anchor" href="#复杂度"></a> 复杂度</h1><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><p>选择排序的简单和直观名副其实，这也造就了它”出了名的慢性子”，</p><p>无论是哪种情况，哪怕原数组已排序完成，它也将花费将近n²/2次遍历来确认一遍。</p><p>即便是这样，它的排序结果也还是不稳定的。 唯一值得高兴的是，它并不耗费额外的内存空间。</p><h1 id="适应场景"><a class="markdownIt-Anchor" href="#适应场景"></a> 适应场景</h1><p>当数据量不大，且对稳定性没有要求的时候，适用于选择排序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="排序" scheme="https://www.larscheng.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序2：希尔排序</title>
    <link href="https://www.larscheng.com/shell-sort/"/>
    <id>https://www.larscheng.com/shell-sort/</id>
    <published>2019-09-06T09:40:32.000Z</published>
    <updated>2022-01-02T05:18:26.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p><a href="https://www.larscheng.com/others/allsort/">❤查看排序算法动态演示❤查看排序算法动态演示❤查看排序算法动态演示</a></p></blockquote><h1 id="希尔排序-shell-sort"><a class="markdownIt-Anchor" href="#希尔排序-shell-sort"></a> 希尔排序 （Shell Sort）</h1><p>希尔排序 也称做<code>递减增量排序算法</code>，1959年<code>Shell</code>发明，是插入排序的一种<code>高速而稳定</code>的改进版本</p><a id="more"></a><h1 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h1><p>希尔排序是先将整个待排序的记录序列分割成若干个子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，在对全体记录进行依次直接排序</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/20190906110507.png" alt=""></p><p>例如上图中的待排序数组：[49,38,65,97,76,13,27,49,55,4]</p><ol><li>将数组按<code>5个间隔</code>为一组划分成<code>5组子序列</code>,每个子序列进行插入排序后，各个子序列就变成了有序的了（整体不一定有序）</li><li>将上一步得到的数组按<code>2个间隔</code>为一组划分成<code>3组子序列</code>，各个子序列进行插入排序</li><li>将上一步得到的数组按正常插入排序，此时序列基本有序，所以效率较高</li></ol><p>上面提到的间隔可以称作增量, 一般初始增量取数组的一半长度, 每轮排序后，增量减半，直至增量为1(存在多种增量序列)</p><h1 id="算法描述"><a class="markdownIt-Anchor" href="#算法描述"></a> 算法描述</h1><ol><li>选择一个增量序列t1，t2，…，tk，其中t1&gt;t2，tk=1；（一般初次取数组半长，之后每次再减半，直到增量为1）</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><p>如下图，其中H表示增量</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/shellsort.gif" alt="希尔排序动图--来源崔显龙"></p><h1 id="java代码实现"><a class="markdownIt-Anchor" href="#java代码实现"></a> Java代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/6 11:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序前:"</span>+Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] a = Arrays.copyOf(arr,arr.length);</span><br><span class="line">        shellsort1(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] b = Arrays.copyOf(arr,arr.length);</span><br><span class="line"></span><br><span class="line">        shellsort2(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 希尔排序（Wiki官方版）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；（注意此算法的gap取值）</span></span><br><span class="line"><span class="comment">     * 2. 按增量序列个数k，对序列进行k 趟排序；</span></span><br><span class="line"><span class="comment">     * 3. 每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。</span></span><br><span class="line"><span class="comment">     *    仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr  待排序数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellsort2</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> gap = <span class="number">1</span>, i, j, len = arr.length;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span> (gap &lt; len / <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// &lt;O(n^(3/2)) by Knuth,1973&gt;: 1, 4, 13, 40, 121, ...</span></span><br><span class="line">            gap = gap * <span class="number">3</span> + <span class="number">1</span>;      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; gap &gt; <span class="number">0</span>; gap /= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = gap; i &lt; len; i++) &#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">                <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)&#123;</span><br><span class="line">                    arr[j + gap] = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j + gap] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"排序后:"</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 个人实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellsort1</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据增量g进行分组,g初始状态为数组长度一半</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> g = arr.length / <span class="number">2</span>; g &gt; <span class="number">0</span>; g /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = g; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="comment">//待插入数为arr[i]</span></span><br><span class="line">                <span class="keyword">int</span> inserted = arr[i];</span><br><span class="line">                <span class="keyword">int</span> j;</span><br><span class="line">                <span class="comment">//待插入数，与当前组内的序列进行依次比较</span></span><br><span class="line">                <span class="keyword">for</span> (j = i - g; j &gt;= <span class="number">0</span> &amp;&amp; inserted &lt; arr[j]; j -= g) &#123;</span><br><span class="line">                    <span class="comment">//待插入数小于他前面的数，进行交换</span></span><br><span class="line">                    arr[j + g] = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j + g] = inserted;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"排序后:"</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复杂度"><a class="markdownIt-Anchor" href="#复杂度"></a> 复杂度</h1><p>希尔排序的复杂度与增量有关，不同的增量会产生不同的复杂度</p><p>像我们思路分析中的数组对半取值为增量5，直至为1，其实并不是最优增量序列。</p><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(n^1.25)</td><td>O(n)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><h1 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h1><p>希尔排序时直接插入排序的优化版，解决了直接插入排序在面对大量数据时的效率低问题。</p><p>希尔排序适用于大规模无序数组的排序，且相对于直接插入排序数组越大优势越大</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.larscheng.com/others/allsort/&quot;&gt;❤查看排序算法动态演示❤查看排序算法动态演示❤查看排序算法动态演示&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;希尔排序-shell-sort&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#希尔排序-shell-sort&quot;&gt;&lt;/a&gt; 希尔排序 （Shell Sort）&lt;/h1&gt;
&lt;p&gt;希尔排序 也称做&lt;code&gt;递减增量排序算法&lt;/code&gt;，1959年&lt;code&gt;Shell&lt;/code&gt;发明，是插入排序的一种&lt;code&gt;高速而稳定&lt;/code&gt;的改进版本&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="排序" scheme="https://www.larscheng.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序1：直接插入排序</title>
    <link href="https://www.larscheng.com/insertion/"/>
    <id>https://www.larscheng.com/insertion/</id>
    <published>2019-09-05T12:29:28.000Z</published>
    <updated>2022-01-02T05:18:26.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>原文作者：<a href="https://itimetraveler.github.io" target="_blank" rel="noopener">Mr.Seven</a><br>原文地址：<a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">八大排序算法总结与java实现</a><br><a href="https://www.larscheng.com/others/allsort/style/">❤查看排序算法动态演示❤查看排序算法动态演示❤查看排序算法动态演示</a></p></blockquote><h1 id="直接插入排序insertion-sort"><a class="markdownIt-Anchor" href="#直接插入排序insertion-sort"></a> 直接插入排序（Insertion Sort）</h1><p>插入排序的设计初衷是<code>往有序的数组中快速插入一个新的元素</code>。它的算法思想是：把要排序的数组分为了两个部分, 一部分是数组的<code>全部元素</code>(除去待插入的元素), 另一部分是<code>待插入</code>的元素; 先将第一部分排序完成, 然后再插入这个元素. 其中第一部分的排序也是通过再次拆分为两部分来进行的.</p><a id="more"></a><p>插入排序由于操作不尽相同, 可分为 <code>直接插入排序</code> , <code>折半插入排序</code>(又称二分插入排序), <code>链表插入排序</code> , <code>希尔排序</code> 。我们先来看下直接插入排序。</p><h1 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h1><p>将数组中<code>所有元素</code>依次和之前<code>已经排序好</code>的元素序列相比较，如果选择的元素比已排序的元素小，则进行交换，直到所有元素都比较过为止</p><p>动态示意图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/Insertion-sort-example-300px.gif" alt="使用插入排序为一列数字进行排序的过程"></p><h1 id="算法描述"><a class="markdownIt-Anchor" href="#算法描述"></a> 算法描述</h1><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤②~⑤</li></ol><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/sort/insert-sort.gif" alt="直接插入排序"></p><p>算法实现中比较有意思的一点是，在每次比较操作发现取出来的新元素<code>小于等于</code>已排序的元素时，可以将已排序的元素移到下一位置，<br>然后将取出来的新元素插入该位置（<code>即相邻位置对调</code>），接着再与前面的已排序的元素进行比较，如上图所示，<code>这样做缺点是交换操作代价比较大</code>。</p><p>另一种做法是：将新元素取出（挖坑），从左到右依次与已排序的元素比较，如果<code>已排序的元素大于取出的新元素</code>，那么将该元素移动到下一个位置（填坑），<br>接着再与前面的已排序的元素比较，直到找到已排序的元素小于等于新元素的位置，这时再将新元素插入进去。就像<code>基本思想</code>中的动图演示的那样。</p><p>如果<code>比较操作的代价比交换操作大</code>的话，可以采用二分查找法来减少比较操作的数目。可以认为是插入排序的一个变种，称为二分查找插入排序。</p><h1 id="java代码实现"><a class="markdownIt-Anchor" href="#java代码实现"></a> Java代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * 直接插入排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lars</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/5 16:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        insertSort1(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] aa = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        insertSort2(aa);</span><br><span class="line">        System.out.println(Arrays.toString(aa));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 交换次数较多实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort2</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j-<span class="number">1</span>]&gt;a[j])&#123;</span><br><span class="line">                    <span class="comment">//j为待排序元素，j-1为前一位元素，j-1&gt;j交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = a[j];</span><br><span class="line">                    a[j]=a[j-<span class="number">1</span>];</span><br><span class="line">                    a[j-<span class="number">1</span>]=temp;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//待排序元素大于他前1位元素，位置不变，循环结束</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 交换次数较少</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort1</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="comment">//直接取出第二个元素开始比较，第一个元素默认已完成排序</span></span><br><span class="line">            <span class="keyword">int</span> temp = a[i];</span><br><span class="line">            <span class="comment">// temp与他前面的有序元素依次比较，找到自己的位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="comment">//temp小于他前一位的元素，交换位置，</span></span><br><span class="line">                <span class="comment">// 继续循环比较(j&gt;0如果不成立，说明已经比较到0位置,说明temp属于当前最小，直接放当前位置)</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; a[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">                    a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">                    <span class="comment">//相互交换（可以先不进行移动）</span></span><br><span class="line">                    <span class="comment">//a[j-1] = temp;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//temp大于他前面的元素，temp就放置在当前位置</span></span><br><span class="line">                    a[j] = temp;</span><br><span class="line">                    <span class="comment">//该元素位置确定，结束循环，到下一个</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复杂度"><a class="markdownIt-Anchor" href="#复杂度"></a> 复杂度</h1><p>直接插入排序复杂度如下：</p><ul><li>最好情况下，排序前对象已经按照要求的有序。比较次数(KCN)：<code>n−1</code>；移动次数(RMN)为<code>0</code>。则对应的时间复杂度为<code>O(n)</code>。</li><li>最坏情况下，排序前对象为要求的顺序的反序。第i趟时第i个对象必须与前面i个对象都做排序码比较，并且每做1次比较就要做1次数据移动（从上面给出的代码中看出）。比较次数(KCN)：<code>n²/2</code> ; 移动次数(RMN)为：<code>n²/2</code>。则对应的时间复杂度为<code>O(n²)</code>。</li><li>如果排序记录是随机的，那么根据概率相同的原则，在平均情况下的排序码比较次数和对象移动次数约为<code>n²/2</code>，因此，<strong>直接插入排序的平均时间复杂度</strong>为<code>O(n²)</code>。</li></ul><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><p>Tips: 由于直接插入排序每次只移动一个元素的位， 并不会改变值相同的元素之间的排序， 因此它是一种稳定排序。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文作者：&lt;a href=&quot;https://itimetraveler.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mr.Seven&lt;/a&gt;&lt;br&gt;
原文地址：&lt;a href=&quot;https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;八大排序算法总结与java实现&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://www.larscheng.com/others/allsort/style/&quot;&gt;❤查看排序算法动态演示❤查看排序算法动态演示❤查看排序算法动态演示&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;直接插入排序insertion-sort&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#直接插入排序insertion-sort&quot;&gt;&lt;/a&gt; 直接插入排序（Insertion Sort）&lt;/h1&gt;
&lt;p&gt;插入排序的设计初衷是&lt;code&gt;往有序的数组中快速插入一个新的元素&lt;/code&gt;。它的算法思想是：把要排序的数组分为了两个部分, 一部分是数组的&lt;code&gt;全部元素&lt;/code&gt;(除去待插入的元素), 另一部分是&lt;code&gt;待插入&lt;/code&gt;的元素; 先将第一部分排序完成, 然后再插入这个元素. 其中第一部分的排序也是通过再次拆分为两部分来进行的.&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="排序" scheme="https://www.larscheng.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款博客一文多发的良心工具OpenWrite</title>
    <link href="https://www.larscheng.com/openwrite/"/>
    <id>https://www.larscheng.com/openwrite/</id>
    <published>2019-08-28T02:56:39.000Z</published>
    <updated>2022-01-02T05:18:26.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><blockquote><p>许多网友想看一文多发的<a href="https://www.openwrite.cn/" target="_blank" rel="noopener">OpenWrite</a>，今天，它来了！别问落地价，因为内测无价！</p><blockquote><p>这款实用工具，可支持十大博客平台一键发布，是博主们的发文神器</p><blockquote><p>你看它多种平台、一键管理、后台界面优雅、还有签到计划</p><blockquote><p>怎么样，还不来体验一下(<code>编不下去了😂</code>)</p></blockquote></blockquote></blockquote></blockquote><p>Open Write官网：<a href="https://www.openwrite.cn" target="_blank" rel="noopener">https://www.openwrite.cn</a></p><h1 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h1><p>我也是去年刚刚开始写博客的小菜鸡，虽然不会有人来爬我写的小白文(<code>有我也不知道哇😂</code>)</p><p>但是出于技术博主的惯例，大家都希望自己的文章可以被更多人看到，于是写完一篇博客之后会有以下操作：</p><blockquote><p>思否发布-&gt;简书发布-&gt;CSDN发布-&gt;博客园发布-&gt;掘金发布-&gt;…</p></blockquote><p>呕心沥血创作一篇文章已经掉了很多头发了，没想到还要再重复发布操作N次，每次写完文章要发布时都<code>头皮发麻</code></p><blockquote><p>但是、But…救星来了，<font color="red"><a href="https://www.openwrite.cn/" target="_blank" rel="noopener">OpenWrite</a></font>，一款让你专注文章创作，而不用为文章发布而烦恼的平台工具。</p></blockquote><h1 id="目前支持的技术平台"><a class="markdownIt-Anchor" href="#目前支持的技术平台"></a> 目前支持的技术平台</h1><ul><li>思否</li><li>CSDN</li><li>掘金</li><li>博客园</li><li>简书</li><li>知乎</li><li>开源中国</li><li>Spring4All</li><li>技术社区</li><li>今日头条</li></ul><p>据群内大佬们讨论，后期可能会加入其他渠道（个人博客等）</p><blockquote><p>目前已经支持微信公众号一键复制功能，大大节省了公众号文章的维护和处理。</p></blockquote><h1 id="特色功能"><a class="markdownIt-Anchor" href="#特色功能"></a> 特色功能</h1><p>OpenWrite除了核心功能一文多发外，还有两个特色功能。</p><h2 id="签到计划"><a class="markdownIt-Anchor" href="#签到计划"></a> 签到计划</h2><p>签到计划是我们为每位博主提供的粘性工具，读者通过二维码扫描参与签到计划，而二维码可以由博主放置在任意平台的博文下，参考示例如<a href="https://mp.weixin.qq.com/s/yhQgYnLSagzCBVrIN3MZMQ" target="_blank" rel="noopener">自律到极致-人生才精致：第12期 点击链接查看</a></p><h2 id="赞助平台"><a class="markdownIt-Anchor" href="#赞助平台"></a> 赞助平台</h2><p>如果说签到计划是博主与读者的互动，那么赞助平台就是博主与赞助商的互动。</p><p>举个栗子：</p><p>我是一个<code>写博客的</code>,我有很多读者很多阅读量。<br>XXX是一个<code>出版社的</code>,需要为某本或者某批书做宣传。</p><p>这里两个角色就达成了供求关系，博主就是流量主，出版社的就是赞助商。</p><p>详细使用介绍可以参考<a href="https://mp.weixin.qq.com/s/qBwMFdxcdmMdY-qxAmwU6Q" target="_blank" rel="noopener">OpenWrite 赞助平台全流程说明</a></p><h1 id="使用体验"><a class="markdownIt-Anchor" href="#使用体验"></a> 使用体验</h1><p>目前OpenWrite还属于内测期间，功能也都在完善中，如果你也有一文多发的烦恼不妨来体验下</p><blockquote><p>我已经用了两个星期了，贼好用😁😁😁</p></blockquote><p>Open Write官网：<a href="https://www.openwrite.cn" target="_blank" rel="noopener">https://www.openwrite.cn</a></p><p>Open Write内测入口：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/life/20190828105258.png" alt=""></p><h1 id="感谢"><a class="markdownIt-Anchor" href="#感谢"></a> 感谢</h1><p>最后还是要感谢各位OpenWrite的开发大佬 <a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="https://www.bysocket.com/" target="_blank" rel="noopener">泥瓦匠</a>，等等其他大佬们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="https://www.larscheng.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="工具介绍" scheme="https://www.larscheng.com/tags/%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>近期学习计划</title>
    <link href="https://www.larscheng.com/study-plan/"/>
    <id>https://www.larscheng.com/study-plan/</id>
    <published>2019-08-27T01:46:08.000Z</published>
    <updated>2022-01-02T05:18:26.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前几天报名了软考(<code>软件设计师</code>)，本来应该大学就应该拿下的证，当时没有重视，现在重新开始备考</p><p>备考前给自己规划了如下计划，希望在复习备考的同时可以巩固计算机相关的基础知识</p><p>这里给自己立个🏳‍🌈flag</p><blockquote><p>认真复习，一次通过</p></blockquote><h3 id="复习资料"><a class="markdownIt-Anchor" href="#复习资料"></a> 复习资料</h3><ul><li>《软件设计师教程》-第五版</li><li>《软件设计师考试冲刺（习题与解答）》</li><li>《软件设计师真题精析与命题密卷》</li><li><a href="https://www.bilibili.com/video/av19665344/" target="_blank" rel="noopener">B站视频教程</a></li><li><a href="https://pan.baidu.com/s/1zE9Q1uq4LYwgz-UwbUeKvw" target="_blank" rel="noopener">软件设计师资料包</a>, 提取码：<code>gnuc</code> : 内含视频(<code>2018年</code>)、讲义、教程、真题、模拟题…等等等</li></ul><h3 id="备考安排如下"><a class="markdownIt-Anchor" href="#备考安排如下"></a> 备考安排如下：</h3><ul><li><s>step1😄: 考试大纲，考试内容、重难点梳理（8.18前结束）</s></li><li>step2😋: 一轮复习+刷题（9.29前结束）<ul><li>根据《考试冲刺》中的<code>考点提炼</code>去《软件设计师教程》中复习知识，复习完后回来做《考试冲刺》中的习题，并纠错记录</li></ul></li><li>step3😘: 二轮复习+刷题（10.27前结束）<ul><li>刷历年真题卷，刷题后回《软件设计师教程》复习总结</li></ul></li><li>step4😎: 最后冲刺汇总知识点（11.9结束）<ul><li>刷冲刺题、模拟题。</li></ul></li></ul><h3 id="打卡计划"><a class="markdownIt-Anchor" href="#打卡计划"></a> 打卡计划：</h3><ol><li>每天至少2个小时复习时间</li><li>每天记录当日学习内容(<a href="https://www.larscheng.com/others/life/">打卡记录</a><code>不定时更新</code>)</li><li>每周总结复习进度</li></ol>]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="生活" scheme="https://www.larscheng.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="学习计划" scheme="https://www.larscheng.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Nacos（九）：Nacos集群部署和遇到的问题</title>
    <link href="https://www.larscheng.com/nacos-cluster/"/>
    <id>https://www.larscheng.com/nacos-cluster/</id>
    <published>2019-08-16T03:40:31.000Z</published>
    <updated>2022-01-02T05:18:26.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>前面的系列文章已经介绍了Nacos的如何接入SpringCloud，以及Nacos的基本使用方式</p><p>之前的文章中都是基于<code>单机模式</code>部署进行讲解的，本文对Nacos的<code>集群</code>部署方式进行说明</p><a id="more"></a><h1 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h1><ul><li>JDK8</li><li>Centos7.5(ip:<code>10.1.8.27</code>)</li><li>MySQL 5.6.5+</li><li>Nacos-server：1.0.1</li></ul><blockquote><p>请提前下载Nacos-server：1.0.1压缩包并解压至相应目录</p><blockquote><p>本次的Nacos-server在linux服务器上进行启动。</p></blockquote></blockquote><h1 id="集群模式部署"><a class="markdownIt-Anchor" href="#集群模式部署"></a> 集群模式部署</h1><p>Nacos文档中提供了三种集群部署方案</p><ol><li><code>http://ip1:port/openAPI</code> 直连ip模式：<ul><li>ip+端口进行部署，客户端直接连接Nacos的ip</li></ul></li><li><code>http://Vip:port/openAPI</code> 挂载虚拟IP模式：<ul><li>配合KeepAlive，Nacos真实ip都挂载虚拟Ip下</li><li>客户端访问Vip发起请求</li><li>当主Nacos宕机后，备用Nacos接管，实现高可用，</li></ul></li><li><code>http://www.nacostest.com:port/openAPI</code>  挂载虚拟IP+域名模式：<ul><li>为虚拟ip绑定一个域名，当Nacos集群迁移时，客户端配置无需修改。</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190815145919.png" alt=""></p><p>这三种方案都是为了尽可能实现高可用，后两种方案除了基本的部署流程外更多侧重于实现高可用的工作上</p><blockquote><p>本文以第一种ip+端口的方式为大家介绍集群部署方式</p></blockquote><p>当然<code>ip+端口</code>也有多种部署方式</p><ul><li>1ip+n端口+Nginx：普通玩家部署方式，没有过多服务器，单台服务器启动多个nacos实例，仅适合测试使用</li><li>nip+n端口+Nginx：RMB玩家部署方式，服务器资源充足，组建完美集群，实现更好的容灾与隔离</li></ul><p>无论怎么部署，部署方式都是一样的，这里我以<code>1ip+3端口+Nginx</code>的方式进行集群搭建</p><h2 id="修改配置"><a class="markdownIt-Anchor" href="#修改配置"></a> 修改配置</h2><p>1、修改Nacos-server目录<code>conf/</code>下的<code>application.properties</code>文件，添加mysql数据源</p><p>2、修改集群配置</p><p>ip和端口的规划如下:</p><table><thead><tr><th>ip</th><th>端口</th></tr></thead><tbody><tr><td>10.1.8.27</td><td>8849</td></tr><tr><td>10.1.8.27</td><td>8850</td></tr><tr><td>10.1.8.27</td><td>8851</td></tr></tbody></table><p>修改<code>conf/</code>下的<code>cluster.conf.example</code>文件，将其命名为<code>cluster.conf</code>，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ip:port</span><br><span class="line">10.1.8.27:8849</span><br><span class="line">10.1.8.27:8850</span><br><span class="line">10.1.8.27:8851</span><br></pre></td></tr></table></figure><blockquote><p>注：一定要记得将配置文件重命名为<code>cluster.conf</code>, 最好用实际ip，而非<code>127.0.0.1</code>，否则会出现问题</p></blockquote><p>3、修改启动脚本</p><p>我们要在单台服务器上启动多个Nacos实例，要保证三个实例为不同的端口，这里我们可以修改启动脚本<br>定位到<code>export FUNCTION_MODE=&quot;all&quot;</code>这一行，修改脚本内容，使其支持以<code>-p</code>传入端口参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MODE=<span class="string">"cluster"</span></span><br><span class="line"><span class="built_in">export</span> FUNCTION_MODE=<span class="string">"all"</span></span><br><span class="line"><span class="comment"># 新加</span></span><br><span class="line"><span class="built_in">export</span> SERVER_PORT=<span class="string">"8848"</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">":m:f:p:"</span> opt</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">        m)</span><br><span class="line">            MODE=<span class="variable">$OPTARG</span>;;</span><br><span class="line">        f)</span><br><span class="line">            FUNCTION_MODE=<span class="variable">$OPTARG</span>;;</span><br><span class="line">        <span class="comment"># 新加</span></span><br><span class="line">        p)</span><br><span class="line">            SERVER_PORT=<span class="variable">$OPTARG</span>;;</span><br><span class="line">        ?)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Unknown parameter"</span></span><br><span class="line">        <span class="built_in">exit</span> 1;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 新加</span></span><br><span class="line">JAVA_OPT=<span class="string">"<span class="variable">$&#123;JAVA_OPT&#125;</span> -Dserver.port=<span class="variable">$&#123;SERVER_PORT&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>相应的，修改shutdown脚本，使其可接收参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新加内容</span></span><br><span class="line">PORT=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="variable">$PORT</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"please select stop port!"</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加PORT过滤</span></span><br><span class="line">pid=`ps ax | grep -i <span class="string">'nacos.nacos'</span> |grep java |grep <span class="variable">$&#123;PORT&#125;</span> | grep -v grep | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后边省略...</span></span><br></pre></td></tr></table></figure><h2 id="启动nacos"><a class="markdownIt-Anchor" href="#启动nacos"></a> 启动Nacos</h2><p>执行如下三条命令</p><blockquote><p>bash <a href="http://startup.sh" target="_blank" rel="noopener">startup.sh</a> -p 8849<br>bash <a href="http://startup.sh" target="_blank" rel="noopener">startup.sh</a> -p 8850<br>bash <a href="http://startup.sh" target="_blank" rel="noopener">startup.sh</a> -p 8851</p></blockquote><p>**如果你的机器不能同时启动3个实例，检查是否内存不够了，可以适当调整JVM参数  **</p><p>调整启动脚本中<code>JAVA_OPT=&quot;${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m</code>中的<code>-Xms</code> <code>-Xmx</code> <code>-Xmn</code></p><p>启动成功后会打印如下一句话：</p><blockquote><p>nacos is starting，you can check the /usr/local/nacos/nacos/logs/start.out</p></blockquote><p>查看该目录下的start.out文件，可以看到如下日志</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190815171218.png" alt="startup"></p><p>此时，多节点的集群雏形已经搭建好了，可以试着访问Nacos后台</p><p><a href="http://ip:8849/nacos/index.html" target="_blank" rel="noopener">http://ip:8849/nacos/index.html</a><br><a href="http://ip:8850/nacos/index.html" target="_blank" rel="noopener">http://ip:8850/nacos/index.html</a><br><a href="http://ip:8851/nacos/index.html" target="_blank" rel="noopener">http://ip:8851/nacos/index.html</a></p><p>不出意外,可以正常访问到Nacos控制台</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190816085452.png" alt=""></p><p>从图上可以看到集群节点共有三个，其中端口8850为<code>leader</code></p><h2 id="配置nginx"><a class="markdownIt-Anchor" href="#配置nginx"></a> 配置Nginx</h2><p>完成上面的配置后，已经基本完成集群搭建的90%了</p><p>这里我们可以通过Nginx配置，为Nacos提供统一的入口，来实现一个简单的负载均衡</p><p>Nginx配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream nacos-server &#123;</span><br><span class="line">  server 127.0.0.1:8849;</span><br><span class="line">  server 127.0.0.1:8850;</span><br><span class="line">  server 127.0.0.1:8851;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 8848;</span><br><span class="line">  server_name  localhost;</span><br><span class="line">  location /nacos/ &#123;</span><br><span class="line">    proxy_pass http://nacos-server/nacos/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令 <code>sudo nginx</code>启动nginx</p><p>通过8848端口访问Nacos后台，此时Nginx会将请求分发至<code>nacos-server</code>下的地址中，这里默认的分发策略是<code>线性轮询</code></p><h2 id="客户端测试"><a class="markdownIt-Anchor" href="#客户端测试"></a> 客户端测试</h2><blockquote><p>这里继续使用之前的Demo项目（<a href="https://www.larscheng.com/config-service">Nacos（四）</a>）</p></blockquote><p>1、修改下项目配置文件<code>bootstarp.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">10.1</span><span class="number">.8</span><span class="number">.27</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">10.1</span><span class="number">.8</span><span class="number">.27</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br></pre></td></tr></table></figure><blockquote><p>注：主要是修改注册中心和配置中新的地址，记得替换成你的服务器地址哦</p></blockquote><p>2、启动前确保已经向Nacos中添加配置文件，如果已经添加可以忽略</p><p>在公共空间(public)中新建一个配置文件DataID: <code>nacos-config.yml</code>, 配置内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">    port:</span> <span class="number">9989</span></span><br><span class="line"><span class="attr">nacos:</span></span><br><span class="line"><span class="attr">    config:</span> <span class="string">配置文件已持久化到数据库中...</span></span><br></pre></td></tr></table></figure><p>3、启动Nacos-config项目</p><p>启动成功后检查日志和Nacos控制台</p><p>注册成功的日志如下：</p><blockquote><p>09:37:19.366 [main] [nacos] [64] INFO  o.s.c.a.n.r.NacosServiceRegistry - nacos registry, nacos-config 10.1.8.71:9989 register finished</p></blockquote><p>控制台中可以看到服务已经注册</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190816104055.png" alt=""></p><p>浏览器请求nacos-config中的接口，查看是否可以读取配置</p><p>访问：<a href="http://127.0.0.1:9989/getValue" target="_blank" rel="noopener">http://127.0.0.1:9989/getValue</a> 返回：配置文件和服务信息已持久化到数据库中…</p><blockquote><p>集群的部署方式就介绍完了，文中的集群部署方式不是最优的方式</p><blockquote><p>实际生产环境下，至少应该保证各个Nacos节点位于不同服务器,以实现更好的隔离和容灾</p></blockquote></blockquote><h1 id="出现的问题"><a class="markdownIt-Anchor" href="#出现的问题"></a> 出现的问题</h1><p>这里将我在配置集群时出现的一些问题和解决方式进行说明</p><p>1、在集群搭建完成后，启动nacos客户端进行服务注册时报错了，提示我<code>服务端没有启动，稍后再试</code>，如下：</p><blockquote><p>code:503 msg: server is STARTING now, please try again later!</p></blockquote><p>一脸懵B，Nacos后台都可以访问的鸭，为啥说我没启动。翻阅Nacos-server的源码后</p><ul><li>后台可访问只能说明<code>nacos-consloe</code>模块启动成功</li><li>无法注册服务<code>nacos-naming</code>模块可能启动失败了</li></ul><p>参考了github中的<a href="https://github.com/alibaba/nacos/issues/770" target="_blank" rel="noopener">#770-issues</a></p><pre><code>必须保证`InetAddress.getLocalHost().getHostAddress()`或者`hostname -i`打印的结果是  192.xxx.xxx.xxx而不是`127.0.0.1`才行</code></pre><p>解决办法如下：</p><ul><li>修改hosts，在hosts文件中添加<code>yourip hostname</code>，例如：<code>10.1.8.27 lars</code></li><li>修改cluster.conf,修改集群配置文件，全部用实际ip+端口的方式，而非<code>127.0.0.1</code></li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>Nacos的集群部署基本就介绍完了，官方推荐的三种方式，他们的基本部署思路和方式都大同小异，只不过在高可用上有所不同，挑选你适合的方式动手搭建集群试试吧。</p><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://nacos.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">Nacos支持三种部署模式</a></p><p><a href="https://github.com/alibaba/nacos/issues" target="_blank" rel="noopener">社区issues</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;前面的系列文章已经介绍了Nacos的如何接入SpringCloud，以及Nacos的基本使用方式&lt;/p&gt;
&lt;p&gt;之前的文章中都是基于&lt;code&gt;单机模式&lt;/code&gt;部署进行讲解的，本文对Nacos的&lt;code&gt;集群&lt;/code&gt;部署方式进行说明&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
      <category term="Nacos" scheme="https://www.larscheng.com/categories/SpringCloud/Nacos/"/>
    
    
      <category term="Nacos" scheme="https://www.larscheng.com/tags/Nacos/"/>
    
      <category term="注册中心" scheme="https://www.larscheng.com/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Nacos（八）：Nacos持久化</title>
    <link href="https://www.larscheng.com/nacos-persistence/"/>
    <id>https://www.larscheng.com/nacos-persistence/</id>
    <published>2019-08-12T11:00:38.000Z</published>
    <updated>2022-01-02T05:18:26.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>前景回顾：</p><ul><li><a href="https://www.larscheng.com/nacos-shareconfig/">Nacos（七）：Nacos共享配置</a></li><li><a href="https://www.larscheng.com/nacos-namespace/">Nacos（六）：多环境下如何“管理”及“隔离”配置和服务</a></li><li><a href="https://www.larscheng.com/config-profile/">Nacos（五）：多环境下如何“读取”Nacos中相应环境的配置</a></li><li><a href="https://www.larscheng.com/config-service/">Nacos（四）：SpringCloud项目中接入Nacos作为配置中心</a></li></ul><p>前面的七篇文章，从Nacos介绍，到Nacos做注册中心、做配置中心，一直都没有提及持久化的问题。</p><a id="more"></a><blockquote><p>我们服务的信息、配置的信息都放在哪的？</p></blockquote><p>当我们使用默认配置启动Nacos时，所有配置文件都被Nacos保存在了内置的数据库中。</p><blockquote><p>在0.7版本之前，在单机模式时nacos使用嵌入式数据库实现数据的存储，不方便观察数据存储的基本情况。0.7版本增加了支持mysql数据源能力</p></blockquote><p>如果使用内嵌数据库，注定会有存储上限，本文带大家一起将Nacos中的数据实现持久化</p><h1 id="我的环境"><a class="markdownIt-Anchor" href="#我的环境"></a> 我的环境</h1><ul><li>Windows10</li><li>JDK8</li><li>SpringCloud：Finchley.RELEASE</li><li>SpringBoot：2.0.4.RELEASE</li><li>spring-cloud-alibaba-dependencies：0.2.2.RELEASE</li><li>Nacos-server：1.0.1</li></ul><p><strong>本文的项目Demo继续沿用之前文章中的聚合工程<code>Nacos</code>,若小伙伴还没有之前的环境，可至<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">源码地址</a>中下载</strong></p><blockquote><p>本文的演示环境为：windows平台</p></blockquote><h1 id="项目准备"><a class="markdownIt-Anchor" href="#项目准备"></a> 项目准备</h1><p>本文使用<a href="https://www.larscheng.com/config-service/">Nacos（四）</a>项目代码作为演示</p><p>项目内容不做修改</p><h1 id="安装数据库"><a class="markdownIt-Anchor" href="#安装数据库"></a> 安装数据库</h1><p>目前Nacos仅支持<code>Mysql</code>数据库，且版本要求：<code>5.6.5+</code></p><h1 id="初始化数据库"><a class="markdownIt-Anchor" href="#初始化数据库"></a> 初始化数据库</h1><p>Nacos的数据库脚本文件在我们下载Nacos-server时的压缩包中就有</p><p>进入<code>nacos-server-1.0.1\nacos\conf</code>目录，初始化文件：<code>nacos-mysql.sql</code></p><p>此处我创建一个名为 <code>mynacos</code> 的数据库，然后执行初始化脚本，成功后会生成 <code>11</code> 张表</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/newNacosdb.gif" alt="初始化数据库"></p><h1 id="修改配置文件"><a class="markdownIt-Anchor" href="#修改配置文件"></a> 修改配置文件</h1><p>这里是需要修改Nacos-server的配置文件</p><p>Nacos-server其实就是一个Java工程或者说是一个Springboot项目，他的配置文件在<code>nacos-server-1.0.1\nacos\conf</code>目录下，名为 <code>application.properties</code>，在文件底部添加数据源配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://127.0.0.1:3306/mynacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><br><span class="line">db.user=root</span><br><span class="line">db.password=123456</span><br></pre></td></tr></table></figure><h1 id="启动nacos-server和nacos-config"><a class="markdownIt-Anchor" href="#启动nacos-server和nacos-config"></a> 启动Nacos-server和Nacos-config</h1><p>先启动Nacos-server，启动方式不变，直接双击执行<code>nacos-server-1.0.1\nacos\bin</code>下的<code>startup.cmd</code>文件</p><p>启动成功后进入Nacos控制台，此时的Nacos控制台中焕然一新，之前的数据都不见了</p><blockquote><p>因为加入了新的数据源，Nacos从mysql中读取所有的配置文件，而我们刚刚初始化的数据库是干干净净的，自然不会有什么数据和信息显示。</p></blockquote><p>在公共空间(public)中新建一个配置文件DataID: <code>nacos-config.yml</code>, 配置内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">    port:</span> <span class="number">9989</span></span><br><span class="line"><span class="attr">nacos:</span></span><br><span class="line"><span class="attr">    config:</span> <span class="string">配置文件已持久化到数据库中...</span></span><br></pre></td></tr></table></figure><p>再启动<a href="https://www.larscheng.com/config-service/">Nacos（四）</a>中的demo项目。服务启动成功后，观察Nacos控制台如下</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190812111600.png" alt="nacos-consloe"></p><h1 id="验证是否持久化到数据库中"><a class="markdownIt-Anchor" href="#验证是否持久化到数据库中"></a> 验证是否持久化到数据库中</h1><p>观察数据库<code>mynacos</code>中的数据库表 <code>config_info</code> , 如下</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190812185122.png" alt="config_info"><br>请求一下接口 <a href="http://127.0.0.1:9989/getValue" target="_blank" rel="noopener">http://127.0.0.1:9989/getValue</a> 返回结果：</p><blockquote><p>配置文件已持久化到数据库中…</p></blockquote><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>Nacos通过集中式存储来保证数据的持久化，同时也为Nacos集群部署奠定了基础</p><p>试想一下，如果我们以之前的方式启动Nacos，如果想组建Nacos集群，那各个节点中的数据唯一性就是最大的问题</p><p>Nacos采用了单一数据源，直接解决了分布式和集群部署中的一致性问题。</p><h1 id="参考和感谢"><a class="markdownIt-Anchor" href="#参考和感谢"></a> 参考和感谢</h1><p><a href="http://blog.didispace.com/spring-cloud-alibaba-4/" target="_blank" rel="noopener">Spring Cloud Alibaba基础教程：Nacos的数据持久化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;前景回顾：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.larscheng.com/nacos-shareconfig/&quot;&gt;Nacos（七）：Nacos共享配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.larscheng.com/nacos-namespace/&quot;&gt;Nacos（六）：多环境下如何“管理”及“隔离”配置和服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.larscheng.com/config-profile/&quot;&gt;Nacos（五）：多环境下如何“读取”Nacos中相应环境的配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.larscheng.com/config-service/&quot;&gt;Nacos（四）：SpringCloud项目中接入Nacos作为配置中心&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面的七篇文章，从Nacos介绍，到Nacos做注册中心、做配置中心，一直都没有提及持久化的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
      <category term="Nacos" scheme="https://www.larscheng.com/categories/SpringCloud/Nacos/"/>
    
    
      <category term="Nacos" scheme="https://www.larscheng.com/tags/Nacos/"/>
    
      <category term="配置中心" scheme="https://www.larscheng.com/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Nacos（七）：Nacos共享配置</title>
    <link href="https://www.larscheng.com/nacos-shareconfig/"/>
    <id>https://www.larscheng.com/nacos-shareconfig/</id>
    <published>2019-08-07T10:13:27.000Z</published>
    <updated>2022-01-02T05:18:26.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>前景回顾：</p><ul><li><a href="https://www.larscheng.com/nacos-namespace/">Nacos（六）：多环境下如何“管理”及“隔离”配置和服务</a></li><li><a href="https://www.larscheng.com/config-profile/">Nacos（五）：多环境下如何“读取”Nacos中相应环境的配置</a></li><li><a href="https://www.larscheng.com/config-service/">Nacos（四）：SpringCloud项目中接入Nacos作为配置中心</a></li></ul><p>前几章已经基本介绍了springcloud项目结合Nacos的大部分用法，本文介绍一下Nacos作为配置中心时，如何读取共享配置</p><a id="more"></a><h1 id="我的环境"><a class="markdownIt-Anchor" href="#我的环境"></a> 我的环境</h1><ul><li>Windows10</li><li>JDK8</li><li>SpringCloud：Finchley.RELEASE</li><li>SpringBoot：2.0.4.RELEASE</li><li>spring-cloud-alibaba-dependencies：0.2.2.RELEASE</li><li>Nacos-server：1.0.1</li></ul><p><strong>本文的项目Demo继续沿用之前文章中的聚合工程<code>Nacos</code>,若小伙伴还没有之前的环境，可至<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">源码地址</a>中下载</strong></p><h1 id="场景描述"><a class="markdownIt-Anchor" href="#场景描述"></a> 场景描述</h1><blockquote><p>一个项目中服务数量增加后，配置文件相应增加，多个配置文件中会存在相同的配置，那么我们可以将相同的配置独立出来，作为该项目中各个服务的共享配置文件，每个服务都可以通过Nacos进行共享配置的读取</p></blockquote><p>下面用一个demo演示下，是否可行</p><ul><li>demo工程：nacos-config-share</li><li>配置文件：nacos-config-share.yml</li><li>共享配置文件：shareconfig1.yml，shareconfig2.yml</li></ul><h1 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h1><p>一如往常，还是在聚合工程Nacos下创建名为<code>nacos-config-share</code>的子工程，其pom.xml文件依赖与之前的项目都一致，如果您没有之前的项目可参考<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">源码地址</a></p><p>1、修改springboot启动类<code>NacosConfigShareApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigShareApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigShareApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;nacos.share&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String share;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;share.config1&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String shareConfig1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;share.config2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String shareConfig2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getValue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> share;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getShare1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShare1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shareConfig1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getShare2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShare2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shareConfig2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、修改该项目的配置文件<code>bootstrap.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-config-share</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="attr">        shared-dataids:</span> <span class="string">shareconfig1.yml,shareconfig2.yml</span></span><br><span class="line"><span class="attr">        refreshable-dataids:</span> <span class="string">shareconfig1.yml,shareconfig2.yml</span></span><br></pre></td></tr></table></figure><blockquote><p>从配置文件可以看出，通过<code>shared-dataids</code>属性来指定要读取共享配置文件的<code>DataID</code>,多个文件用<code>,</code>分隔<br>使用<code>refreshable-dataids</code>指定共享配置文件支持自动刷新</p></blockquote><h1 id="新建配置文件"><a class="markdownIt-Anchor" href="#新建配置文件"></a> 新建配置文件</h1><p>这里我们作为演示，暂不加入Namespace，直接在公共空间中创建及测试</p><p>创建配置文件<code>nacos-config-share.yml</code>,详细如下：</p><ul><li>DataId:<code>nacos-config-share.yml</code></li><li>配置格式：<code>YAML</code></li><li>配置内容：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">    port: 9984</span><br><span class="line">nacos: </span><br><span class="line">    share: nacos-config-share</span><br></pre></td></tr></table></figure></li></ul><p>创建共享配置文件1<code>shareconfig1.yml</code>,详细如下：</p><ul><li>DataId:<code>shareconfig1.yml</code></li><li>配置格式：<code>YAML</code></li><li>配置内容：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">share: </span><br><span class="line">    config1: 这里是共享配置文件1</span><br></pre></td></tr></table></figure></li></ul><p>创建共享配置文件1<code>shareconfig2.yml</code>,详细如下：</p><ul><li>DataId:<code>shareconfig2.yml</code></li><li>配置格式：<code>YAML</code></li><li>配置内容：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">share: </span><br><span class="line">    config2: 这里是共享配置文件2</span><br></pre></td></tr></table></figure></li></ul><p>创建成功后，配置列表如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190807165641.png" alt="shareconfig"></p><h1 id="启动测试"><a class="markdownIt-Anchor" href="#启动测试"></a> 启动测试</h1><p>直接启动项目，如果启动成功。可以看到日志中如下信息：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190807165911.png" alt="startup"></p><p>访问启动类中提供的接口，测试下能否获取到共享配置文件中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问127.0.0.1:9984/getValue,返回：nacos-config-share</span><br><span class="line">访问127.0.0.1:9984/getShare1,返回：这里是共享配置文件1</span><br><span class="line">访问127.0.0.1:9984/getShare2,返回：这里是共享配置文件2</span><br></pre></td></tr></table></figure><p>再测试下<code>refreshable-dataids</code>配置的自动刷新是否生效</p><p>在Nacos控制台中修改共享配置文件<code>shareconfig2.yml</code>的值为：<code>这里是共享配置文件2这里是共享配置文件2</code></p><p>编辑保存后，重新请求 127.0.0.1:9984/getShare2 ，观察返回结果如下：</p><blockquote><p>这里是共享配置文件2这里是共享配置文件2</p></blockquote><p>以上返回结果说明通过在配置文件中指定<code>shared-dataids</code>和<code>refreshable-dataids</code>是可以实现共享配置文件的读取和自动刷新的。</p><h1 id="需求变更"><a class="markdownIt-Anchor" href="#需求变更"></a> 需求变更</h1><blockquote><p>假设现在要读取<code>shareconfig3.yml</code>和<code>shareconfig4.yml</code>文件但是它的Group为<code>SHARE3_GROUP</code>和<code>SHARE4_GROUP</code>,   即共享配置文件与项目自身配置文件不在同一Group中（<code>上边的例子是全都在DEFAULT_GROUP分组</code>）   那如果继续用上边的方法，就无法读取共享配置文件</p></blockquote><p>这时可以使用另一个配置<code>ext-config</code>，它可以由用户自定义指定需要加载的配置<code>DataID、Group以及是否自动刷新</code></p><p>并且<code>ext-config</code>是一个集合（<code>List</code>），支持多个配置文件的指定。</p><h1 id="新建共享配置文件"><a class="markdownIt-Anchor" href="#新建共享配置文件"></a> 新建共享配置文件</h1><p>先创建配置配置文件<code>shareconfig3.yml</code>和<code>shareconfig4.yml</code>，注意他们的Group属性</p><ul><li><p>DataId:<code>shareconfig3.yml</code></p></li><li><p>Group：<code>SHARE3_GROUP</code></p></li><li><p>配置格式：<code>YAML</code></p></li><li><p>配置内容：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">share: </span><br><span class="line">    config3: 这里是共享配置文件3，Group:SHARE3_GROUP</span><br></pre></td></tr></table></figure></li><li><p>DataId:<code>shareconfig4.yml</code></p></li><li><p>Group：<code>SHARE4_GROUP</code></p></li><li><p>配置格式：<code>YAML</code></p></li><li><p>配置内容：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">share: </span><br><span class="line">    config4: 这里是共享配置文件4，Group:SHARE4_GROUP</span><br></pre></td></tr></table></figure></li></ul><p>创建成功页面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190807173312.png" alt="shareconfig34"></p><h1 id="修改项目代码"><a class="markdownIt-Anchor" href="#修改项目代码"></a> 修改项目代码</h1><p>1、在启动类<code>NacosConfigShareApplication.java</code>中新增如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;share.config3&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String shareConfig3;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;share.config4&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String shareConfig4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getShare3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getShare3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> shareConfig3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getShare4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getShare4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> shareConfig4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、修改项目配置文件<code>bootstrap.yml</code>,增加<code>ext-config</code>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-config-share</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="attr">        shared-dataids:</span> <span class="string">shareconfig1.yml,shareconfig2.yml</span></span><br><span class="line"><span class="attr">        refreshable-dataids:</span> <span class="string">shareconfig1.yml,shareconfig2.yml</span></span><br><span class="line"><span class="attr">        ext-config:</span></span><br><span class="line"><span class="attr">          - data-id:</span> <span class="string">shareconfig3.yml</span></span><br><span class="line"><span class="attr">            group:</span> <span class="string">SHARE3_GROUP</span></span><br><span class="line"><span class="attr">            refresh:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          - data-id:</span> <span class="string">shareconfig4.yml</span></span><br><span class="line"><span class="attr">            group:</span> <span class="string">SHARE4_GROUP</span></span><br><span class="line"><span class="attr">            refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="启动进行测试"><a class="markdownIt-Anchor" href="#启动进行测试"></a> 启动进行测试</h1><p>项目经过修改后，可以看到</p><ol><li>项目自身的nacos配置文件属于DEFAULT_GROUP下,默认读取</li><li>shareconfig1.yml,shareconfig2.yml 都属于DEFAULT_GROUP下，通过<code>shared-dataids</code>指定进行读取</li><li>shareconfig3.yml,shareconfig4.yml 都属于<code>非DEFAULT_GROUP</code>下，通过<code>ext-config</code>配置属性进行自定义读取</li></ol><p>启动项目，测试所有的配置文件是否可以正常读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">访问127.0.0.1:9984/getValue,返回：nacos-config-share</span><br><span class="line">访问127.0.0.1:9984/getShare1,返回：这里是共享配置文件1</span><br><span class="line">访问127.0.0.1:9984/getShare2,返回：这里是共享配置文件2这里是共享配置文件2</span><br><span class="line">访问127.0.0.1:9984/getShare3,返回：这里是共享配置文件3，Group:SHARE3_GROUP</span><br><span class="line">访问127.0.0.1:9984/getShare4,返回：这里是共享配置文件4，Group:SHARE4_GROUP</span><br></pre></td></tr></table></figure><p>修改<code>shareconfig4.yml</code>的配置内容为：<code>这里是共享配置文件4，Group:SHARE4_GROUP,支持自动刷新</code>，保存后，再次调用127.0.0.1:9984/getShare4，返回如下：</p><blockquote><p>这里是共享配置文件4，Group:SHARE4_GROUP,支持自动刷新</p></blockquote><p>调用接口后发现，两种共享配置的加载方式都可以正常读取，并且可以一起使用。<code>ext-config</code>的方式实现了用户自定义配置共享配置文件。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>上面的demo已经演示Nacos共享配置的两种实现方式，两种方式针对不同的场景，总结如下：</p><ul><li><code>shared-dataids</code>方式：<ul><li>适合于共享配置文件与项目默认配置文件处于相同Group时，直接两条命令就可以搞定</li><li>优点：配置方便</li><li>缺点：只能在同一Group中</li></ul></li><li><code>ext-config</code>方式：<ul><li>它可以由开发者自定义要读取的共享配置文件的DataId、Group、refresh属性，这样刚好解决了<code>shared-dataids</code>存在的局限性。</li><li>优点：可以与<code>shared-dataids</code>方案结合使用，用户自定义配置。灵活性强</li><li>缺点：配置容易出错，要熟悉YAML语法</li></ul></li></ul><blockquote><p>可见两种方式各有长处，所以如果在开发中需要使用共享配置，大家可以是具体情况而定选择自己最合适的方案。</p></blockquote><p><strong><em>本文源码</em>：<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos</a></strong></p><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="http://blog.yuqiyu.com/spring-cloud-alibaba-nacos-config-share-custom.html" target="_blank" rel="noopener">SpringCloud Alibaba - Nacos Config 自定义共享配置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;前景回顾：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.larscheng.com/nacos-namespace/&quot;&gt;Nacos（六）：多环境下如何“管理”及“隔离”配置和服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.larscheng.com/config-profile/&quot;&gt;Nacos（五）：多环境下如何“读取”Nacos中相应环境的配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.larscheng.com/config-service/&quot;&gt;Nacos（四）：SpringCloud项目中接入Nacos作为配置中心&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前几章已经基本介绍了springcloud项目结合Nacos的大部分用法，本文介绍一下Nacos作为配置中心时，如何读取共享配置&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
      <category term="Nacos" scheme="https://www.larscheng.com/categories/SpringCloud/Nacos/"/>
    
    
      <category term="Nacos" scheme="https://www.larscheng.com/tags/Nacos/"/>
    
      <category term="配置中心" scheme="https://www.larscheng.com/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Nacos（六）：多环境下如何“管理”及“隔离”配置和服务</title>
    <link href="https://www.larscheng.com/nacos-namespace/"/>
    <id>https://www.larscheng.com/nacos-namespace/</id>
    <published>2019-08-06T07:03:05.000Z</published>
    <updated>2022-01-02T05:18:26.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>前景回顾：</p><ul><li><a href="https://www.larscheng.com/config-profile/">Nacos（五）：多环境下如何“读取”Nacos中相应环境的配置</a></li><li><a href="https://www.larscheng.com/config-service/">Nacos（四）：SpringCloud项目中接入Nacos作为配置中心</a></li></ul><p>现如今，在微服务体系中，一个系统往往被拆分为多个服务，每个服务都有自己的配置文件，然后每个系统往往还会准备开发环境、测试环境、正式环境</p><p>我们来说算一算，假设某系统有10个微服务，那么至少有10个配置文件吧，三个环境（dev\test\prod），那就有30个配置文件需要进行管理。</p><p>这么多的配置文件，要修改一个或者多个的时候，稍有不慎可能就会出现改错了、不生效…等等问题。</p><p><strong>那么如果引入Nacos作为配置中心后，如何有效的进行配置文件的管理和不同环境间的隔离区分呢？</strong></p><blockquote><p>别担心，Namespace可以帮助我们进行多环境下的管理和隔离</p></blockquote><a id="more"></a><p>有了上一篇文章的介绍，本文主要从以下几个方面介绍：</p><ul><li>Namespace是什么</li><li>Namespace如何进行配置和服务的管理、隔离</li><li>创建和获取NamespaceID</li><li>Namespace实施方案1</li><li>Namespace实施方案2</li></ul><h1 id="namespace"><a class="markdownIt-Anchor" href="#namespace"></a> Namespace</h1><p>Nacos引入了命名空间(Namespace)的概念来进行<code>多环境配置和服务</code>的管理及隔离</p><p>Namespace也是官方推荐的多环境支持方案。</p><h1 id="如何进行配置和服务的管理-隔离"><a class="markdownIt-Anchor" href="#如何进行配置和服务的管理-隔离"></a> 如何进行配置和服务的管理、隔离</h1><p>当我们的服务达到一定的数量，集中式的管理许多服务会十分不便，</p><p>那我们可以将这些具有相同特征或属性的服务进行分组管理，服务对应的配置也进行分组隔离</p><p>这里的<code>分组</code>就是<code>Namespace</code>的概念，将服务和配置纳入相同的Namespace进行管理</p><p>不同Namespace下的服务和配置之间就隔离开来</p><h1 id="创建和获取namespaceid"><a class="markdownIt-Anchor" href="#创建和获取namespaceid"></a> 创建和获取NamespaceID</h1><p>NamespaceId值是在配置文件配置时必须要填入的配置项，所以需要我们先创建Namespace和Id，步骤如下：</p><p>nacos 的控制台左边功能栏看到有一个<code>命名空间</code>的功能，点击就可以看到<code>新建命名空间</code> 的按钮</p><p>新建成功后，可以在命名空间列表中查看到你所创建的Namespace和他生成的ID值</p><p>这里只是讲解创建步骤，本文继续延用Nacos（五）中创建的<code>DEV、TEST</code></p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190723175908.png" alt=""></p><h1 id="namespace实施方案1"><a class="markdownIt-Anchor" href="#namespace实施方案1"></a> Namespace实施方案1</h1><p>Nacos给出了两种Namespace的实践方案</p><ul><li>面向一个租户</li><li>面向多个租户</li></ul><p>方案1主要说明一下面向一个租户</p><p>从一个租户(用户)的角度来看，如果有多套不同的环境，那么这个时候可以根据指定的环境来创建不同的 namespce，以此来实现多环境的隔离。</p><p>例如，你可能有dev，test和prod三个不同的环境，那么使用一套 nacos 集群可以分别建以下三个不同的 namespace。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190805163212.png" alt="方案1"></p><p>这里的单租户同样也适于小型项目，或者是项目不太多时的实施方案</p><p>通过定义不同的环境，不同环境的项目在不同的Namespace下进行管理，不同环境之间通过Namespace进行隔离</p><p>当多个项目同时使用该Nacos集群时，还可以通过Group进行Namespace内的细化分组</p><p>这里以<code>Namespace：dev</code>为例，在Namespace中通过不同Group进行同一环境中不同项目的<code>再分类</code></p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190805163727.png" alt="方案1内部Group分组"></p><p>有了以上思路，我们通过代码来实践一下</p><h2 id="namespace下新建配置文件"><a class="markdownIt-Anchor" href="#namespace下新建配置文件"></a> Namespace下新建配置文件</h2><p>启动Nacos-Server，进入Nacos控制台，切换到Namespace：dev界面，新建配置文件</p><ul><li>DataId:<code>nacos-namespace-one-dev.yml</code></li><li>Group:<code>namespace-one</code></li><li>配置格式：<code>YAML</code></li><li>配置内容：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nacos: </span><br><span class="line">    config: 项目：nacos-namespace-one，Namespace：dev</span><br></pre></td></tr></table></figure></li></ul><p>继续新建配置文件</p><ul><li>DataId:<code>nacos-namespace-two-dev.yml</code></li><li>Group:<code>namespace-two</code></li><li>配置格式：<code>YAML</code></li><li>配置内容：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nacos: </span><br><span class="line">    config: 项目：nacos-namespace-two，Namespace：dev</span><br></pre></td></tr></table></figure></li></ul><p><strong>切换到Namespace：test环境，按照dev中的创建方式，分别创建<code>nacos-namespace-one-test.yml</code>和<code>nacos-namespace-two-test.yml</code></strong></p><blockquote><p>注意检查DataId是否正确、group、配置内容与环境是否匹配</p></blockquote><h2 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h2><p>在聚合工程Nacos下创建名为<code>nacos-namespace-one</code>的子项目，该工程的依赖文件和启动类的代码与<a href="https://www.larscheng.com/config-service/">Nacos（四）</a>完全一致。</p><blockquote><p>以下NamespaceId均来自创建Namespace时生成的Id，在控制台命名空间页面中可以查看</p></blockquote><p>创建dev环境配置文件<code>bootstrap-dev.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9911</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-namespace-one</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="string">edbd013b-b178-44f7-8caa-e73071e49c4d</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">namespace-one</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="string">edbd013b-b178-44f7-8caa-e73071e49c4d</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">namespace-one</span></span><br></pre></td></tr></table></figure><p>创建test环境配置文件<code>bootstrap-dev.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9912</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-namespace-one</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="number">0133</span><span class="string">bd1e-25c3-4985-96ed-a4e34efdea2e</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">namespace-one</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="number">0133</span><span class="string">bd1e-25c3-4985-96ed-a4e34efdea2e</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">namespace-one</span></span><br></pre></td></tr></table></figure><p><strong>重复以上操作，再创建一个名为<code>nacos-namespace-two</code>的子项目</strong></p><blockquote><p>nacos-namespace-two项目的dev和test启动端口分别设置为9921和9922，group为：namespace-two</p></blockquote><blockquote><p>记得修改<code>spring.application.name</code>、<code>namespace</code>和<code>group</code></p></blockquote><h2 id="启动工程"><a class="markdownIt-Anchor" href="#启动工程"></a> 启动工程</h2><p>分别启动两个项目的两个环境（四个启动类）,如下图</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190805185416.png" alt="两个环境都启动dev和test"></p><p>现在我们有2个项目：<code>nacos-namespace-one</code>和<code>nacos-namespace-two</code></p><p>2个项目分别有两个不同的环境<code>dev</code>和<code>test</code></p><p>此时观察Nacos-Server控制台如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/namespace1.gif" alt="Nacos控制台"></p><p>尝试访问接口来获取配置信息，验证是否可以读取相应环境配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">访问127.0.0.1:9911/getValue,返回：项目：nacos-namespace-one，Namespace：dev</span><br><span class="line">访问127.0.0.1:9912/getValue,返回：项目：nacos-namespace-one，Namespace：test</span><br><span class="line">访问127.0.0.1:9921/getValue,返回：项目：nacos-namespace-two，Namespace：dev</span><br><span class="line">访问127.0.0.1:9922/getValue,返回：项目：nacos-namespace-two，Namespace：test</span><br></pre></td></tr></table></figure><p>通过以上实验，方案1可以达到多环境多项目下的服务、配置管理的目标</p><blockquote><p>方案1通过Namespace来隔离不同的环境（dev\test）,在具体的环境Namespace中通过Group来管理不同的项目</p></blockquote><h1 id="namespace实施方案2"><a class="markdownIt-Anchor" href="#namespace实施方案2"></a> Namespace实施方案2</h1><p>了解了单租户的方案1，再来看看Nacos推荐的面向多租户的方案2</p><p>从多个租户(用户)的角度来看，每个租户(用户)可能会有自己的 namespace,每个租户(用户)的配置数据以及注册的服务数据都会归属到自己的 namespace 下，以此来实现多租户间的数据隔离。</p><p>例如超级管理员分配了三个租户，分别为张三、李四和王五。张三负责A项目，李四负责B项目，王五负责C项目</p><p>分配好了之后，各租户用自己的账户名和密码登录后，创建自己的命名空间。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190805194232.png" alt="多租户namespace"></p><blockquote><p>方案2通过Namespace来隔离多租户之间的服务和配置，但不仅于此，他有很好的扩展性</p></blockquote><p>在该方案中，Group同样也有用武之地。</p><p><strong>需求改变下</strong>，公司发展迅速业务调整，张三负责A项目、B项目、C项目，李四负责D项目、E项目、F项目，王五负责G项目、H项目、I项目,</p><p>而每个项目又分了dev、test、prod三个环境，继续沿用之前的Namespace隔离租户方案，显得有些管理不便，这时候可以在NameSpace中加入Group进行项目环境分组，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190805193836.png" alt="Group环境分组"></p><p>但是当业务规模更大的时候（不考虑Nacos集群能否支持的因素），张三、李四、王五每人都负责10多个项目时，即<code>项目数&gt;环境数</code>时，可以通过Group进行项目分组，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190805194131.png" alt="Group项目分组"></p><p>通过上面的理论分析，可以看出方案二有很好的扩展性</p><p>依旧如上，我们通过代码来实践一下方案2（Namespace隔离租户 + group环境分组）</p><h2 id="场景描述"><a class="markdownIt-Anchor" href="#场景描述"></a> 场景描述</h2><p>依旧使用上面的两个项目，假设现在有两个租户，张三、李四</p><p>张三负责项目：<code>nacos-namespace-one</code>, 李四负责项目：<code>nacos-namespace-two</code>，项目分别有dev和test环境</p><h2 id="新建namespace和配置文件"><a class="markdownIt-Anchor" href="#新建namespace和配置文件"></a> 新建Namespace和配置文件</h2><p>新建两个Namespace来隔离租户，分别为<code>zhangsan</code>、<code>lisi</code></p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190805195206.png" alt="zhangsan\lisi"></p><p>在Namespace：zhangsan 下创建配置文件</p><ul><li>DataId:<code>nacos-namespace-one-dev.yml</code></li><li>Group:<code>namespace-one-dev</code></li><li>配置格式：<code>YAML</code></li><li>配置内容：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nacos: </span><br><span class="line">    config: 项目：nacos-namespace-one，Namespace：张三，环境：dev</span><br></pre></td></tr></table></figure></li></ul><p>继续创建test环境配置文件</p><ul><li>DataId:<code>nacos-namespace-one-test.yml</code></li><li>Group:<code>namespace-one-test</code></li><li>配置格式：<code>YAML</code></li><li>配置内容：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nacos: </span><br><span class="line">    config: 项目：nacos-namespace-one，Namespace：张三，环境：test</span><br></pre></td></tr></table></figure></li></ul><p>参照以上操作，在Namespace：lisi命名空间中创建配置文件<code>nacos-namespace-two-dev.yml</code>和<code>nacos-namespace-two-test.yml</code></p><blockquote><p>注意核对DataId、Group、和配置内容</p></blockquote><h2 id="修改项目的配置文件bootstrapyml"><a class="markdownIt-Anchor" href="#修改项目的配置文件bootstrapyml"></a> 修改项目的配置文件bootstrap.yml</h2><p>修改项目nacos-namespace-one的dev配置文件<code>bootstrap-dev.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9911</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-namespace-one</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="comment">#        方案2:NamespaceID\Group</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="string">e0d75068-a12c-4314-9296-3f396139d5b3</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">namespace-one-dev</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="comment">#        方案2:NamespaceID\Group</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="string">e0d75068-a12c-4314-9296-3f396139d5b3</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">namespace-one-dev</span></span><br></pre></td></tr></table></figure><p>修改test配置文件<code>bootstrap-test.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9912</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-namespace-one</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="comment">#        方案2:NamespaceID\Group</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="string">e0d75068-a12c-4314-9296-3f396139d5b3</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">namespace-one-test</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="comment">#        方案2:NamespaceID\Group</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="string">e0d75068-a12c-4314-9296-3f396139d5b3</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">namespace-one-test</span></span><br></pre></td></tr></table></figure><blockquote><p>重复以上操作相应的修改项目nacos-namespace-two的dev和test配置文件</p></blockquote><blockquote><p>主要修改namespace和group属性，与命名空间lisi的ID和其下配置文件的Group对应</p></blockquote><h2 id="启动项目"><a class="markdownIt-Anchor" href="#启动项目"></a> 启动项目</h2><p>分别启动两个项目的两个环境（四个启动类），启动成功如下图</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190805185416.png" alt="两个环境都启动dev和test"></p><p>此时两个项目分别启动两个环境后，注册到Nacos上不同的Namespace下，并读取相应环境的配置，具体如下：</p><p>nacos-namespace-one</p><ul><li>dev: 注册到Namespace：zhangsan，读取Namespace：zhangsan下Group：namespace-one-dev的配置</li><li>test: 注册到Namespace：zhangsan，读取Namespace：zhangsan下Group：namespace-one-test的配置</li></ul><p>nacos-namespace-two</p><ul><li>dev: 注册到Namespace：lisi，读取Namespace：lisi下Group：namespace-two-dev的配置</li><li>test: 注册到Namespace：lisi，读取Namespace：lisi下Group：namespace-two-test的配置</li></ul><p>此时Nacos控制台如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/namespace2.gif" alt="namespace2console"></p><p>ok我们来测试下各个环境的服务能否访问到对应的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">访问127.0.0.1:9911/getValue,返回：项目：nacos-namespace-one，Namespace：张三，环境：dev</span><br><span class="line">访问127.0.0.1:9912/getValue,返回：项目：nacos-namespace-one，Namespace：张三，环境：test</span><br><span class="line">访问127.0.0.1:9921/getValue,返回：项目：nacos-namespace-two，Namespace：李四，环境：dev</span><br><span class="line">访问127.0.0.1:9922/getValue,返回：项目：nacos-namespace-two，Namespace：李四，环境：test</span><br></pre></td></tr></table></figure><p>通过访问服务的接口，各个服务都可以准确的读取到各自环境下的配置文件</p><blockquote><p>方案二可以看到同样支持服务和配置的隔离分组，同时支持业务的扩展，有较好的扩展性</p></blockquote><h1 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h1><p>但是相信大家已经发现了一个问题，当使用的Group来进行分组后，配置文件相互之间可以实现不同环境与不同项目之间的分组隔离</p><p>但是服务注册后，虽然可以通过Namespace隔离，但指定的Group分组却并没有生效，依然是<code>DEFAULT_GROUP</code></p><p>比如方案1 所有项目启动后Nacos服务列表页如下图</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190806145037.png" alt="question"></p><p>这里本应该是我们自定义的分组<code>namespace-one</code>和<code>namespace-two</code>却没有生效</p><p>由此发现，配置之间是达到了相互分组隔离名但<code>服务列表暂时并不支持</code>。</p><blockquote><p>但是不要担心，Nacos的社区极度活跃，社区的大佬们也发现了这一情况，并且在Nacos-client的源码中可以看到NameingService在加载配置文件时是有预留<code>Group</code>这一属性字段的。</p></blockquote><p>所以既然Nacos提供了这一实践方案，正常使用只不过是时间问题。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>以上分析了Nacos对于Namespace提供的两种实践方案，同时进行了代码实验，均达到了预期的要求。</p><p>现对两种方案进行一个总结</p><ul><li>单租户方案（方案1）：适合小型项目，服务数量不多时，方案一完全够用</li><li>多租户方案（方案2）：适合项目量多，有一定的团队规模，且服务数量较多时，可以相对条理清晰的管理和隔离配置及服务。</li></ul><p><strong><em>本文源码</em>：<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos</a></strong></p><h1 id="参考与感谢"><a class="markdownIt-Anchor" href="#参考与感谢"></a> 参考与感谢</h1><p><a href="https://nacos.io/zh-cn/docs/namespace-endpoint-best-practices.html" target="_blank" rel="noopener">Namespace最佳实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;前景回顾：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.larscheng.com/config-profile/&quot;&gt;Nacos（五）：多环境下如何“读取”Nacos中相应环境的配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.larscheng.com/config-service/&quot;&gt;Nacos（四）：SpringCloud项目中接入Nacos作为配置中心&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现如今，在微服务体系中，一个系统往往被拆分为多个服务，每个服务都有自己的配置文件，然后每个系统往往还会准备开发环境、测试环境、正式环境&lt;/p&gt;
&lt;p&gt;我们来说算一算，假设某系统有10个微服务，那么至少有10个配置文件吧，三个环境（dev\test\prod），那就有30个配置文件需要进行管理。&lt;/p&gt;
&lt;p&gt;这么多的配置文件，要修改一个或者多个的时候，稍有不慎可能就会出现改错了、不生效…等等问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么如果引入Nacos作为配置中心后，如何有效的进行配置文件的管理和不同环境间的隔离区分呢？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;别担心，Namespace可以帮助我们进行多环境下的管理和隔离&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
      <category term="Nacos" scheme="https://www.larscheng.com/categories/SpringCloud/Nacos/"/>
    
    
      <category term="Nacos" scheme="https://www.larscheng.com/tags/Nacos/"/>
    
      <category term="配置中心" scheme="https://www.larscheng.com/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Nacos（五）：多环境下如何“读取”Nacos中相应的配置</title>
    <link href="https://www.larscheng.com/config-profile/"/>
    <id>https://www.larscheng.com/config-profile/</id>
    <published>2019-07-23T10:40:01.000Z</published>
    <updated>2022-01-02T05:18:26.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>前景回顾：</p><ul><li><a href="http://larscheng.coding.me/config-service/" target="_blank" rel="noopener">Nacos（四）：SpringCloud项目中接入Nacos作为配置中心</a></li><li><a href="http://larscheng.coding.me/nacos-openfeign/" target="_blank" rel="noopener">Nacos（三）：Nacos与OpenFeign的对接使用</a></li><li><a href="http://larscheng.coding.me/namingservice/" target="_blank" rel="noopener">Nacos（二）：SpringCloud项目中接入Nacos作为注册中心</a></li></ul><p>通过前面几篇介绍，已经基本了解了Nacos做为注册中心和配置中心的基本用法。</p><p>在实际开发中，通常一个系统会准备开发环境、测试环境、预发环境、正式环境</p><p><strong>那么如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢</strong></p><p>本文主要对Nacos作为配置中心时，如何对多环境配置文件进行读取进行论述。</p><a id="more"></a><h1 id="我的环境"><a class="markdownIt-Anchor" href="#我的环境"></a> 我的环境</h1><ul><li>Windows10</li><li>JDK8</li><li>SpringCloud：Finchley.RELEASE</li><li>SpringBoot：2.0.4.RELEASE</li><li>spring-cloud-alibaba-dependencies：0.2.2.RELEASE</li><li>Nacos-server：1.0.1</li></ul><p><strong>本文的项目Demo继续沿用 <a href="http://larscheng.coding.me/config-service/" target="_blank" rel="noopener">Nacos（四）</a>中的工程<code>nacos-config</code>,若小伙伴还没有之前的环境，可至<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">源码地址</a>中下载</strong></p><h1 id="data-id方案"><a class="markdownIt-Anchor" href="#data-id方案"></a> Data ID方案</h1><p>在上一篇文章中有对<code>Data ID</code>进行过介绍，它的命名规则为：<code>${prefix}-${spring.profile.active}.${file-extension}</code></p><p>通过其中的<code>spring.profile.active</code>属性即可进行多环境下配置文件的读取</p><p>一起来试一下吧~</p><h2 id="新建配置"><a class="markdownIt-Anchor" href="#新建配置"></a> 新建配置</h2><p>1、启动Nacos-Server后，创建配置文件Data ID为：<code>nacos-config-dev.yml</code>, 其配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9980</span></span><br><span class="line"><span class="attr">nacos:</span> </span><br><span class="line"><span class="attr">  config:</span> <span class="string">这里是dev环境</span></span><br></pre></td></tr></table></figure><p>2、继续创建配置文件Data ID为：<code>nacos-config-test.yml</code>, 其配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9981</span></span><br><span class="line"><span class="attr">nacos:</span> </span><br><span class="line"><span class="attr">  config:</span> <span class="string">这里是test环境</span></span><br></pre></td></tr></table></figure><h2 id="多环境测试"><a class="markdownIt-Anchor" href="#多环境测试"></a> 多环境测试</h2><p>通过Idea启动<code>nacos-config</code>项目，并指定<code>spring.profiles.active</code>,通过不同的环境进行启动</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190723164555.png" alt=""></p><p>通过上面的配置，将项目分为dev、test两个环境启动后，进行测试</p><p>访问 <a href="http://127.0.0.1:9980/getValue" target="_blank" rel="noopener">http://127.0.0.1:9980/getValue</a> 返回：这里是dev环境</p><p>访问 <a href="http://127.0.0.1:9981/getValue" target="_blank" rel="noopener">http://127.0.0.1:9981/getValue</a> 返回：这里是test环境</p><p>可以看到，分别以dev、test启动后相应的读取到不同的配置，dev环境读取到启动端口为9980，test读取到启动端口9981</p><h1 id="group方案"><a class="markdownIt-Anchor" href="#group方案"></a> Group方案</h1><p>上面介绍了通过指定<code>spring.profile.active</code>和配置文件的<code>DataID</code>来使不同环境下读取不同的配置</p><p>这里也可以不用<code>DataID</code>，直接通过<code>Group</code>实现环境区分</p><p><strong>注：这种方式不太推荐，切换不灵活，需要切换环境时要改Gruop配置</strong></p><h2 id="新建配置-2"><a class="markdownIt-Anchor" href="#新建配置-2"></a> 新建配置</h2><p>1、创建配置文件Data ID为：<code>nacos-config.yml</code>, Group为：<code>DEV_GROUP</code>, 其配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9980</span></span><br><span class="line"><span class="attr">nacos:</span> </span><br><span class="line"><span class="attr">  config:</span> <span class="string">这里是dev环境</span></span><br></pre></td></tr></table></figure><p>2、继续创建配置文件Data ID为：<code>nacos-config.yml</code>, Group为：<code>TEST_GROUP</code>, 其配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9981</span></span><br><span class="line"><span class="attr">nacos:</span> </span><br><span class="line"><span class="attr">  config:</span> <span class="string">这里是test环境</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的两个配置文件他们的DataID相同但是Group不同</p></blockquote><h2 id="修改项目中的配置文件bootstrapyml"><a class="markdownIt-Anchor" href="#修改项目中的配置文件bootstrapyml"></a> 修改项目中的配置文件bootstrap.yml</h2><p>在config下增加一条group的配置，指定配置文件所在的group，可配置为<code>DEV_GROUP</code>或<code>TEST_GROUP</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">DEV_GROUP</span></span><br></pre></td></tr></table></figure><h2 id="启动测试"><a class="markdownIt-Anchor" href="#启动测试"></a> 启动测试</h2><p>将group配置为<code>DEV_GROUP</code>启动进行测试</p><p>访问 <a href="http://127.0.0.1:9980/getValue" target="_blank" rel="noopener">http://127.0.0.1:9980/getValue</a> 返回：这里是dev环境</p><p>将group配置为<code>TEST_GROUP</code>启动进行测试</p><p>访问 <a href="http://127.0.0.1:9981/getValue" target="_blank" rel="noopener">http://127.0.0.1:9981/getValue</a> 返回：这里是test环境</p><p>通过指定group的方式启动，DEV_GROUP读取到启动端口为9980，TEST_GROUP读取到启动端口9981</p><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>只通过Group来进行多环境的区分的方式我不推荐使用，因为涉及到了多环境自然就会改变<code>spring.profile.active</code>,而profile一旦生效，配置文件就会依据DataID的规则进行查找。所以Group的方式仅作参考。</p><p>Group的合理用法应该是配合namespace进行服务列表和配置列表的隔离和管理</p><h1 id="namespace方案"><a class="markdownIt-Anchor" href="#namespace方案"></a> Namespace方案</h1><p>Namespace命名空间进行环境隔离也是官方推荐的一种方式。Namespace的常用场景之一是不同环境的配置的区分隔离，例如：开发测试环境和生产环境的资源（如配置、服务）隔离等。</p><h2 id="创建命名空间"><a class="markdownIt-Anchor" href="#创建命名空间"></a> 创建命名空间</h2><p>创建命名空间<code>DEV</code>和<code>TEST</code>,不同的命名空间会生成相应的UUID，如下图<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190723175908.png" alt=""></p><h2 id="新建配置文件"><a class="markdownIt-Anchor" href="#新建配置文件"></a> 新建配置文件</h2><p>1、在命名空间DEV下创建DataID为：<code>nacos-config.yml</code>,Group为默认值的配置,配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9980</span></span><br><span class="line"><span class="attr">nacos:</span> </span><br><span class="line"><span class="attr">  config:</span> <span class="string">这里是DEV命名空间</span></span><br></pre></td></tr></table></figure><p>2、在命名空间TEST下创建DataID为：<code>nacos-config.yml</code>,Group为默认值的配置,配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9981</span></span><br><span class="line"><span class="attr">nacos:</span> </span><br><span class="line"><span class="attr">  config:</span> <span class="string">这里是TEST命名空间</span></span><br></pre></td></tr></table></figure><h2 id="修改项目中的配置文件bootstrapyml-2"><a class="markdownIt-Anchor" href="#修改项目中的配置文件bootstrapyml-2"></a> 修改项目中的配置文件bootstrap.yml</h2><p>在config下增加一条namespace的配置，指定当前配置所在的命名空间ID。注意是命名空间ID!!!配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="string">edbd013b-b178-44f7-8caa-e73071e49c4d</span></span><br></pre></td></tr></table></figure><h2 id="启动测试-2"><a class="markdownIt-Anchor" href="#启动测试-2"></a> 启动测试</h2><p>将namespace配置为<code>DEV</code>的ID:<code>edbd013b-b178-44f7-8caa-e73071e49c4d</code>,启动进行测试</p><p>访问 <a href="http://127.0.0.1:9980/getValue" target="_blank" rel="noopener">http://127.0.0.1:9980/getValue</a> 返回：这里是DEV命名空间</p><p>将namespace配置为<code>TEST</code>的ID:<code>0133bd1e-25c3-4985-96ed-a4e34efdea2e</code>,启动进行测试</p><p>访问 <a href="http://127.0.0.1:9981/getValue" target="_blank" rel="noopener">http://127.0.0.1:9981/getValue</a> 返回：这里是TEST命名空间</p><p>通过指定namespace的方式启动，均可读取到对应的启动端口和相关配置</p><h2 id="说明-2"><a class="markdownIt-Anchor" href="#说明-2"></a> 说明</h2><p>Namespace是官方推荐的环境隔离方案，确实有他的独到之处，使用namespace这种方案，同时可以与DataID+profile的方式结合</p><p>同时释放Group的限制，大大提高多环境配置管理的灵活性。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>通过上面三种方案的介绍，想必大家对于多环境下的配置读取方式应该有所选择</p><ul><li>DataID: 适用于项目不多，服务量少的情况。</li><li>Group：实现方式简单，但是容易与DataID方案发生冲突，仅适合于本地调试</li><li>Namespace：实现方式简单，配置管理简单灵活，同时可以结合DataID共同使用，推荐这种方案</li></ul><h1 id="参考感谢"><a class="markdownIt-Anchor" href="#参考感谢"></a> 参考感谢</h1><ul><li><p><a href="https://nacos.io/zh-cn/docs/faq.html#1.2" target="_blank" rel="noopener">Nacos如何支持多环境</a></p></li><li><p><a href="http://blog.didispace.com/spring-cloud-alibaba-nacos-config-2/" target="_blank" rel="noopener">Nacos配置的多环境管理</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;前景回顾：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://larscheng.coding.me/config-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nacos（四）：SpringCloud项目中接入Nacos作为配置中心&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://larscheng.coding.me/nacos-openfeign/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nacos（三）：Nacos与OpenFeign的对接使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://larscheng.coding.me/namingservice/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nacos（二）：SpringCloud项目中接入Nacos作为注册中心&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过前面几篇介绍，已经基本了解了Nacos做为注册中心和配置中心的基本用法。&lt;/p&gt;
&lt;p&gt;在实际开发中，通常一个系统会准备开发环境、测试环境、预发环境、正式环境&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文主要对Nacos作为配置中心时，如何对多环境配置文件进行读取进行论述。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
      <category term="Nacos" scheme="https://www.larscheng.com/categories/SpringCloud/Nacos/"/>
    
    
      <category term="Nacos" scheme="https://www.larscheng.com/tags/Nacos/"/>
    
      <category term="配置中心" scheme="https://www.larscheng.com/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Nacos（四）：SpringCloud项目中接入Nacos作为配置中心</title>
    <link href="https://www.larscheng.com/config-service/"/>
    <id>https://www.larscheng.com/config-service/</id>
    <published>2019-07-23T03:09:33.000Z</published>
    <updated>2022-01-02T05:18:26.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>通过前两篇文章：</p><ul><li><a href="http://larscheng.coding.me/nacos-openfeign/" target="_blank" rel="noopener">Nacos（二）：Nacos与OpenFeign的对接使用</a></li><li><a href="http://larscheng.coding.me/namingservice/" target="_blank" rel="noopener">Nacos（三）：SpringCloud项目中接入Nacos作为注册中心</a></li></ul><p>相信大家已经对Nacos作为注册中心的基本使用已经有了一定的了解。</p><p>然而，Nacos远远不止于此，本文我们来看一下Nacos作为<code>配置中心</code>在SpringCloud中的使用</p><a id="more"></a><h1 id="我的环境"><a class="markdownIt-Anchor" href="#我的环境"></a> 我的环境</h1><ul><li>Windows10</li><li>JDK8</li><li>SpringCloud：Finchley.RELEASE</li><li>SpringBoot：2.0.4.RELEASE</li><li>spring-cloud-alibaba-dependencies：0.2.2.RELEASE</li><li>Nacos-server：1.0.1</li></ul><p><strong>本文的项目Demo继续沿用之前文章中的聚合工程<code>Nacos</code>,若小伙伴还没有之前的环境，可至<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">源码地址</a>中下载</strong></p><h1 id="启动nacos-server"><a class="markdownIt-Anchor" href="#启动nacos-server"></a> 启动Nacos-Server</h1><p>进入bin文件夹（目录：nacos-server-1.0.1\nacos\bin），直接双击执行startup.cmd文件，这里具体的启动细节就不再说明</p><h1 id="新建配置"><a class="markdownIt-Anchor" href="#新建配置"></a> 新建配置</h1><p>在Nacos-Server中新建配置，其中Data ID它的定义规则是：<code>${prefix}-${spring.profile.active}.${file-extension}</code></p><ul><li>prefix 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code> 来配置。</li><li>spring.profile.active 即为当前环境对应的 <code>profile</code>，可以通过配置项 <code>spring.profile.active</code> 来配置。</li><li>file-exetension 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</li></ul><p><strong>注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>x</mi></mrow><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">{prefix}.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span></span><span class="mord">.</span></span></span></span>{file-extension}</strong></p><p>这里我创建Data Id 为<code>nacos-config.yml</code>的配置文件，其中Group为默认的<code>DEFAULT_GROUP</code>，配置文件的格式也相应的选择<code>yaml</code>，其内添加配置<code>nacos.config=hello_nacos</code>，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190723100312.png" alt=""></p><h1 id="创建应用"><a class="markdownIt-Anchor" href="#创建应用"></a> 创建应用</h1><p>1、在聚合工程Nacos下新建Module，创建一个名为nacos-config的子工程，其pom.xml文件内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.study.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.larscheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>nacos-config<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、创建配置文件名为<code>bootstrap.yml</code>,注意是<mark>bootstrap.xxx</mark>，而不是<code>application</code>或者其他。原因如下</p><blockquote><p>Nacos同springcloud-config一样，在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动。springboot中配置文件的加载是存在优先级顺序的，bootstrap优先级高于application</p></blockquote><p>这里的配置文件类型可以根据个人习惯选择，我这里用的时yml类型，配置内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到必须可少的配置项<code>spring.application.name</code><br><code>spring.cloud.nacos.discovery.server-addr</code>指定注册中心的地址，如果你不需要注册该服务，也可以去掉该项，并删除discovery依赖<br><code>spring.cloud.nacos.config.server-addr</code>指定配置中心的地址<br><code>file-extension</code>指定配置中心中配置文件的格式</p></blockquote><p>上面的配置是为了保证服务的正常注册和配置获取，以及配置<code>DataID</code>的正确性</p><p>3、创建对外接口来从nacos中读取配置，NacosConfigApplication.java修改如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;nacos.config&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getValue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中通过<code>@Value</code>注解，去读取key为<code>nacosconfig</code>的配置的值，并通过/getValue接口返回。<br>加入<code>@RefreshScope</code>注解，可以使当前类下的配置支持动态更新。</p></blockquote><p>到此代码部分的工作已经完成</p><h1 id="启动测试"><a class="markdownIt-Anchor" href="#启动测试"></a> 启动测试</h1><ol><li>保证Nacos-Server已经启动</li><li>检查配置文件是否已经添加</li><li>启动nacos-config项目</li></ol><p>启动成功后在Nacos控制台中可以看到我们注册的服务</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190723102246.png" alt=""></p><p>此时调用接口进行测试 <a href="http://127.0.0.1:8080/getValue" target="_blank" rel="noopener">http://127.0.0.1:8080/getValue</a> ，可以看到返回结果</p><blockquote><p>hello_nacos</p></blockquote><p>此时说明已经成功读取到配置，下面我将Nacos-Server上的配置修改为<code>hello_lars</code>,看看能否动态更新</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190723103257.png" alt=""></p><p>调用接口进行测试 <a href="http://127.0.0.1:8080/getValue" target="_blank" rel="noopener">http://127.0.0.1:8080/getValue</a> ，返回结果如下</p><blockquote><p>hello_lars</p></blockquote><p>可以看到我通过Nacos-server的控制台进行配置的修改，客户端服务<code>nacos-config</code>也相应的进行热更新。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>通过上面的测试，可见Nacos做配置中心，在SpringCloud项目中，也可以做到无缝衔接，切换到Nacos可以说知识修改配置的问题，成本也很低</p><p>项目的其他配置不变，只需要指定配置中心地址，同时将配置文件外部管理。</p><p><strong><em>本文源码</em>：<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos</a></strong></p><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html" target="_blank" rel="noopener">Nacos Spring Cloud</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;通过前两篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://larscheng.coding.me/nacos-openfeign/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nacos（二）：Nacos与OpenFeign的对接使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://larscheng.coding.me/namingservice/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nacos（三）：SpringCloud项目中接入Nacos作为注册中心&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相信大家已经对Nacos作为注册中心的基本使用已经有了一定的了解。&lt;/p&gt;
&lt;p&gt;然而，Nacos远远不止于此，本文我们来看一下Nacos作为&lt;code&gt;配置中心&lt;/code&gt;在SpringCloud中的使用&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
      <category term="Nacos" scheme="https://www.larscheng.com/categories/SpringCloud/Nacos/"/>
    
    
      <category term="Nacos" scheme="https://www.larscheng.com/tags/Nacos/"/>
    
      <category term="配置中心" scheme="https://www.larscheng.com/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Nacos（三）：Nacos与OpenFeign的对接使用</title>
    <link href="https://www.larscheng.com/nacos-openfeign/"/>
    <id>https://www.larscheng.com/nacos-openfeign/</id>
    <published>2019-07-10T09:05:30.000Z</published>
    <updated>2022-01-02T05:18:26.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>上篇文章中，简单介绍了<code>如何在SpringCloud项目中接入Nacos作为注册中心</code>，其中服务消费者是通过RestTemplate+Ribbon的方式来进行服务调用的。</p><p>实际上在日常项目中服务间调用大都用的是<code>OpenFeign</code>, OpenFeign自身整合了Ribbon和Hystrix，为服务调用提供了更优雅的方式</p><p>那么接入了Nacos之后，服务调用还能用这一套吗？</p><p>通过我在公司项目上的试水，这个大胆的设想是完全没问题的</p><p><strong><em>本文在上一篇文章中的项目工程基础上</em>，进行测试和演示，文章地址：<a href="http://larscheng.coding.me/namingservice/" target="_blank" rel="noopener">在SpringCloud项目中接入Nacos作为注册中心</a></strong></p><a id="more"></a><h1 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h1><p>打开之前创建的工程Nacos，目前已经有两个子工程：</p><ul><li>nacos-provide：服务提供者</li><li>nacos-consumer：服务消费者（RestTemplate+Ribbon服务调用）</li></ul><p>同样的操作，在Nacos项目下继续创建一个Springboot项目名为nacos-feign，创建时添加OpenFeign的依赖，如图：</p><p>nacos-fegin的pom.xml文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.study.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.larscheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-fegin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>nacos-fegin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="定义远程接口"><a class="markdownIt-Anchor" href="#定义远程接口"></a> 定义远程接口</h1><p>创建RemoteClient接口，来定义OpenFeign要调用的远程服务接口。</p><p>同时通过@FeginClient注解指定被调用方的服务名，通过fallback属性指定RemoteHystrix类，来进行远程调用的熔断和降级处理。</p><p>RemoteClient.java代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"nacos-provide"</span>,fallback = RemoteHystrix.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/helloNacos"</span>)</span><br><span class="line">    <span class="function">String <span class="title">helloNacos</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RemoteHystrix.java代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteHystrix</span> <span class="keyword">implements</span> <span class="title">RemoteClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloNacos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"请求超时了"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过openfeign调用远程服务"><a class="markdownIt-Anchor" href="#通过openfeign调用远程服务"></a> 通过OpenFeign调用远程服务</h1><p>在启动类NacosFeignApplication.java中添加注解@EnableDiscoveryClient开启服务注册、添加注解@EnableFeignClients开启OpenFeign，启动类通过OpenFeign调用服务代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosFeignApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosFeginApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RemoteClient remoteClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/feign"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remoteClient.helloNacos();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加项目配置文件"><a class="markdownIt-Anchor" href="#添加项目配置文件"></a> 添加项目配置文件</h1><p>在resourse目录下，添加application.yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9529</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-feign</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><h1 id="启动测试"><a class="markdownIt-Anchor" href="#启动测试"></a> 启动测试</h1><ol><li>启动Nacos-server</li><li>启动项目nacos-provide</li><li>启动项目nacos-feign</li></ol><p>完成以上三步后，访问Nacos控制台，检查服务注册情况，如果启动都成功，你看到的应该是如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190710164425.png" alt=""></p><p>浏览器访问 <a href="http://127.0.0.1:9529/feign%EF%BC%8C" target="_blank" rel="noopener">http://127.0.0.1:9529/feign，</a> 可以看到返回结果与RestTemplate结果无异，但对于编码和操作方式都更加优雅。</p><p>访问nacos-feign的接口 <a href="http://127.0.0.1:9529/feign%EF%BC%8C" target="_blank" rel="noopener">http://127.0.0.1:9529/feign，</a> 可以通过OpenFeign远程调用nacos-provide的接口，返回结果：</p><pre><code>你好，nacos！</code></pre><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>OpenFegin整合Ribbon和Hystrix，为微服务中远程调用提供了一种更优雅的调用方式，它支持负载均衡和容错熔断机制。通过上面的例子，在SpringCloud中接入Nacos做注册中心后，并不会影响我们继续使用其他SpringCloud组件。</p><p><strong><em>本文源码</em>：<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;上篇文章中，简单介绍了&lt;code&gt;如何在SpringCloud项目中接入Nacos作为注册中心&lt;/code&gt;，其中服务消费者是通过RestTemplate+Ribbon的方式来进行服务调用的。&lt;/p&gt;
&lt;p&gt;实际上在日常项目中服务间调用大都用的是&lt;code&gt;OpenFeign&lt;/code&gt;, OpenFeign自身整合了Ribbon和Hystrix，为服务调用提供了更优雅的方式&lt;/p&gt;
&lt;p&gt;那么接入了Nacos之后，服务调用还能用这一套吗？&lt;/p&gt;
&lt;p&gt;通过我在公司项目上的试水，这个大胆的设想是完全没问题的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;本文在上一篇文章中的项目工程基础上&lt;/em&gt;，进行测试和演示，文章地址：&lt;a href=&quot;http://larscheng.coding.me/namingservice/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在SpringCloud项目中接入Nacos作为注册中心&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
      <category term="Nacos" scheme="https://www.larscheng.com/categories/SpringCloud/Nacos/"/>
    
    
      <category term="Nacos" scheme="https://www.larscheng.com/tags/Nacos/"/>
    
      <category term="注册中心" scheme="https://www.larscheng.com/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Nacos（二）：SpringCloud项目中接入Nacos作为注册中心</title>
    <link href="https://www.larscheng.com/namingservice/"/>
    <id>https://www.larscheng.com/namingservice/</id>
    <published>2019-07-09T09:08:55.000Z</published>
    <updated>2022-01-02T05:18:26.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>通过上一篇文章：<a href="http://larscheng.coding.me/nacosinfo/" target="_blank" rel="noopener">Nacos介绍 </a>简单了解了Nacos的发展历程和现状，本文我们开始Nacos试水的第一步: <strong>使用Nacos做注册中心</strong></p><blockquote><p>上周末（7.6）Nacos发布了V1.1.0版本，这次更新支持灰度配置、地址服务器模式、配置文件导入导出等其他功能。感觉社区的老哥们都很高产呐…</p></blockquote><p>本文主要通过两个项目来完成演示：</p><a id="more"></a><ul><li>nacos-provide：服务提供者</li><li>nacos-consumer：服务消费者</li></ul><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190709155600.png" alt=""></p><pre><code>将nacos-provide和nacos-consumer注册到Nacos-server，服务消费者nacos-consumer通过主动轮询获取他所订阅消费的服务信息列表nacos-consumer根据获取到的服务信息列表，进行服务调用。</code></pre><p>熟悉SpringCloud+Eureka的同学阅读完本文后可以无缝切换Nacos做注册中心</p><h1 id="我的环境"><a class="markdownIt-Anchor" href="#我的环境"></a> 我的环境</h1><ul><li>Windows10</li><li>JDK8</li><li>SpringCloud：Finchley.RELEASE</li><li>SpringBoot：2.0.4.RELEASE</li><li>spring-cloud-alibaba-dependencies：0.2.2.RELEASE</li><li>Nacos-server：1.0.1</li></ul><p><em><strong>注：Nacos针对不同版本的SpingCloud提供不同的依赖，各个版本的对应关系请参考官方文档给出的说明：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">版本说明</a></strong></em></p><h1 id="启动nacos-server"><a class="markdownIt-Anchor" href="#启动nacos-server"></a> 启动Nacos-server</h1><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190709141938.png" alt="Nacos部分版本预览"></p><p>Nacos-server可以直接从github上下载安装包，当然你也可以拉取代码后自行打包</p><p>本文我直接从官网下载Nacos-server：V1.0.1(<strong>为避免新版本V1.1.0有其他问题，我这里还是用V1.0.1</strong>)</p><p>下载地址： <a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p><p>下载解压后进入<code>bin</code>文件夹（目录：nacos-server-1.0.1\nacos\bin），直接双击执行startup.cmd文件，启动成功如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190709142512.png" alt="Nacos单机模式启动成功"></p><p>启动成功后，此时Nacos控制台就可以访问了，浏览器访问：<a href="http://127.0.0.1:8848/nacos/index.html" target="_blank" rel="noopener">http://127.0.0.1:8848/nacos/index.html</a> ，默认的账号密码为<a href="">nacos/nacos</a>，控制台页面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190709143113.png" alt="nacos控制台界面"></p><h1 id="创建服务提供者"><a class="markdownIt-Anchor" href="#创建服务提供者"></a> 创建服务提供者</h1><p>IDEA中创建聚合工程Nacos作为父工程，其pom.xml如下（重点关注<code>dependencyManagement</code>配置）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>larscheng-learning-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.study.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>nacos-provide<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nacos.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">nacos.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;nacos.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在父工程Nacos下创建springboot子工程nacos-provide，其pom.xml文件为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.study.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.larscheng.www<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-provide<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>nacos-provide<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在NacosProvideApplication.java中提供一个对外接口，并添加注解<code>@EnableDiscoveryClient</code> 开启服务注册发现功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosProvideApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosProvideApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/helloNacos"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloNacos</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"你好，nacos！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件application.yml进行如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-provide</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><p>ok，服务提供者的创建和配置已经完成</p><h1 id="创建服务消费者"><a class="markdownIt-Anchor" href="#创建服务消费者"></a> 创建服务消费者</h1><p>仍然在Nacos工程下创建一个SpringBoot项目子工程命名为nacos-consumer，其pom文件与nacos-provide相同。</p><p>同样为nacos-consumer增加配置文件，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9528</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-consumer</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><p>服务消费者这里按照官方文档中的方式通过 RestTemplate+Ribbon进行服务调用,</p><p>NacosConsumerApplication.java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(<span class="string">"http://nacos-provide/helloNacos"</span>,String.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Return : "</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，服务消费者的创建工作也已完成，下面启动两个项目，进行测试</p><h1 id="调用测试"><a class="markdownIt-Anchor" href="#调用测试"></a> 调用测试</h1><p>启动完成后，在日志中应该可以看到如下两条信息</p><pre><code>o.s.c.a.n.registry.NacosServiceRegistry  : nacos registry, nacos-provide 192.168.200.1:9527 register finished    o.s.c.a.n.registry.NacosServiceRegistry  : nacos registry, nacos-consumer 192.168.200.1:9528 register finished</code></pre><p>现在登录Nacos控制台，你会发现服务列表中，已经显示了我们刚才创建的两个项目，并可以对其进行简单的监控和管理。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/Nacos/20190709163402.png" alt="服务列表"></p><p>浏览器中访问服务消费者的接口 <a href="http://127.0.0.1:9528/consumer%EF%BC%8C" target="_blank" rel="noopener">http://127.0.0.1:9528/consumer，</a> 可以看到成功返回结果</p><pre><code>Return : 你好，nacos！</code></pre><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>完成上面的服务发现和注册的测试后，我的第一感觉是，<code>好像只用修改配置就可以替换Eureka，好像无缝支持SpringCloud</code> ,<br>带着这个内心的冲击感，我到公司的项目中简单试了下水，居然直接注册成功，并且各个服务之间正常使用，虽然只是单独的服务注册发现功能。但这能够说明Nacos天生就无缝衔接SpringCloud生态（当然他也有很多坑）</p><p>看Nacos控制台中的几大分类，明显Nacos的能力绝不仅仅是注册中心这么简单，更多Nacos的使用姿势和坑点，我们未完待续~</p><p><strong><em>本文源码</em>：<a href="https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos" target="_blank" rel="noopener">https://github.com/larscheng/larscheng-learning-demo/tree/master/Nacos</a></strong></p><h1 id="参考感谢"><a class="markdownIt-Anchor" href="#参考感谢"></a> 参考感谢</h1><p><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html" target="_blank" rel="noopener">Nacos官方手册</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;通过上一篇文章：&lt;a href=&quot;http://larscheng.coding.me/nacosinfo/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nacos介绍 &lt;/a&gt;简单了解了Nacos的发展历程和现状，本文我们开始Nacos试水的第一步: &lt;strong&gt;使用Nacos做注册中心&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上周末（7.6）Nacos发布了V1.1.0版本，这次更新支持灰度配置、地址服务器模式、配置文件导入导出等其他功能。感觉社区的老哥们都很高产呐…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文主要通过两个项目来完成演示：&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
      <category term="Nacos" scheme="https://www.larscheng.com/categories/SpringCloud/Nacos/"/>
    
    
      <category term="Nacos" scheme="https://www.larscheng.com/tags/Nacos/"/>
    
      <category term="注册中心" scheme="https://www.larscheng.com/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Nacos（一）：Nacos介绍</title>
    <link href="https://www.larscheng.com/nacosinfo/"/>
    <id>https://www.larscheng.com/nacosinfo/</id>
    <published>2019-07-09T09:04:24.000Z</published>
    <updated>2022-01-02T05:18:26.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>6月份阿里开源的Nacos出了1.0.1版本，从去年7月份第一个release版本到现在一直在默默关注</p><p>官方的版本规划为：Nacos从0.8.0开始支持生产可用，1.0版本可大规模生产可用，2.0版本接入k8s、SpringCloud、ServiceMesh、ServerLess</p><p>公司目前的项目都是Springcloud，由于eureka2.X的断更、以及Nacos面世，所以自然而然最近就进行了一次试水爬坑，虽然过程艰苦，但是最终效果似乎还不错。</p><p>本文主要从以下几点来带大家熟悉下Nacos</p><a id="more"></a><ul><li>Nacos是什么</li><li>Nacos的发展历程</li><li>Nacos能做什么</li><li>Nacos无缝接入各大生态</li></ul><h1 id="nacos是什么"><a class="markdownIt-Anchor" href="#nacos是什么"></a> Nacos是什么</h1><p>Nacos是什么？好像没听过，不要紧。那Eureka听说过吧，在SpringCloud中做服务注册中心组件，类似的还有Zookeeper、Consul。</p><p>所以Nacos也是一个注册中心组件咯，当然是，不过<strong>它不仅仅是注册中心</strong>。</p><p><strong>Nacos也是一个配置中心</strong>，比如SpringCloud中的Config，将配置文件版本化管理。</p><p>那么Nacos到底是什么呢, 总结为官网一句话就是:</p><blockquote><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p></blockquote><h1 id="nacos的发展历程"><a class="markdownIt-Anchor" href="#nacos的发展历程"></a> Nacos的发展历程</h1><p>首先要说Nacos的发展历程就要从阿里巴巴的内部产品ConfigServer说起了，因为<strong>Nacos是ConfigServer 的开源实现</strong></p><p>早在2008年阿里就开始服务化的进程(那个时候我好像还在上初中啊)，在那个时候阿里内部自研的服务发现解决方案就叫做ConfigServer</p><p>ConfigServer经历了十年的发展从V1.0的单机版演变为目前对外公布的V4.0集群版。</p><p>2018年7月阿里巴巴高级技术专家许真恩（慕义）发布了Nacos首个开源版本V0.1.0，Nacos作为ConfigServer的开源实现截止目前已经更新到了V1.0.1的大版本，并且支持大规模生产版本。</p><h1 id="nacos能做什么"><a class="markdownIt-Anchor" href="#nacos能做什么"></a> Nacos能做什么</h1><p>虽然<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html" target="_blank" rel="noopener">官方文档</a>也有介绍，但是语言比较官方，我就用大白话谈一点自己的使用感受。</p><ul><li><p>服务注册发现和服务健康检测</p><p>Nacos支持基于DNS和基于RPC的服务发现，服务端可以通过SDK或者Api进行服务注册，相应的服务消费者可以使用DNS或者Http查找的方式获取服务列表。Nacos同时提供对服务的实时健康检查，阻止想不健康的主机或服务发送请求，与Eureka类似Nacos也有友好的控制台界面。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Nacos/20190705131509.png" alt="Nacos控制台"></p><ul><li><p>动态配置服务</p><p>接触过SpringCloud应该对config有所了解，那么配置中心也就很好理解，Nacos支持动态的配置管理，将服务的配置信息分环境分类别外部管理，并且支持热更新。不过与Config不同Nacos的配置信息存储与数据库中，支持配置信息的监听和版本回滚。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Nacos/20190705131605.png" alt="Nacos配置管理"></p><ul><li><p>动态DNS服务</p><p>支持权重路由，更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。不过这个特性目前版本还不支持</p></li><li><p>服务及元数据管理</p><p>Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。</p></li></ul><h1 id="nacos无缝接入各大生态"><a class="markdownIt-Anchor" href="#nacos无缝接入各大生态"></a> Nacos无缝接入各大生态</h1><p>首先先上一张官方的生态图</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/Nacos/20190705132338.png" alt="Nacos 全景图"></p><p>除了对于阿里开源生态体系如 Dubbo 等自身的支持，也非常强调融入其它的开源生态，这里就包括 Java 的微服务生态体系 Spring Cloud，Kubernetes/CNCF 云原生生态体系。</p><p>Nacos 无缝支持 Spring Cloud，为 Spring Cloud 用户其提供更简便的配置中心和注册中心的解决方案。</p><p>Nacos支持目前几乎所有主流的微服务生态体系。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>Nacos从官方的介绍上看，就像是SpringCloud中Eureka+Config+Bus+Git+MQ的一个结合体，当然也不能完全这么理解。Nacos是脱胎于阿里内部的ConfigServer，而ConfigServer早在3.0版本就解决了Eureka在1.0版本留下的隐患，所以从技术的更新和迭代角度来看，稳定版本的Nacos将更适合做为微服务体系中的服务注册发现组件，当然了他也不单单只是注册和发现。更多的特性和功能，不如一起搭建试试吧。</p><h1 id="参考与感谢"><a class="markdownIt-Anchor" href="#参考与感谢"></a> 参考与感谢</h1><p><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html" target="_blank" rel="noopener">Nacos官方手册</a></p><p><a href="https://www.cnblogs.com/lzmrex/articles/9303222.html" target="_blank" rel="noopener">来看看阿里自研服务注册中心产品ConfigServer</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;6月份阿里开源的Nacos出了1.0.1版本，从去年7月份第一个release版本到现在一直在默默关注&lt;/p&gt;
&lt;p&gt;官方的版本规划为：Nacos从0.8.0开始支持生产可用，1.0版本可大规模生产可用，2.0版本接入k8s、SpringCloud、ServiceMesh、ServerLess&lt;/p&gt;
&lt;p&gt;公司目前的项目都是Springcloud，由于eureka2.X的断更、以及Nacos面世，所以自然而然最近就进行了一次试水爬坑，虽然过程艰苦，但是最终效果似乎还不错。&lt;/p&gt;
&lt;p&gt;本文主要从以下几点来带大家熟悉下Nacos&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
      <category term="Nacos" scheme="https://www.larscheng.com/categories/SpringCloud/Nacos/"/>
    
    
      <category term="Nacos" scheme="https://www.larscheng.com/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>20190719小组分享</title>
    <link href="https://www.larscheng.com/share20190719/"/>
    <id>https://www.larscheng.com/share20190719/</id>
    <published>2019-06-19T01:25:48.000Z</published>
    <updated>2022-01-02T05:18:26.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="本次分享内容"><a class="markdownIt-Anchor" href="#本次分享内容"></a> 本次分享内容</h2><!-- .slide: data-transition="convex" data-background="#00C4B6" --><ul><li>技术分享：Nacos</li><li>非技术分享：实用工具站点推荐</li></ul><p>==========</p><h2 id="技术内容nacos"><a class="markdownIt-Anchor" href="#技术内容nacos"></a> 技术内容Nacos</h2><!-- .slide: data-transition="zoom" data-background="#8a85c3" --><p><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html" target="_blank" rel="noopener">Naming-Config-Service</a></p><p>==========</p><h5 id="springcloud生态注册中心现状"><a class="markdownIt-Anchor" href="#springcloud生态注册中心现状"></a> SpringCloud生态注册中心现状</h5><!-- .slide: data-transition="slide" data-background="#49B1F5" --><p>(CAP 原则?)</p><ul><li><p>Spring Cloud Eureka：内存、轮询、集群、2.0断更</p></li><li><p>Spring Cloud Zookeeper：内存，瘫痪</p></li><li><p>Spring Cloud Consul：生态、社区</p></li></ul><p>==</p><h5 id="springcloud生态配置中心现状"><a class="markdownIt-Anchor" href="#springcloud生态配置中心现状"></a> SpringCloud生态配置中心现状</h5><!-- .slide: data-transition="slide" data-background="#00C4B6" --><ul><li><p>Spring Cloud Config：git+Bus</p></li><li><p>Spring Cloud Zookeeper：网络，cp模型</p></li><li><p>Spring Cloud Consul：生态</p></li></ul><p>==</p><h5 id="nacos现状"><a class="markdownIt-Anchor" href="#nacos现状"></a> Nacos现状</h5><!-- .slide: data-transition="concave" data-background="#49B1F5" --><p>当前版本：1.1.0</p><p>Spring、Spring Boot、Spring Cloud、</p><p>Docker、Dubbo、{Kubernetes}</p><p><a href="https://nacos.io/zh-cn/docs/roadmap.html" target="_blank" rel="noopener">roadmap</a></p><p>==</p><h5 id="未来趋势"><a class="markdownIt-Anchor" href="#未来趋势"></a> 未来趋势</h5><!-- .slide: data-transition="concave" data-background="#00C4B6" --><ul><li><p><a href="https://github.com/mercyblitz/tech-weekly/blob/master/2018.11.01%E3%80%8C%E5%B0%8F%E9%A9%AC%E5%93%A5%E6%8A%80%E6%9C%AF%E5%91%A8%E6%8A%A5%E3%80%8D-%20%E7%AC%AC%E5%85%AD%E6%9C%9F%E3%80%8A%E6%80%BB%E8%A7%88%20Spring%20Cloud%20Alibaba%200.2.0.RELEASE%E3%80%8B/2018.11.01%E3%80%8C%E5%B0%8F%E9%A9%AC%E5%93%A5%E6%8A%80%E6%9C%AF%E5%91%A8%E6%8A%A5%E3%80%8D-%20%E7%AC%AC%E5%85%AD%E6%9C%9F%E3%80%8A%E6%80%BB%E8%A7%88%20Spring%20Cloud%20Alibaba%200.2.0.RELEASE%E3%80%8B.pdf" target="_blank" rel="noopener">总览 Spring Cloud Alibaba </a></p></li><li><p><a href="https://spring.io/projects/spring-cloud-netflix" target="_blank" rel="noopener">SCN</a>与<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md" target="_blank" rel="noopener">SCA</a></p></li></ul><p>SCA的宗旨，就是要替代SCN，成为Spring Cloud规范的默认实现方案</p><p>==========</p><h2 id="非技术内容"><a class="markdownIt-Anchor" href="#非技术内容"></a> 非技术内容</h2><!-- .slide: data-transition="zoom" data-background="#33CCAE" --><p>程序员的乐趣</p><p>==========</p><h5 id="实用工具篇"><a class="markdownIt-Anchor" href="#实用工具篇"></a> 实用工具篇</h5><!-- .slide: data-transition="slide" data-background="#49B1F5" --><p>==</p><h5 id="图床工具"><a class="markdownIt-Anchor" href="#图床工具"></a> 图床工具</h5><!-- .slide: data-transition="concave" data-background="#FFE4C4" --><p><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></p><p><img src="https://raw.githubusercontent.com/Molunerfinn/test/master/picgo/picgo-2.0.gif" alt="image"></p><p>==</p><h5 id="tampermonkey"><a class="markdownIt-Anchor" href="#tampermonkey"></a> Tampermonkey</h5><!-- .slide: data-transition="concave" data-background="#008B8B" --><ul><li><a href="https://greasyfork.org/zh-CN/scripts/27530-%E7%A0%B4%E8%A7%A3vip%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88" target="_blank" rel="noopener">免费观看</a></li><li><a href="https://greasyfork.org/zh-CN/scripts/39504-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B" target="_blank" rel="noopener">百度网盘</a></li><li><a href="https://greasyfork.org/zh-CN/scripts/14178-ac-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2-%E5%8E%BB%E5%B9%BF%E5%91%8A-favicon-%E5%8F%8C%E5%88%97" target="_blank" rel="noopener">过滤百度推广</a></li></ul><p><a href="https://www.tampermonkey.net/" target="_blank" rel="noopener">Tampermonkey</a></p><p>==</p><h5 id="密码太多记不住"><a class="markdownIt-Anchor" href="#密码太多记不住"></a> 密码太多记不住</h5><!-- .slide: data-transition="concave" data-background="#8B7B8B" --><p><a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd" target="_blank" rel="noopener">LastPass</a></p><h1 id=""><a class="markdownIt-Anchor" href="#"></a> <img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/share/20190718201652.png" alt=""></h1><h5 id="临时邮箱"><a class="markdownIt-Anchor" href="#临时邮箱"></a> 临时邮箱</h5><!-- .slide: data-transition="slide" data-background="#388E8E" --><p><a href="http://24mail.chacuo.net/" target="_blank" rel="noopener">ChaCuo SMTP Server</a></p><p>填写邮箱时候，不想使用您的真实邮箱？那就使用临时邮箱</p><p>==</p><h5 id="git学习"><a class="markdownIt-Anchor" href="#git学习"></a> git学习</h5><!-- .slide: data-transition="slide" data-background="#49B1F5" --><p><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Git闯关学习</a></p><p>==</p><h5 id="github树形结构"><a class="markdownIt-Anchor" href="#github树形结构"></a> github树形结构</h5><!-- .slide: data-transition="slide" data-background="#996600" --><p><a href="https://github.com/buunguyen/octotree" target="_blank" rel="noopener">Octotree</a></p><p><img src="https://github.com/ovity/octotree/raw/v3/docs/chrome-github.png" alt=""></p><p>==</p><h5 id="quickey-launcher"><a class="markdownIt-Anchor" href="#quickey-launcher"></a> Quickey Launcher</h5><!-- .slide: data-transition="slide" data-background="#87CEEB" --><p><a href="https://chrome.google.com/webstore/detail/quickey-launcher/nibepjokbndognmmejkdjcflfehkdhce" target="_blank" rel="noopener">键盘书签</a></p><p>==</p><h5 id="静态博客搭建"><a class="markdownIt-Anchor" href="#静态博客搭建"></a> 静态博客搭建</h5><!-- .slide: data-transition="slide" data-background="#CDC0B0" --><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a></p><p>10分钟搭建属于你自己的个人博客</p><p>推荐主题：Next、Melody…</p><p>==</p><h5 id="markdown写书"><a class="markdownIt-Anchor" href="#markdown写书"></a> Markdown写书</h5><!-- .slide: data-transition="slide" data-background="#CDC0B0" --><ul><li><p>安装node.js</p></li><li><p>npm install -g gitbook-cli</p></li><li><p>gitbook init</p></li><li><p>gitbook serve</p></li></ul><p>ok了</p><p>==</p><h5 id="发现有趣项目"><a class="markdownIt-Anchor" href="#发现有趣项目"></a> 发现有趣项目</h5><!-- .slide: data-transition="slide" data-background="#49B1F5" --><p><a href="https://www.hellogithub.com/" target="_blank" rel="noopener">分享 GitHub 上有趣、入门级的开源项目</a></p><p>==========</p><h5 id="github篇"><a class="markdownIt-Anchor" href="#github篇"></a> GitHub篇</h5><!-- .slide: data-transition="fade" data-background="#53868B" --><p>盘点那些神奇的GitHub仓</p><p>==</p><h5 id="996icu"><a class="markdownIt-Anchor" href="#996icu"></a> 996.ICU</h5><!-- .slide: data-transition="slide" data-background="#FA8072" --><p><a href="https://github.com/996icu/996.ICU" target="_blank" rel="noopener">996.ICU</a></p><p>==</p><h5 id="chinese-sticker-pack"><a class="markdownIt-Anchor" href="#chinese-sticker-pack"></a> Chinese sticker pack</h5><!-- .slide: data-transition="slide" data-background="#D2B48C" --><p><a href="https://github.com/zhaoolee/ChineseBQB" target="_blank" rel="noopener">Chinese sticker pack </a></p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/share/20190715130608.png" alt=""></p><p>==</p><h5 id="hangzhou_house_knowledge"><a class="markdownIt-Anchor" href="#hangzhou_house_knowledge"></a> hangzhou_house_knowledge</h5><!-- .slide: data-transition="convex" data-background="#33ffcc" --><p><a href="https://github.com/houshanren/hangzhou_house_knowledge" target="_blank" rel="noopener">买房经历总结</a></p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/share/20190715130345.png" alt=""></p><p>==</p><h5 id="网易云第三方"><a class="markdownIt-Anchor" href="#网易云第三方"></a> 网易云第三方</h5><!-- .slide: data-transition="fade" data-background="#00ffff" --><p><a href="https://github.com/listen1/listen1" target="_blank" rel="noopener">Listen 1</a></p><p><a href="https://github.com/trazyn/ieaseMusic" target="_blank" rel="noopener">ieaseMusic</a></p><p><img src="https://raw.githubusercontent.com/trazyn/ieaseMusic/dev/screenshots/downloader.png" alt="image"></p><p><img src="https://camo.githubusercontent.com/8da192166de9c615772f8d7e6fa304f2c24326ec/687474703a2f2f692e696d6775722e636f6d2f696634434e72322e706e673f31" alt="image"></p><p>==</p><h5 id="全网视频站"><a class="markdownIt-Anchor" href="#全网视频站"></a> 全网视频站</h5><!-- .slide: data-transition="zoom" data-background="#49B1F5" --><p><a href="https://github.com/phobal/ivideo" target="_blank" rel="noopener">i视频</a></p><p><img src="https://github.com/phobal/ivideo/raw/master/resources/showcase01.jpg" alt="image"></p><p>==</p><h5 id="百度网盘"><a class="markdownIt-Anchor" href="#百度网盘"></a> 百度网盘</h5><!-- .slide: data-transition="slide" data-background="#00EEEE" --><p><a href="https://github.com/peterq/pan-light" target="_blank" rel="noopener">百度网盘不限速客户端</a></p><p><img src="https://camo.githubusercontent.com/8b5b2336d0e9562c6c3f7703b9bff7cd47c3e9b3/68747470733a2f2f71696e69752d63646e2e7065746572712e636e2f70616e2d6c696768742f696d672f73686f745f312e706e67" alt="image"></p><p>==</p><h5 id="福利"><a class="markdownIt-Anchor" href="#福利"></a> 福利</h5><!-- .slide: data-transition="fade" data-background="#49B1F5" --><p><a href="https://github.com/Alvin9999/new-pac/wiki" target="_blank" rel="noopener">new-pac</a></p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg//blogImg/share/20190715130730.png" alt=""></p><p>==</p><h5 id="钢琴"><a class="markdownIt-Anchor" href="#钢琴"></a> 钢琴</h5><!-- .slide: data-transition="slide" data-background="#00B2EE" --><p><a href="https://github.com/WarpPrism/AutoPiano" target="_blank" rel="noopener">键盘钢琴</a></p><p>==========</p><h5 id="番外篇"><a class="markdownIt-Anchor" href="#番外篇"></a> 番外篇</h5><!-- .slide: data-transition="fade" data-background="#53868B" --><p>如何科学上网😏😏😏</p><p>==</p><h5 id="访问不了的原因"><a class="markdownIt-Anchor" href="#访问不了的原因"></a> 访问不了的原因</h5><!-- .slide: data-transition="fade" data-background="#53868B" --><ul><li><p>dns污染</p></li><li><p>封ip</p></li><li><p>封代理</p></li><li><p>封vpn</p></li><li><p>其他…</p></li></ul><p>==</p><h5 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h5><!-- .slide: data-transition="slide" data-background="#FA8072" --><ul><li><p>第三方免费VPN(赛风、蓝灯)</p></li><li><p>公司VPN</p></li><li><p>直翻通道</p></li><li><p>免费SSR</p></li><li><p>自建</p></li></ul><p><a href="https://doubibackup.com/" target="_blank" rel="noopener">搭建教程</a></p><p>==</p><p>分享结束,感谢聆听…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="https://www.larscheng.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中equals和HashCode方法的分析</title>
    <link href="https://www.larscheng.com/java-equals-hashcode/"/>
    <id>https://www.larscheng.com/java-equals-hashcode/</id>
    <published>2019-06-17T09:43:23.000Z</published>
    <updated>2022-01-02T05:18:26.505Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>上一篇文章简单分析了<a href="https://note.youdao.com/" target="_blank" rel="noopener">equals()与==的关系</a>，本文我们再来看看equals()与hashcode()的关系。hashcode的使用还是有很多坑的，一起看看吧~</p><p>本文主要有以下几点来分析：</p><ol><li><strong>hashCode使用中产生的问题</strong></li><li><strong>equals/hashcode的渊源</strong></li><li><strong>产生问题的原因</strong></li><li><strong>正确的使用姿势</strong></li></ol><a id="more"></a> <h3 id="hashcode使用中产生的问题"><a class="markdownIt-Anchor" href="#hashcode使用中产生的问题"></a> hashCode使用中产生的问题</h3><p>注：HashSet是一个无序、不可重复的集合，我们做一个小测试运行如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEqualsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">        Person(String age) &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"age='"</span> + age + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet set1 = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set1.add(<span class="string">"1"</span>);</span><br><span class="line">        set1.add(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object a : set1) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HashSet set2 = <span class="keyword">new</span> HashSet();</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"1"</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"1"</span>);</span><br><span class="line">        set2.add(p1);</span><br><span class="line">        set2.add(p2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object a : set2) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于HashSet是不可重复的集合，所以输出的结果中set1和set2中都应该只有一个元素，那么执行结果是什么呢？如下</p><pre><code>1Person{age='1'}Person{age='1'}</code></pre><p>好吧，又双叒叕和我想象的不一样，set1不重复，set2明显发生了重复现象，这是为什么呢？</p><blockquote><p>这是因为equals、hashCode使用不规范导致的，问题且放在这，我们先看看equals和hashCode的关系</p></blockquote><h3 id="equalshashcode的渊源"><a class="markdownIt-Anchor" href="#equalshashcode的渊源"></a> equals/hashcode的渊源</h3><p>同为Object类中的方法</p><blockquote><p>public boolean equals(Object obj)<br>public int hashCode()</p></blockquote><ul><li>equals(): 用来判断两个对象是否相同，再Object类中是通过判断对象间的内存地址来决定是否相同</li><li>hashCode(): 获取哈希码，也称为散列码，返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。</li></ul><p>由于同为Object类中的方法，所以基本上所有Java类都会继承这两个方法，所以通过阅读hashCode方法的注释发现了：</p><img style=" width:50% ; " src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/equalsAndHashCode/20190617160647.png"><p>概括为以下几点：</p><ol><li>该方法返回对象的哈希码，支持该方法是为哈希表提供一些优点，例如，HashMap 提供的哈希表。</li><li>同一个对象未发生改变时多次调用hashCode()返回值必须相同，</li><li>两个对象equals不相等，那么两对象的hashCode()返回必定不同（此处可用来提高哈希表性能）</li><li>两个对象的hashCode()返回值相同，两对象不一定相同，还需要通过equals()再次判断</li><li>当equals方法被重写时，通常有必要重写 hashCode 方法</li></ol><p>通过第1点其实可以看出，hashCode() 在散列表中才有用，在其它情况下没用。在散列表中hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置，当对象不会用来创建像hashMap、hashSet等散列表时，hashCode()实际上用不上。</p><h3 id="产生问题的原因"><a class="markdownIt-Anchor" href="#产生问题的原因"></a> 产生问题的原因</h3><p>了解了两者的关系，我们在回过头来看看产生问题的原因</p><p>分析原因前需要了解哈希表的底层实现，hashCode在哈希表中充当的作用：</p><p>举一个栗子说明下：</p><ul><li><p>假设内存中有0 1 2 3 4 5 6 7 8这8个位置，如果我有个字段叫做ID，那么我要把这个字段存放在以上8个位置之一，如果不用HashCode而任意存放，那么当查找时就需要到8个位置中去挨个查找</p></li><li><p>使用HashCode则效率会快很多，把ID的HashCode%8，然后把ID存放在取得余数的那个位置，然后每次查找该类的时候都可以通过ID的HashCode%8求余数直接找到存放的位置了</p></li><li><p>如果ID的HashCode%8算出来的位置上本身已经有数据了怎么办？这就取决于算法的实现了，比如ThreadLocal中的做法就是从算出来的位置向后查找第一个为空的位置，放置数据；HashMap的做法就是通过链式结构连起来。反正，只要保证放的时候和取的时候的算法一致就行了。</p></li><li><p>如果ID的HashCode%8相等怎么办（这种对应的是第三点说的链式结构的场景）？这时候就需要定义equals了。先通过HashCode%8来判断类在哪一个位置，再通过equals来在这个位置上寻找需要的类。对比两个类的时候也差不多，先通过HashCode比较，假如HashCode相等再判断equals。如果两个类的HashCode都不相同，那么这两个类必定是不同的。</p></li></ul><p>其实在HashSet就是采用的这种存储和获取方式，通过HashCode和equals组合的方式来保证集合无重复。也说明了HashCode()在散列表中是发挥作用的</p><p>ok，我们分析下最开始的代码，找一下输出结果重复的原因（代码片段）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HashSet set1 = <span class="keyword">new</span> HashSet();</span><br><span class="line">set1.add(<span class="string">"1"</span>);</span><br><span class="line">set1.add(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HashSet set2 = <span class="keyword">new</span> HashSet();</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"1"</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"1"</span>);</span><br><span class="line">set2.add(p1);</span><br><span class="line">set2.add(p2);</span><br></pre></td></tr></table></figure><p><strong>set1.add(“1”);</strong>：set1集合为空，找到hashCode对应在哈希表中的存储区，直接存入字符串1</p><p><strong>set1.add(“1”);</strong>：首先判断该字符串1的hashCode值对应哈希表中所在的存储区域是否有相同的hashCode，此处调用<code>String类中的hashCode()</code>，显然两次返回了相同的hashCode，接着进行equals()方法的比较，此处调用<code>String类中的equals()</code>,由于两个字符串指向的常量池中的同一个字符串1，所以两个String对象相同，字符串1重复，不进行存储。</p><p><strong>set2.add(p1);</strong>：set2集合为空，找到对象p1的hashCode对应在哈希表中的存储区，直接存入对象p1</p><p><strong>set2.add(p2);</strong>：首先判断该对象p2的hashCode值对应哈希表中所在的存储区域是否有相同的hashCode，Person中未重写hashCode()此处调用<code>Object类中的hashCode()</code>，所以jdk使用默认Object的hashCode方法，返回内存地址转换后的整数，因为p1、p2为不同对象，地址值不同，所以这里不存在与p2相同hashCode值的对象，直接存入对象p2</p><p>看到这里已经知道Set集合中出现重复的原因了。都是因为hashCode、equals的不规范使用。</p><h3 id="正确的使用姿势"><a class="markdownIt-Anchor" href="#正确的使用姿势"></a> 正确的使用姿势</h3><p>从Jdk源码的注释中可以看出，hashCode() 在散列表中才会发挥作用，当对象无需创建像HashMap、HashSet等集合时，可以不用重写hashCode方法，但是如果有使用到对象的哈希集合等操作时，必须重写hashCode()和equals()。</p><p>修改最初的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEqualsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">        Person(String age) &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//重写equals()</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (obj == <span class="keyword">null</span> || !(obj <span class="keyword">instanceof</span> Person)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//地址相同必相等</span></span><br><span class="line">            <span class="keyword">if</span> (obj == <span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Person person = (Person) obj;</span><br><span class="line">            <span class="comment">//地址不同比较值是否相同</span></span><br><span class="line">            <span class="keyword">return</span> person.age.equals(<span class="keyword">this</span>.age);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重写hashCode()</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(age);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"age='"</span> + age + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet set1 = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set1.add(<span class="string">"1"</span>);</span><br><span class="line">        set1.add(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object a : set1) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HashSet set2 = <span class="keyword">new</span> HashSet();</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"1"</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"1"</span>);</span><br><span class="line">        set2.add(p1);</span><br><span class="line">        set2.add(p2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object a : set2) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写了equals和hashCode方法之后，执行结果就恢复正常了：</p><pre><code>1Person{age='1'}</code></pre><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li>hashCode主要用于提升查询效率提高哈希表性能，来确定在散列结构中对象的存储地址</li><li>重写equals()必须重写hashCode()</li><li>哈希存储结构中，添加元素重复性校验的标准就是先检查hashCode值，后判断equals()</li><li>两个对象equals()相等，hashcode()必定相等</li><li>两个对象hashcode()不等，equals()必定也不等</li><li>两个对象hashcode()相等，对象不一定相等，需要通过equals()进一步判断。</li></ul><h3 id="参考和感谢"><a class="markdownIt-Anchor" href="#参考和感谢"></a> 参考和感谢</h3><p>哈希存储结构中添加元素的逻辑：<a href="https://blog.csdn.net/lijiecao0226/article/details/24609559" target="_blank" rel="noopener">https://blog.csdn.net/lijiecao0226/article/details/24609559</a><br>hashcode详解：<a href="https://www.cnblogs.com/whgk/p/6071617.html" target="_blank" rel="noopener">https://www.cnblogs.com/whgk/p/6071617.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;上一篇文章简单分析了&lt;a href=&quot;https://note.youdao.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;equals()与==的关系&lt;/a&gt;，本文我们再来看看equals()与hashcode()的关系。hashcode的使用还是有很多坑的，一起看看吧~&lt;/p&gt;
&lt;p&gt;本文主要有以下几点来分析：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;hashCode使用中产生的问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;equals/hashcode的渊源&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;产生问题的原因&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;正确的使用姿势&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.larscheng.com/tags/Java/"/>
    
      <category term="equals&amp;HashCode" scheme="https://www.larscheng.com/tags/equals-HashCode/"/>
    
  </entry>
  
  <entry>
    <title>Java中==和equals方法的分析</title>
    <link href="https://www.larscheng.com/java-equals==/"/>
    <id>https://www.larscheng.com/java-equals==/</id>
    <published>2019-06-17T09:42:19.000Z</published>
    <updated>2022-01-02T05:18:26.505Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>== 和 equals是经久不衰的面试题，记得刚毕业的时候我也被问到过很多次，从最开始的一脸懵逼到最后的从容回答，本文我们就来分析下这两者之间的区别和联系。</p><p>为避免阅读疲劳，我这里先放上结论：</p><a id="more"></a> <p><strong>联系：</strong></p><ul><li>两者都被用来进行比较操作</li><li>当equals()未被重写时，两者的用途和比较的内容相同，即都是比较对象的引用地址是否相同</li></ul><p><strong>区别：</strong></p><ul><li>==既可以比较基本数据类型，亦可用在对象之间。equals()只能比较对象间的关系</li></ul><table><thead><tr><th style="text-align:center"> </th><th style="text-align:center">基本数据类型</th><th style="text-align:center">对象类型</th></tr></thead><tbody><tr><td style="text-align:center"><strong>==</strong></td><td style="text-align:center">比较值是否相同</td><td style="text-align:center">比较引用地址是否相同</td></tr><tr><td style="text-align:center"><strong>equals</strong></td><td style="text-align:center">-</td><td style="text-align:center">equals()未被重写时比较对象的引用地址是否相同<br> equals()被重写后根据equals()实现逻辑而定</td></tr></tbody></table><p>下面我们对以上的结论进行验证.</p><h3 id="两者的联系"><a class="markdownIt-Anchor" href="#两者的联系"></a> 两者的联系</h3><p><strong>==</strong>：关系操作符，计算两个操作数之间的关系，返回一个boolean类型的结果</p><p><strong>equals</strong>：Object类的一个方法，用来比较两个对象之间的关系，返回一个boolean类型的结果</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/equalsAnd%3D%3D/20190531164914.png" alt="Object类中的equals()实现"></p><p>从Object类中的equals()实现来看他们两个都是用来进行==的逻辑比较，并且都返回一个boolean值</p><p>但是仔细分析，</p><ul><li>==的操作数是有<code>类型区分</code>的(基本数据类型，对象类型)，所以不同的操作数会有不同的计算逻辑。</li><li>而equals()是Object一个方法，既然是基类方法那么就可以被<code>子类重写</code>，所以实际的比较逻辑还是要根据重写内容来判断</li></ul><p>栗子：Date类的equals()被重写,实际判断的是时间戳的值是否相等</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/equalsAnd%3D%3D/20190531165645.png" alt="Date类中被重写的equals()"></p><h3 id="的使用"><a class="markdownIt-Anchor" href="#的使用"></a> ==的使用</h3><p>== 是一个关系操作符，他有两个操作数，操作数则分为两个大类：基本数据类型、引用数据类型。</p><p>直接上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"a==b:"</span>+(a==b));</span><br><span class="line"></span><br><span class="line">        String s1 = <span class="string">"A"</span>;<span class="comment">//栈内存中对象引用变量s1指向常量池中的A</span></span><br><span class="line">        String s2 = <span class="string">"A"</span>;<span class="comment">//栈内存中对象引用s2指向常量池中的A</span></span><br><span class="line">        String s3 = <span class="keyword">new</span> String(<span class="string">"A"</span>);<span class="comment">//栈内存中对象引用s3指向堆内存中的A对象</span></span><br><span class="line">        String s4 = <span class="keyword">new</span> String(<span class="string">"A"</span>);<span class="comment">//栈内存中对象引用s4指向堆内存中的另一个A对象</span></span><br><span class="line">        System.out.println(<span class="string">"s1==s2:"</span>+(s1==s2));</span><br><span class="line">        System.out.println(<span class="string">"s1==s3:"</span>+(s1==s3));</span><br><span class="line">        System.out.println(<span class="string">"s3==s4:"</span>+(s3==s4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a==b:true</span><br><span class="line">s1==s2:true</span><br><span class="line">s1==s3:false</span><br><span class="line">s3==s4:false</span><br></pre></td></tr></table></figure><p>具体分析下输出的结果</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/equalsAnd%3D%3D/20190603163326.png" alt="堆栈示意图"></p><p><strong>a==b</strong>：操作数a、b是基本数据类型，使用==直接比较ab在栈内存中的值是否相等，故结果为true</p><p><strong>s1==s2</strong>：操作数s1、s2为对象类型，<code>String s1 = &quot;A&quot;</code>执行时，堆内存的常量池中会开辟空间存放A对象，栈内存中的引用变量s1会指向该对象的内存地址，s2创建时同样会指向常量池中的A，s1和s2指向的是同一个对象所以结果为true</p><p><strong>s1==s3</strong>：s2是通过new()来创建对象，堆内存中会开辟空间存放对象，显然s1和s3的内存地址是不同的，s1指向常量池中的&quot;A&quot;，s2指向堆内存中的new String(“A”)，所以结果为false</p><p><strong>s3==s4</strong>：s3、s4是通过new()的方式创建的两个不同的对象，他们的内存地址不同，结果必然为false</p><p><strong>总结：</strong></p><blockquote><p>==作为关系操作符，当操作数为基本数据类型时，直接判断值是否相同，<br>当操作数为对象类型时，判断两对象的内存地址是否相同</p></blockquote><h3 id="equals"><a class="markdownIt-Anchor" href="#equals"></a> equals()</h3><p>equals()方法时Object类的方法之一，这意味着所有Java类都继承了这一方法，并可以对他进行重写，比如String、Date、Integer…</p><p>在上文我们通过Object类中equals()方法的源码可知，在未被重写时，equals()内部其实是调用了==进行判断。</p><p>下面我们看下String类对equals()的实现：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/equalsAnd%3D%3D/20190531175528.png" alt="String类对equals()的实现"></p><p>可见，String类的equals方法中，先判断两个对象是否内存地址相同，如果内存地址不同，则判断值是否相同<br>修改之前的代码测试如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String s1 = <span class="string">"A"</span>;<span class="comment">//栈内存中对象引用变量s1指向常量池中的A</span></span><br><span class="line">        String s2 = <span class="string">"A"</span>;<span class="comment">//栈内存中对象引用s2指向常量池中的A</span></span><br><span class="line">        String s3 = <span class="keyword">new</span> String(<span class="string">"A"</span>);<span class="comment">//栈内存中对象引用s3指向堆内存中的A对象</span></span><br><span class="line">        String s4 = <span class="keyword">new</span> String(<span class="string">"A"</span>);<span class="comment">//栈内存中对象引用s4指向堆内存中的另一个A对象</span></span><br><span class="line">        System.out.println(<span class="string">"s1.equals(s2):"</span>+(s1.equals(s2)));</span><br><span class="line">        System.out.println(<span class="string">"s1.equals(s3):"</span>+(s1.equals(s3)));</span><br><span class="line">        System.out.println(<span class="string">"s3.equals(s4):"</span>+(s3.equals(s4)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1.equals(s2):true</span><br><span class="line">s1.equals(s3):true</span><br><span class="line">s3.equals(s4):true</span><br></pre></td></tr></table></figure><p>具体分析下输出的结果</p><p><strong>s1.equals(s2)</strong>：相同的内存地址直接返回true</p><p><strong>s1.equals(s3)</strong>：内存地址不同，开始判断值是否相同，值都为&quot;A&quot;，返回true</p><p><strong>s3.equals(s4)</strong>：内存地址不同，开始判断值是否相同，值都为&quot;A&quot;，返回true</p><p>通过上面的栗子，发现了一种现象：<strong>内存地址相同的对象其值必定相同，而内存地址不同的对象，其值关系不确定</strong></p><p><strong>总结：</strong></p><blockquote><p>equals()方法在Object类中作用于==相同，但是大部分的类都对equals()进行了重写，所以要找到equals真正的判断逻辑就得看他的方法实现。同样的我们自己创建的实体类或者其他对象都可以自定义equals()方法。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;== 和 equals是经久不衰的面试题，记得刚毕业的时候我也被问到过很多次，从最开始的一脸懵逼到最后的从容回答，本文我们就来分析下这两者之间的区别和联系。&lt;/p&gt;
&lt;p&gt;为避免阅读疲劳，我这里先放上结论：&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.larscheng.com/tags/Java/"/>
    
      <category term="equals&amp;HashCode" scheme="https://www.larscheng.com/tags/equals-HashCode/"/>
    
  </entry>
  
  <entry>
    <title>Java中的自动拆装箱、装箱缓存</title>
    <link href="https://www.larscheng.com/java-auto-box/"/>
    <id>https://www.larscheng.com/java-auto-box/</id>
    <published>2019-06-17T09:40:03.000Z</published>
    <updated>2022-01-02T05:18:26.505Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>Java 是一种面向对象的编程语言，Java 中的类把方法与数据类型连接在一起，构成了自包含式的处理单元。但在 Java 中不能定义基本类型对象，为了能将基本类型视为对象处理，并能连接相关方法，Java 为每个基本数据类型都提供了包装类，如 int 型数值的包装类 Integer，boolean 型数值的包装类 Boolean 等。这样便可以把这些基本类型转换为对象来处理了。</p><a id="more"></a> <p>在Java中包含了8种基本数据类型，与之相对应的还有8种包装类，他们之间的对应关系如下：</p><table><thead><tr><th style="text-align:center">基本数据类型</th><th style="text-align:center">包装类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">Long</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">Double</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">Character</td></tr></tbody></table><h3 id="什么是自动拆装箱"><a class="markdownIt-Anchor" href="#什么是自动拆装箱"></a> 什么是自动拆装箱</h3><p>Java中不能定义基本数据类型的对象，因此我们可以使用包装类，每种基本数据类型都有自己对应的包装类。<br>基本数据类型与包装类之间的转换过程就涉及到了自动拆装箱。</p><ul><li>基本数据类型转换为包装类的过程称作<code>自动装箱</code></li><li>包装类转换为基本数据类型的过程称作<code>自动拆箱</code></li></ul><h3 id="自动拆装箱的实现原理"><a class="markdownIt-Anchor" href="#自动拆装箱的实现原理"></a> 自动拆装箱的实现原理</h3><p>举一个栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoBoxing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//装箱</span></span><br><span class="line">        Integer ii = i;</span><br><span class="line">        <span class="comment">//拆箱</span></span><br><span class="line">        <span class="keyword">int</span> iii = ii;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码实际上就是Java中的语法糖，通过对.class文件进行反编译之后就可以看到代码的真面目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoBoxing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arrstring)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">        Integer n2 = Integer.valueOf(n);</span><br><span class="line">        <span class="keyword">int</span> n3 = n2.intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从反编译后的代码可以看到，int类型到Integer的装箱过程是通过<code>Integer.valueOf()</code>实现，Integer到int的拆箱过程是通过<code>intValue()</code>实现。</p><p>刚好我们测试下其他七种数据类型的拆装箱过程是怎么样的，代码如下<code>AutoBox.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoBox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer aa = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> aaa = aa;</span><br><span class="line"></span><br><span class="line">        Byte bb = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">byte</span> bbb = bb;</span><br><span class="line"></span><br><span class="line">        Short cc = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">short</span> ccc = cc;</span><br><span class="line"></span><br><span class="line">        Long d = <span class="number">40L</span>;</span><br><span class="line">        <span class="keyword">long</span> dd = d;</span><br><span class="line"></span><br><span class="line">        Float e = <span class="number">50f</span>;</span><br><span class="line">        <span class="keyword">float</span> ee = e;</span><br><span class="line"></span><br><span class="line">        Double f = <span class="number">60</span>d;</span><br><span class="line">        <span class="keyword">double</span> ff = f;</span><br><span class="line"></span><br><span class="line">        Character g = <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">char</span> gg = g;</span><br><span class="line"></span><br><span class="line">        Boolean h = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> hh = h;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接对AutoBox.java文件进行编译后，对AutoBox.class文件反编译分析，命令如下</p><pre><code>//编译javac AutoBox.java//反编译分析javap -c AutoBox.class</code></pre><p>结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"AutoBox.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">zhengql</span>.<span class="title">practice</span>.<span class="title">autoBox</span>.<span class="title">AutoBox</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> com.zhengql.practice.autoBox.AutoBox();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">       2: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">       <span class="number">5</span>: astore_1</span><br><span class="line">       <span class="number">6</span>: aload_1</span><br><span class="line">       7: invokevirtual #3                  // Method java/lang/Integer.intValue:()I</span><br><span class="line">      <span class="number">10</span>: istore_2</span><br><span class="line">      <span class="number">11</span>: bipush        <span class="number">20</span></span><br><span class="line">      13: invokestatic  #4                  // Method java/lang/Byte.valueOf:(B)Ljava/lang/Byte;</span><br><span class="line">      <span class="number">16</span>: astore_3</span><br><span class="line">      <span class="number">17</span>: aload_3</span><br><span class="line">      18: invokevirtual #5                  // Method java/lang/Byte.byteValue:()B</span><br><span class="line">      <span class="number">21</span>: istore        <span class="number">4</span></span><br><span class="line">      <span class="number">23</span>: bipush        <span class="number">30</span></span><br><span class="line">      25: invokestatic  #6                  // Method java/lang/Short.valueOf:(S)Ljava/lang/Short;</span><br><span class="line">      <span class="number">28</span>: astore        <span class="number">5</span></span><br><span class="line">      <span class="number">30</span>: aload         <span class="number">5</span></span><br><span class="line">      32: invokevirtual #7                  // Method java/lang/Short.shortValue:()S</span><br><span class="line">      <span class="number">35</span>: istore        <span class="number">6</span></span><br><span class="line">      37: ldc2_w        #8                  // long 40l</span><br><span class="line">      40: invokestatic  #10                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;</span><br><span class="line">      <span class="number">43</span>: astore        <span class="number">7</span></span><br><span class="line">      <span class="number">45</span>: aload         <span class="number">7</span></span><br><span class="line">      47: invokevirtual #11                 // Method java/lang/Long.longValue:()J</span><br><span class="line">      <span class="number">50</span>: lstore        <span class="number">8</span></span><br><span class="line">      52: ldc           #12                 // float 50.0f</span><br><span class="line">      54: invokestatic  #13                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;</span><br><span class="line">      <span class="number">57</span>: astore        <span class="number">10</span></span><br><span class="line">      <span class="number">59</span>: aload         <span class="number">10</span></span><br><span class="line">      61: invokevirtual #14                 // Method java/lang/Float.floatValue:()F</span><br><span class="line">      <span class="number">64</span>: fstore        <span class="number">11</span></span><br><span class="line">      66: ldc2_w        #15                 // double 60.0d</span><br><span class="line">      69: invokestatic  #17                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;</span><br><span class="line">      <span class="number">72</span>: astore        <span class="number">12</span></span><br><span class="line">      <span class="number">74</span>: aload         <span class="number">12</span></span><br><span class="line">      76: invokevirtual #18                 // Method java/lang/Double.doubleValue:()D</span><br><span class="line">      <span class="number">79</span>: dstore        <span class="number">13</span></span><br><span class="line">      <span class="number">81</span>: bipush        <span class="number">97</span></span><br><span class="line">      83: invokestatic  #19                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;</span><br><span class="line">      <span class="number">86</span>: astore        <span class="number">15</span></span><br><span class="line">      <span class="number">88</span>: aload         <span class="number">15</span></span><br><span class="line">      90: invokevirtual #20                 // Method java/lang/Character.charValue:()C</span><br><span class="line">      <span class="number">93</span>: istore        <span class="number">16</span></span><br><span class="line">      <span class="number">95</span>: iconst_1</span><br><span class="line">      96: invokestatic  #21                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;</span><br><span class="line">      <span class="number">99</span>: astore        <span class="number">17</span></span><br><span class="line">     <span class="number">101</span>: aload         <span class="number">17</span></span><br><span class="line">     103: invokevirtual #22                 // Method java/lang/Boolean.booleanValue:()Z</span><br><span class="line">     <span class="number">106</span>: istore        <span class="number">18</span></span><br><span class="line">     <span class="number">108</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>经过测试，其他7种基本数据类型到包装类的装箱拆箱原理都与int/Integer相同,自动装箱都是通过包装类的valueOf()方法来实现的,自动拆箱都是通过包装类对象的xxxValue()来实现的</code></pre><h3 id="什么时候用到自动拆装箱"><a class="markdownIt-Anchor" href="#什么时候用到自动拆装箱"></a> 什么时候用到自动拆装箱</h3><ol><li>赋值操作时</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">1</span>;<span class="comment">//Integer a = Integer.valueOf(1);//自动装箱</span></span><br></pre></td></tr></table></figure><ol start="2"><li>包装类之间运算时（±*/）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">1</span>;</span><br><span class="line">Integer b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b;<span class="comment">//int c = a.intValue() + b.intValue();//自动拆箱</span></span><br></pre></td></tr></table></figure><ol start="3"><li>比较运算时</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">boolean</span> b = a==<span class="number">1</span>;<span class="comment">//boolean b = a.intValue()==1;自动拆箱</span></span><br></pre></td></tr></table></figure><ol start="4"><li>向集合中添加基本数据类型时</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    list.add(i);<span class="comment">//list.add(Integer.valueOf(i));自动装箱</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>方法调用、参数返回时</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoBox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> a = test(i);<span class="comment">//int a = test(i.intvalue());自动拆箱</span></span><br><span class="line">        Integer b = test(<span class="number">1</span>);<span class="comment">//Integer b = Integer.valueOf(test(1));//自动装箱</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装箱缓存"><a class="markdownIt-Anchor" href="#装箱缓存"></a> 装箱缓存</h3><p>其实，在自动装箱过程中还存在一种缓存的操作，且看下面一道题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoBoxTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="number">30</span>;</span><br><span class="line">        Integer b = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a==b)&#123;</span><br><span class="line">            System.out.println(<span class="string">"a、b:内存地址相同"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"a、b:不同的两个对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Integer c = <span class="number">300</span>;</span><br><span class="line">        Integer d = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c==d)&#123;</span><br><span class="line">            System.out.println(<span class="string">"c、d:内存地址相同"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"c、d:不同的两个对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题乍一看是不是觉得匪夷所思，怎么会有这种沙雕题目，两个对象类型用等号判断大小，很明显都是new出来的对象，肯定指向不同的内存地址啊，肯定不相等了。然鹅运行的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a、b:内存地址相同</span><br><span class="line">c、d:不同的两个对象</span><br></pre></td></tr></table></figure><p>可以看到为什么同样的操作，c和d就符合判断逻辑，而a和b就偏偏指向同一个对象呢？</p><pre><code>这是因为在自动装箱过程中，Integer对象通过使用相同的对象引用实现对象的缓存和重用。</code></pre><p>那么问题又来了，既然有缓存操作，那为什么a、b有，c、d却没有呢？</p><p>来看一下Integer自动装箱的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断入参i是否处于<code>[IntegerCache.low,IntegerCache.high]</code>区间内，如果i值在区间内，则从缓存<code>IntegerCache.cache</code>中读取某一个值返回，反之直接new一个Integer对象，这说明<strong>触发缓存操作是根据i值的范围决定的</strong>。</p><p>那这个范围又是多少呢？阅读该方法的注释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This method will always cache values in the range -128 to 127,</span><br><span class="line">inclusive, and may cache other values outside of this range.</span><br></pre></td></tr></table></figure><p>此方法默认缓存<code>[-128,127]</code>范围内的值，但也可以缓存范围外的其他值，这里是因为区间右侧的<code>IntegerCache.high</code>是可配置的。</p><p>看到这里，终于明白，最开始的那道题目，为什么ab和cd的结果会完全不一样，是因为a、b的值在[-128,127]区间内，而c、d的值不在此范围内。</p><p>那么，既然Integer有缓存这个骚操作，那其他的包装类是不是也有呢？直接去看每个包装类的<code>valueOf</code>方法就可以知道了。</p><p>这里我就不贴源码了，查看后的结论是，<strong>其他的7种包装类中，所有的整数类型的类，在自动装箱时都有类似于Integer的这种缓存操作，只不过他们各自的触发情况不同</strong>，结果整理如下：</p><table><thead><tr><th style="text-align:center">包装类</th><th style="text-align:center">缓存机制</th><th style="text-align:center">触发条件</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">Byte</td><td style="text-align:center">ByteCache</td><td style="text-align:center">[-128,127]</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Short</td><td style="text-align:center">ShortCache</td><td style="text-align:center">[-128,127]</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Integer</td><td style="text-align:center">IntegerCache</td><td style="text-align:center">[-128,127]</td><td style="text-align:center">最大值可配置</td></tr><tr><td style="text-align:center">Long</td><td style="text-align:center">LongCache</td><td style="text-align:center">[-128,127]</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Float</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Boolean</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Character</td><td style="text-align:center">CharacterCache</td><td style="text-align:center">[0,127]</td><td style="text-align:center"></td></tr></tbody></table><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>自动装箱和拆箱方便了我们开发人员，但是在使用自动拆装箱时也有很多<strong>翻车现场</strong>，最容易出现的就是<strong>空指针</strong>，所以在使用自动拆装箱时一定要防止空指针。</p><p>自动装箱过程中涉及到对象的创建等操作，如果在循环体中大量的拆装箱操作，势必会<strong>浪费资源</strong>，所以何时使用合理的使用自动拆装箱是尤为重要。</p><h3 id="参考和感谢"><a class="markdownIt-Anchor" href="#参考和感谢"></a> 参考和感谢</h3><p>Java中整型的缓存机制：<a href="https://www.hollischuang.com/archives/1174" target="_blank" rel="noopener">https://www.hollischuang.com/archives/1174</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;Java 是一种面向对象的编程语言，Java 中的类把方法与数据类型连接在一起，构成了自包含式的处理单元。但在 Java 中不能定义基本类型对象，为了能将基本类型视为对象处理，并能连接相关方法，Java 为每个基本数据类型都提供了包装类，如 int 型数值的包装类 Integer，boolean 型数值的包装类 Boolean 等。这样便可以把这些基本类型转换为对象来处理了。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.larscheng.com/tags/Java/"/>
    
      <category term="自动拆装箱" scheme="https://www.larscheng.com/tags/%E8%87%AA%E5%8A%A8%E6%8B%86%E8%A3%85%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title>About-blog</title>
    <link href="https://www.larscheng.com/about-blog/"/>
    <id>https://www.larscheng.com/about-blog/</id>
    <published>2019-06-12T00:25:48.000Z</published>
    <updated>2022-01-02T05:18:26.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="larschengs-blog-的前世今生"><a class="markdownIt-Anchor" href="#larschengs-blog-的前世今生"></a> LarsCheng’s Blog 的前世今生</h3><!-- .slide: data-transition="convex" data-background="#00C4B6" --><p>===</p><h3 id="20180724"><a class="markdownIt-Anchor" href="#20180724"></a> 2018.07.24</h3><!-- .slide: data-transition="zoom" data-background="#8a85c3" --><p>有一天lars觉得应该持续积累知识，记录学习历程，so…,基于hexo搭建了第一版博客</p><p>===</p><h3 id="20190309"><a class="markdownIt-Anchor" href="#20190309"></a> 2019.03.09</h3><!-- .slide: data-transition="concave" data-background="#00C4B6" --><p>强迫症的驱使下更换了博客主题为Next,并且完善了博客各项功能</p><p>===</p><h3 id="20190712"><a class="markdownIt-Anchor" href="#20190712"></a> 2019.07.12</h3><!-- .slide: data-transition="slide" data-background="#49B1F5" --><p>更换博客主题为<a href="https://molunerfinn.com" target="_blank" rel="noopener">Melody</a></p><p>你现在看到的幻灯片也是Melody的功能之一</p><p>这里十分感谢Melody的作者Molunerfinn</p><p>主题地址：<a href="https://github.com/Molunerfinn/hexo-theme-melody" target="_blank" rel="noopener">传送门</a></p><p>===</p><h3 id="20190724"><a class="markdownIt-Anchor" href="#20190724"></a> 2019.07.24</h3><!-- .slide: data-transition="slide" data-background="#8a85c3" --><p>更换博客主题为<a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">Butterfly</a>,</p><p>她是在Melody基础上进行再开发的一款非常棒的主题</p><p>再次感谢作者Jerryc，主题地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">传送门</a></p><p>===</p><h3 id="now"><a class="markdownIt-Anchor" href="#now"></a> now…</h3><!-- .slide: data-transition="fade" data-background="#C7916B" --><p>博客持续更新，如果喜欢记得收藏哦~~~</p><p>===</p><h3 id="博客主旨"><a class="markdownIt-Anchor" href="#博客主旨"></a> 博客主旨</h3><!-- .slide: data-transition="fade" data-background="#C7916B" --><p>分享技术，记录生活</p><p>===</p><p>thx…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="生活" scheme="https://www.larscheng.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中的编译、反编译和反编译工具全家桶分享</title>
    <link href="https://www.larscheng.com/java-de-compile/"/>
    <id>https://www.larscheng.com/java-de-compile/</id>
    <published>2019-05-30T09:00:13.000Z</published>
    <updated>2022-01-02T05:18:26.505Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>本文介绍到的反编译工具下载地址：<a href="https://pan.baidu.com/s/1Q6LAWLzsedjP-mkDr5kt_w" target="_blank" rel="noopener">反编译工具全家桶</a> , 提取码：<a href="">oxor</a></p><a id="more"></a> <h3 id="编程语言"><a class="markdownIt-Anchor" href="#编程语言"></a> 编程语言</h3><p>编程语言分为低级语言和高级语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">编程语言--&gt;低级语言</span><br><span class="line">编程语言--&gt;高级语言</span><br><span class="line">低级语言--&gt;机器语言</span><br><span class="line">低级语言--&gt;汇编语言</span><br><span class="line">高级语言--&gt;C/C++/Java/Python....</span><br></pre></td></tr></table></figure><p>最早的程序员都是用机器语言在写代码，那时候应该不叫代码，叫写十六进制串，这样的编程十分复杂不方便而且出错率高</p><p>后来有一个偷懒的程序员把机器语言中一组一组通用的十六进制用助记符来代替，这种通过助记符的方式被称作汇编语言，用助记符和部分机器语编写程序，最终执行前让汇编器将助记符转换成机器语言。</p><p>然鹅，无论是机器语言还是汇编语言，后来的程序员觉得还是很麻烦，于是又有几个偷懒的程序员他们先后创造了c、c++、java、python…</p><h3 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h3><p>程序员编程是通过高级语言，而计算机执行程序只认识机器语言，那么将高级语言翻译成机器语言的过程就叫做编译。负责执行这一过程的工具叫做编译器</p><p>举个例子：</p><p>Java语言属于高级语言，计算机不认识</p><p>.class文件属于编译后的Java虚拟机认识的字节码文件</p><p>Java文件通过Java语言中的<code>编译器javac</code>编译后生成.class字节码文件</p><p>说明：字节码并不是机器语言，要想让机器能够执行，还需要把字节码翻译成机器指令。这个过程是Java虚拟机做的，这个过程也叫编译。是更深层次的编译。</p><h3 id="反编译"><a class="markdownIt-Anchor" href="#反编译"></a> 反编译</h3><p>反编译当然就是编译的逆向操作了，将机器认识的机器语言转换成程序员认识的高级语言。</p><p>举个例子：<br>Java种将.class文件转换成Java文件，这一过程就是反编译。</p><h3 id="java中常用的反编译工具"><a class="markdownIt-Anchor" href="#java中常用的反编译工具"></a> Java中常用的反编译工具</h3><h4 id="javap"><a class="markdownIt-Anchor" href="#javap"></a> javap</h4><p>javap是JDK自带的反汇编器，可以查看java编译器为我们生成的字节码。它的作用就是根据class字节码文件，反解析出当前类对应的code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等等信息。</p><p>用法：<code>javap &lt;options&gt; &lt;classes&gt;</code></p><p>javap命令算是java自己原装的反编译工具，但是他反编译后的代码阅读性不太好，我们也可以用其他方式进行反编译。</p><h4 id="jd-gui"><a class="markdownIt-Anchor" href="#jd-gui"></a> JD-GUI</h4><p>JD-GUI是一个独立的图形实用程序，支持Windows、Linux和苹果Mac Os三个平台，可对“.class”文件进行反编译。可以使用JD-GUI浏览重建的源代码，以便即时访问方法和字段。</p><p><img src="https://camo.githubusercontent.com/8286f65f4b148a27de05a78fa366074543e89ce3/687474703a2f2f6a642e62656e6f772e63612f696d672f73637265656e73686f7431372e706e67" alt="jd-dui官方示意图"></p><p>JD-GUI在<code>1.4.0</code>版本后停止更新了很久，当时的版本对于Java1.7以后的代码兼容性很差，不过最近JD-GUI的恢复更新，并兼容Java9<br>JD-GUI现在最新的版本是<code>1.5.1</code>，下载<code>jd-gui-1.5.1.jar</code>直接双击执行即可。</p><p><a href="https://github.com/java-decompiler/jd-gui" target="_blank" rel="noopener">github地址</a></p><h4 id="cfr"><a class="markdownIt-Anchor" href="#cfr"></a> CFR</h4><p>在JD-GUI断更期间，CFR就被大家广泛使用了。</p><pre><code>CFR will decompile modern Java features - up to and including much of Java 9, 10, 12 and beyond, but is written entirely in Java 6, so will work anywhere!</code></pre><p>作者表示，CFR可以反编译目前Java 9,10,12及更高版本的大部分功能，但完全用Java 6编写，因此可以在任何地方使用！</p><p>CFR的使用也是十分方便，直接下载<code>jar</code>包，通过<code>java -jar</code>执行即可，如下：</p><pre><code>java -jar cfr-0.144.jar Demo.class  </code></pre><p>最新jar包下载和其他参数使用可参考<a href="http://www.benf.org/other/cfr/" target="_blank" rel="noopener">CFR官网</a></p><h4 id="procyon"><a class="markdownIt-Anchor" href="#procyon"></a> Procyon</h4><p>Procyon就很有趣了，它的作者和<code>CFR作者</code>就职同一公司，他们俩在进行一场友谊赛，看看谁能提供更好的反编译器。</p><p>Procyon-Decompiler支持JDK1.8类的反编译，并且支持：字符串的Switch、枚举声明方面、注解方面、匿名类、内部类、Java8新接口规范、Java8 Lambda表达式、Java8 方法传递等。</p><p>Procyon和CFR的运行方式相同，如下：</p><pre><code>java -jar procyon-decompiler-0.5.30.jar Demo.class</code></pre><p>最新jar包下载和其他参数使用可参考<a href="https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler" target="_blank" rel="noopener">Procyon地址</a></p><p><em><strong>Procyon拥有一款第三方的GUI：luyten</strong></em></p><p>如果你习惯像JD-GUI那样操作方便的GUI的话，你可以选择使用<code>Luyten</code>，它是基于Procyon的一款反编译工具，推荐使用哦~<br><a href="https://github.com/deathmarine/Luyten" target="_blank" rel="noopener">Luyten官方网址</a></p><p><img src="https://camo.githubusercontent.com/ee810f18540a53b9226ea6281eea8bcccbbbd76d/68747470733a2f2f692e696d6775722e636f6d2f706863353957362e706e67" alt="Luyten官方示意图"></p><h4 id="fernflower"><a class="markdownIt-Anchor" href="#fernflower"></a> Fernflower</h4><p>Fernflower相信经常使用IDEA的同学应该很眼熟叭，他是IDEA自带的反编译工具，我们通过IDEA看到的<code>.class</code>文件内容都是通过Fernflower反编译后的。IDEA中效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/decompiler/20190530162952.png" alt=""></p><p><a href="http://the.bytecode.club/fernflower.jar" target="_blank" rel="noopener">Fernflower.jar下载地址</a>，也可以拉取官方的项目自己在本地进行gradle构建</p><p>下好fernflower.jar后也准备好需要编译的jar包。</p><p>使用命令行 java -jar fernflower.jar  &lt;目标&gt;.jar &lt;文件夹名&gt;/</p><pre><code>java -jar fernflower.jar Demo.jar demo/</code></pre><p>编译成功后demo文件夹下是一个&lt;文件名&gt;.jar。</p><p>可以看到比刚才的目标jar包小一些，解压此jar包就可以查看源码了！</p><p><a href="https://github.com/JetBrains/intellij-community/tree/master/plugins/java-decompiler/engine" target="_blank" rel="noopener">Fernflower github地址</a></p><h4 id="bytecode-viewer逆向必备"><a class="markdownIt-Anchor" href="#bytecode-viewer逆向必备"></a> bytecode-viewer(逆向必备!!!)</h4><p>bytecode-viewer（字节码查看器）一款轻量级的Java字节码查看器，它可以反编译jar包，.class文件、Android APK，并且支持多种反编译器</p><p>你可以用CFR、Procyon、Fernflower等同时编译同一个.class文件，并进行结果查看和对比。如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/decompiler/20190530164104.png" alt=""></p><p>是不是很方便呐，<a href="https://github.com/Konloch/bytecode-viewer/releases" target="_blank" rel="noopener">github地址</a> 快去下载试试吧。</p><h4 id="在线反编译"><a class="markdownIt-Anchor" href="#在线反编译"></a> 在线反编译</h4><p><a href="http://www.javadecompilers.com/" target="_blank" rel="noopener">Java decompiler online</a></p><p><a href="http://javare.cn/" target="_blank" rel="noopener">JAVA反向工程网</a></p><p><em><strong>ps:</strong></em><br>部分官网和仓库需要翻墙才可以下载，我这边已经为大家准备好了<a href="https://pan.baidu.com/s/1Q6LAWLzsedjP-mkDr5kt_w" target="_blank" rel="noopener">反编译工具全家桶</a> , 提取码：<a href="">oxor</a></p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>了解编译和反编译的基本概念后，其实反编译可以使我们更好的了解Java代码真实的面目，Java中有很多的语法糖，通过反编译可以很好的了解和学习这些语法糖的实现原理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;本文介绍到的反编译工具下载地址：&lt;a href=&quot;https://pan.baidu.com/s/1Q6LAWLzsedjP-mkDr5kt_w&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;反编译工具全家桶&lt;/a&gt; , 提取码：&lt;a href=&quot;&quot;&gt;oxor&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.larscheng.com/tags/Java/"/>
    
      <category term="编译" scheme="https://www.larscheng.com/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="反编译" scheme="https://www.larscheng.com/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>finalize()的生命周期（执行过程）</title>
    <link href="https://www.larscheng.com/java-finalize/"/>
    <id>https://www.larscheng.com/java-finalize/</id>
    <published>2019-05-24T01:27:39.000Z</published>
    <updated>2022-01-02T05:18:26.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h3><p>本文转载自 <a href="https://www.cnblogs.com/Smina/p/7189427.html" target="_blank" rel="noopener">Smina俊</a> 的博客：<a href="https://www.cnblogs.com/Smina/p/7189427.html" target="_blank" rel="noopener">《java finalize方法总结、GC执行finalize的过程》</a></p><p>博文中关于对象复活的示例和生命周期的过程极为精辟，分享给大家。</p><a id="more"></a><pre><code>本文的目的并不是鼓励使用finalize方法，而是大致理清其作用、问题以及GC执行finalize的过程。</code></pre><h3 id="finalize的作用"><a class="markdownIt-Anchor" href="#finalize的作用"></a> finalize的作用</h3><p>finalize()是Object的protected方法，子类可以覆盖该方法以实现资源清理工作，GC在回收对象之前调用该方法。</p><p>finalize()与C++ 中的析构函数不是对应的。C++中的析构函数调用的时机是确定的（对象离开作用域或delete掉），但Java中的finalize的调用具有不确定性不建议用finalize方法完成“非内存资源”的清理工作。</p><p>但建议用于：</p><p>① 清理本地对象(通过JNI创建的对象)；<br>② 作为确保某些非内存资源(如Socket、文件等)释放的一个补充：在finalize方法中显式调用其他资源释放方法。</p><p>其原因可见下文[finalize的问题]</p><h3 id="finalize的问题"><a class="markdownIt-Anchor" href="#finalize的问题"></a> finalize的问题</h3><p>一些与finalize相关的方法，由于一些致命的缺陷，已经被废弃了，如System.runFinalizersOnExit()方法、Runtime.runFinalizersOnExit()方法</p><p>System.gc()与System.runFinalization()方法增加了finalize方法执行的机会，但不可盲目依赖它们</p><p>Java语言规范并不保证finalize方法会被及时地执行、而且根本不会保证它们会被执行</p><p>finalize方法可能会带来性能问题。因为JVM通常在单独的低优先级线程中完成finalize的执行</p><p>对象再生问题：finalize方法中，可将待回收对象赋值给GC Roots可达的对象引用，从而达到对象再生的目的<br>finalize方法至多由GC执行一次(用户当然可以手动调用对象的finalize方法，但并不影响GC对finalize的行为)</p><h3 id="finalize的执行过程生命周期"><a class="markdownIt-Anchor" href="#finalize的执行过程生命周期"></a> finalize的执行过程(生命周期)</h3><p>(1) 首先，大致描述一下finalize流程：</p><p>当对象变成(GC Roots)不可达时，GC会判断该对象是否覆盖了finalize方法，若未覆盖，则直接将其回收。否则，若对象未执行过finalize方法，将其放入F-Queue队列，由一低优先级线程执行该队列中对象的finalize方法。执行finalize方法完毕后，GC会再次判断该对象是否可达，若不可达，则进行回收，否则，对象“复活”。</p><p>(2) 具体的finalize流程：</p><p>对象可由两种状态，涉及到两类状态空间，一是终结状态空间 F = {unfinalized, finalizable, finalized}；二是可达状态空间 R = {reachable, finalizer-reachable, unreachable}。各状态含义如下：</p><ul><li>unfinalized: 新建对象会先进入此状态，GC并未准备执行其finalize方法，因为该对象是可达的</li><li>finalizable: 表示GC可对该对象执行finalize方法，GC已检测到该对象不可达。正如前面所述，GC通过F-Queue队列和一专用线程完成finalize的执行</li><li>finalized: 表示GC已经对该对象执行过finalize方法</li><li>reachable: 表示GC Roots引用可达</li><li>finalizer-reachable(f-reachable)：表示不是reachable，但可通过某个finalizable对象可达</li><li>unreachable：对象不可通过上面两种途径可达</li></ul><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/finalize/20190524104518.png" alt="img"></p><p>变迁说明：</p><ul><li>新建对象首先处于[reachable, unfinalized]状态(A)</li><li>随着程序的运行，一些引用关系会消失，导致状态变迁，从reachable状态变迁到f-reachable(B, C, D)或unreachable(E, F)状态</li><li>若JVM检测到处于unfinalized状态的对象变成f-reachable或unreachable，JVM会将其标记为finalizable状态(G,H)。若对象原处于[unreachable, unfinalized]状态，则同时将其标记为f-reachable(H)。</li><li>在某个时刻，JVM取出某个finalizable对象，将其标记为finalized并在某个线程中执行其finalize方法。由于是在活动线程中引用了该对象，该对象将变迁到(reachable, finalized)状态(K或J)。该动作将影响某些其他对象从f-reachable状态重新回到reachable状态(L, M, N)</li><li>处于finalizable状态的对象不能同时是unreahable的，由第4点可知，将对象finalizable对象标记为finalized时会由某个线程执行该对象的finalize方法，致使其变成reachable。这也是图中只有八个状态点的原因</li><li>程序员手动调用finalize方法并不会影响到上述内部标记的变化，因此JVM只会至多调用finalize一次，即使该对象“复活”也是如此。程序员手动调用多少次不影响JVM的行为</li><li>若JVM检测到finalized状态的对象变成unreachable，回收其内存(I)</li><li>若对象并未覆盖finalize方法，JVM会进行优化，直接回收对象（O）</li><li>注：System.runFinalizersOnExit()等方法可以使对象即使处于reachable状态，JVM仍对其执行finalize方法</li></ul><h3 id="对象复活代码示例"><a class="markdownIt-Anchor" href="#对象复活代码示例"></a> 对象复活代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Demo SAVE_HOOK = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建对象，因为SAVE_HOOK指向这个对象，对象此时的状态是(reachable,unfinalized)</span></span><br><span class="line">        SAVE_HOOK = <span class="keyword">new</span> Demo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将SAVE_HOOK设置成null，此时刚才创建的对象就不可达了，因为没有句柄再指向它了，对象此时状态是(unreachable，unfinalized)</span></span><br><span class="line">        SAVE_HOOK = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//强制系统执行垃圾回收，系统发现刚才创建的对象处于unreachable状态，并检测到这个对象的类覆盖了finalize方法，因此把这个对象放入F-Queue队列，</span></span><br><span class="line">        <span class="comment">//由低优先级线程执行它的finalize方法，此时对象的状态变成(unreachable, finalizable)或者是(finalizer-reachable,finalizable)</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sleep，目的是给低优先级线程从F-Queue队列取出对象并执行其finalize方法提供机会。在执行完对象的finalize方法中的super.finalize()时，</span></span><br><span class="line">        <span class="comment">// 对象的状态变成(unreachable,finalized)状态，但接下来在finalize方法中又执行了SAVE_HOOK = this;这句话，又有句柄指向这个对象了，对象又可达了。</span></span><br><span class="line">        <span class="comment">// 因此对象的状态又变成了(reachable, finalized)状态。</span></span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里对象处于(reachable,finalized)状态。对象的finalized方法被执行了，因此是finalized状态。又因为在finalize方法是执行了SAVE_HOOK=this这句话，</span></span><br><span class="line">        <span class="comment">// 本来是unreachable的对象，又变成reachable了。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != SAVE_HOOK) &#123;</span><br><span class="line">            <span class="comment">//此时对象应该处于(reachable, finalized)状态</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这句话会输出，注意对象由unreachable，经过finalize复活了。</span></span><br><span class="line">            System.out.println(<span class="string">"Yes , I am still alive"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"No , I am dead"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再一次将SAVE_HOOK放空，此时刚才复活的对象，状态变成(unreachable,finalized)</span></span><br><span class="line">        SAVE_HOOK = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 再一次强制系统回收垃圾，此时系统发现对象不可达，虽然覆盖了finalize方法，但已经执行过了，因此直接回收。</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">// 为系统回收垃圾提供机会</span></span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != SAVE_HOOK) &#123;</span><br><span class="line">            <span class="comment">// 这句话不会输出，因为对象已经彻底消失了。</span></span><br><span class="line">            System.out.println(<span class="string">"Yes , I am still alive"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"No , I am dead"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">"execute method finalize()"</span>);</span><br><span class="line">        <span class="comment">// 这句话让对象的状态由unreachable变成reachable，就是对象复活</span></span><br><span class="line">        SAVE_HOOK = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#说明&quot;&gt;&lt;/a&gt; 说明&lt;/h3&gt;
&lt;p&gt;本文转载自 &lt;a href=&quot;https://www.cnblogs.com/Smina/p/7189427.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Smina俊&lt;/a&gt; 的博客：&lt;a href=&quot;https://www.cnblogs.com/Smina/p/7189427.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《java finalize方法总结、GC执行finalize的过程》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;博文中关于对象复活的示例和生命周期的过程极为精辟，分享给大家。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="finalize" scheme="https://www.larscheng.com/tags/finalize/"/>
    
  </entry>
  
  <entry>
    <title>Java关键字之final、finally与finalize方法</title>
    <link href="https://www.larscheng.com/java3f/"/>
    <id>https://www.larscheng.com/java3f/</id>
    <published>2019-05-24T01:13:11.000Z</published>
    <updated>2022-01-02T05:18:26.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Java中有很多关键字，这些关键字中的final、finally和finalize()方法长相十分相似，其实他们仨并没什么特殊的联系，只是单纯的像，本文就简单介绍下他们仨各自的用途。</p><a id="more"></a><h2 id="final"><a class="markdownIt-Anchor" href="#final"></a> final</h2><p>final关键字可用于非抽象类、非抽象类的成员方法(构造方法除外)、非抽象类中的变量、参数</p><ul><li>用于类：表示该类不可被继承，类中的方法默认都是被final修饰的方法（例如String类）</li><li>用于方法：表示该方法不可被子类重写（例如Object.getClass()方法）</li><li>用于变量：表示常量，只能被赋值一次不可改变</li><li>用于参数：该参数在方法中只可以被读取不可被修改</li></ul><p>注：final修饰变量时，被修饰的变量是常量，该变量名全部大写；可以先声明不进行赋值值，这种叫做final空白。但是使用前必须被初始化。一旦被赋值，将不能再修改</p><h3 id="修饰基本类型变量和引用类型变量"><a class="markdownIt-Anchor" href="#修饰基本类型变量和引用类型变量"></a> 修饰基本类型变量和引用类型变量</h3><ul><li>修饰基本类型变量时：不能对基本类型重新赋值。</li><li>修饰引用型变量时：它仅仅保存的是一个引用，final保证的是这个引用类型的变量所引用的地址不会变。即一直引用同一个对象，但是被引用对象的值可以改变。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述: final修饰变量示例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//编译报错，无法为最终变量num分配值</span></span><br><span class="line">        <span class="comment">//num+=1;</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Person person = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">        person.setName(<span class="string">"李四"</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                    <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", age="</span> + age +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行示意图如下：</p><p><img src="https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g2tznijkygj30ei048acy.jpg" alt="image"></p><h2 id="finally"><a class="markdownIt-Anchor" href="#finally"></a> finally</h2><p>try-catch想必大家都用过，finally必定不会陌生，finally只有在出现try-catch的地方才会用到，而且不一定会用到。我们一般用到它的时候应该是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//.......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解finally记住下面这就话就够了：</p><pre><code>try-catch中无论是否发生异常，finally中的逻辑都会执行。finally可有可无。但是必须与try-catch成对出现。</code></pre><h2 id="finalize"><a class="markdownIt-Anchor" href="#finalize"></a> finalize</h2><pre><code>首先需要说明的是：finalize()方法本身存在一定的缺陷性，实际使用中也不推荐finalize方法，在Java9中finalize已经被废弃</code></pre><p>finalize()方法是在Object类中定义的,Java中所有类都从Object类中继承finalize()方法。垃圾回收器准备释放对象占用的内存时,首先调用对象的finalize()方法</p><p>finalize()与C++ 中的析构函数是不一样的。C++中的析构函数调用的时机是确定的（对象离开作用域或调用delete），但Java由于gc的执行时间不确定导致finalize的调用具有不确定性</p><p>Java有垃圾回收器（GC）负责回收无用对象占据的内存空间。但也有特殊情况:假定你的对象(并非使用new)获得了一块“特殊”的内存区域，由于垃圾回收期只知道释放那些经由new分配的内存，所以它不知道该如何释放该对象的这块“特殊”内存。所以Java的设计者准备了finalize()方法来解决这个问题，但是finalize也带来了一些隐患</p><h3 id="finalize存在的问题"><a class="markdownIt-Anchor" href="#finalize存在的问题"></a> finalize存在的问题</h3><ul><li>不可靠：只有当垃圾回收器（GC）释放该对象时才会调用finalize方法，然而GC并不是想执行就执行的（根据程序当前是否内存不足），而且即使调用了finalize方法也不一定回收成功</li><li>阻碍GC的快速回收：在进行垃圾回收时会启动一个finalizethread，当遇到有重写了finalize方法的对象时，会将对象放入finalizethread的中，并形成一个队列，暂时挂起，且运行时间并不确定，这就导致了对象回收的缓慢，如果队列中存在重写的finalize方法有死锁问题则会导致后面的方法都无法执行</li><li>会发生对象复活现象：finalize方法中，可将待回收对象赋值给GC Roots可达的对象引用，从而达到对象再生的目的</li></ul><p>关于finalize的生命周期和代码示例，此处推荐一篇很详细的文章：<a href="https://www.cnblogs.com/Smina/p/7189427.html" target="_blank" rel="noopener">finalize的执行过程(生命周期)</a></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://blog.csdn.net/u011695358/article/details/78860410" target="_blank" rel="noopener">Java中finalize()详解和Java9中的垃圾回收</a>：<a href="https://blog.csdn.net/u011695358/article/details/78860410" target="_blank" rel="noopener">https://blog.csdn.net/u011695358/article/details/78860410</a></p><p><a href="https://segmentfault.com/q/1010000000094660" target="_blank" rel="noopener">finalize()的使用场景</a>：<a href="https://segmentfault.com/q/1010000000094660" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000094660</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中有很多关键字，这些关键字中的final、finally和finalize()方法长相十分相似，其实他们仨并没什么特殊的联系，只是单纯的像，本文就简单介绍下他们仨各自的用途。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="final" scheme="https://www.larscheng.com/tags/final/"/>
    
      <category term="finally" scheme="https://www.larscheng.com/tags/finally/"/>
    
      <category term="finalize()" scheme="https://www.larscheng.com/tags/finalize/"/>
    
  </entry>
  
  <entry>
    <title>Java中重写、重载</title>
    <link href="https://www.larscheng.com/java-override-overload/"/>
    <id>https://www.larscheng.com/java-override-overload/</id>
    <published>2019-05-23T11:14:41.000Z</published>
    <updated>2022-01-02T05:18:26.505Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="重写"><a class="markdownIt-Anchor" href="#重写"></a> 重写</h3><p>子类继承父类，拥有父类的方法和属性后，子类在保证继承的方法在方法名和参数列不变的情况下，对方法的内部实现进行重新定义，这种现象就是方法重写</p><p>重写比较侧重于父子差异</p><a id="more"></a><h4 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h4><p>父亲（Father类）名下有一套三层楼房，后来由儿子（Son类）继承，继承之后碰巧拆迁，三层楼房在儿子这里变成了拆迁款，这套房子（house方法）的价值转换就属于重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">house</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.printhl(<span class="string">"三层楼房"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">house</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.printhl(<span class="string">"拆迁款"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载"><a class="markdownIt-Anchor" href="#重载"></a> 重载</h3><p>在同一个类中，有多个同名、但不同参数列表(相同参数不同顺序)的方法存在现象就是方法重载</p><p>最常见的重载应该就是构造方法的重载</p><h4 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例</h4><p>我掌握了烧菜的技能，当家里没菜的时候我只能做泡面（cook()方法），有一天买了猪肉，于是我做了一份红烧肉（cook(int a)方法），第二天新买了土豆和牛肉，于是麻溜的做了一份土豆炖牛肉（cook(int a,String s)）,后台有一天家里来客人，他们带来了鸡肉和蘑菇于是我就做了小鸡炖蘑菇（cook(String s,int a)）</p><p>可以看出同样是烧菜，但根据不同的配菜可以用同样的手法做出不同的菜品。这种因菜而变的烧菜方法也是重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cooking</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1：原方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"泡面"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//2：同名、不同参数、无返回类型（与1对比）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"红烧肉"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//3：同名、不同参数、不同返回类型（与1对比）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cook</span><span class="params">(<span class="keyword">int</span> a,String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"土豆炖牛肉"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//4：同名、相同返回结果、不同参数顺序（与3对比）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cook</span><span class="params">(String s,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"小鸡炖蘑菇"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Cooking o = <span class="keyword">new</span> Cooking();</span><br><span class="line">        <span class="comment">//没菜</span></span><br><span class="line">        o.cook();</span><br><span class="line">        <span class="comment">//买了肉</span></span><br><span class="line">        o.cook(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//买了土豆和牛肉</span></span><br><span class="line">        System.out.println(o.cook(<span class="number">1</span>,<span class="string">"a"</span>));</span><br><span class="line">        <span class="comment">//买了鸡肉和蘑菇</span></span><br><span class="line">        System.out.println(o.cook(<span class="string">"b"</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写与重载之间的区别"><a class="markdownIt-Anchor" href="#重写与重载之间的区别"></a> 重写与重载之间的区别</h3><table><thead><tr><th>要点</th><th>重写</th><th>重载</th></tr></thead><tbody><tr><td>方法名</td><td>不可修改</td><td>不可修改</td></tr><tr><td>参数列表</td><td>不可修改</td><td>必须修改</td></tr><tr><td>参数顺序</td><td>不可修改</td><td>可以修改</td></tr><tr><td>返回类型</td><td>不可修改</td><td>可以修改</td></tr><tr><td>异常</td><td>只可降级或删除</td><td>可以修改</td></tr><tr><td>访问权限</td><td>只可降级</td><td>可以修改</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;重写&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#重写&quot;&gt;&lt;/a&gt; 重写&lt;/h3&gt;
&lt;p&gt;子类继承父类，拥有父类的方法和属性后，子类在保证继承的方法在方法名和参数列不变的情况下，对方法的内部实现进行重新定义，这种现象就是方法重写&lt;/p&gt;
&lt;p&gt;重写比较侧重于父子差异&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="重写" scheme="https://www.larscheng.com/tags/%E9%87%8D%E5%86%99/"/>
    
      <category term="重载" scheme="https://www.larscheng.com/tags/%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Java中面向对象的三大特征：继承、封装、多态</title>
    <link href="https://www.larscheng.com/java3feature/"/>
    <id>https://www.larscheng.com/java3feature/</id>
    <published>2019-05-23T10:56:07.000Z</published>
    <updated>2022-01-02T05:18:26.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="面向对象的三大特征"><a class="markdownIt-Anchor" href="#面向对象的三大特征"></a> 面向对象的三大特征</h2><p>继承、封装、多态</p><p>接口（Interface）是用来定义行为的！</p><p>抽象类（Abstract Class）是用来实现行为的！</p><p>具体类（Class）是用来执行行为的！</p><p>使用了对象就叫基于对象，基于对象的基础上增加了继承从而变成了面向对象。</p><a id="more"></a><h2 id="封装"><a class="markdownIt-Anchor" href="#封装"></a> 封装</h2><p>是对象和类概念的主要特征</p><p>封装：即把客观事物封装成抽象的类，并且类可以对自己的数据和方法进行权限控制，</p><p>封装就是指利用抽象数据类型将数据和基于数据的操作封装在一起，数据被保护在抽象类型的内部，系统的其他部分只有通过包裹在数据外面的被授权的操作，才能够与这个抽象数据类型交流与交互！</p><h3 id="封装的优点"><a class="markdownIt-Anchor" href="#封装的优点"></a> 封装的优点</h3><ol><li>将变化隔离</li><li>便于使用</li><li>提高安全性</li><li>提高重用性</li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>封装隐藏了类的内部实现机制，可以在不影响使用的情况下改变类的内部结构，同时也保护了数据。对外界而已它的内部细节是隐藏的，暴露给外界的只是它的访问方法。</p><h2 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h2><p>继承：<br>继承是使用已存在的类的定义作为基础建立新的类，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码，能够大大的提高开发的效率。</p><p>继承的特点：</p><ol><li>子类拥有父类非private的属性和方法。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。（重写）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">Father父类</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//父类的私有属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"李明"</span>;</span><br><span class="line">        <span class="keyword">this</span>.money = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Father <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Father <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是父亲"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父亲是我"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类Son继承父类Father</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">        <span class="comment">//子类自己的属性</span></span><br><span class="line">        <span class="keyword">public</span> String sonName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sonName = <span class="string">"李小明"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//子类重写父类的方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//子列拥有父类的非private属性</span></span><br><span class="line">            System.out.println(<span class="string">"我的父亲是："</span>+name+<span class="string">"他的存款我不知道..."</span>);</span><br><span class="line">            <span class="comment">//子类拥有父类非private的方法访问权限</span></span><br><span class="line">            System.out.println(<span class="string">"我的父亲是："</span>+getName()+<span class="string">"但他的存折显示存款为："</span>+getMoney());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//子类重载父类的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"我的名字是："</span>+sonName+<span class="string">"，年龄："</span>+age);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Son s = <span class="keyword">new</span> Son();</span><br><span class="line">        s.say();</span><br><span class="line">        s.speak(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我的父亲是：李明,他的存款我不知道...</span><br><span class="line">我的父亲是：李明,但他的存折显示存款为：1000</span><br><span class="line">我的名字是：李小明，年龄：20</span><br></pre></td></tr></table></figure><p>栗子分析：<br>父类Father有自己的公有属性<code>name</code>，私有属性<code>money</code>，同时对外提供了所有属性的公有方法（get/set）</p><p>子类Son继承父类Father后，拥有父类所有非private的属性和方法的访问权限，子类Son同时还可以有自己的属性（sonName），儿子知道父亲的名字却不知道父亲具体的存款，但是可以通过从父类继承的getMoney()获取存折中的存款信息。</p><p>子类可以重写父类的方法，Son类对父类的say方法在保持方法名、参数列表、返回值不变的情况下，对具体的实现进行重写。</p><h3 id="父类引用指向子类对象"><a class="markdownIt-Anchor" href="#父类引用指向子类对象"></a> 父类引用指向子类对象</h3><p>保持上边代码中Father、Son的内容不变，修改Test类的内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//父类引用指向子类对象</span></span><br><span class="line">        Father s = <span class="keyword">new</span> Son();</span><br><span class="line">        s.say();</span><br><span class="line">        s.speak(<span class="number">20</span>);<span class="comment">//此处会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先来分析下代码</p><p><code>Father s = new Son();</code>: 是向上转型即父类引用指向子类对象，它是对Father的对象的方法的扩充，即Father的对象可访问Son从Father中继承来的和Son复写Father的方法，其它的方法都不能访问，包括Father中的私有成员方法。</p><p><code>s.speak(20);</code>：此处报错，正是因为<code>speak(int age)</code>方法属于子类自己的方法而不是从父类继承而来，在向上转型过程中，父类对象s会遗弃子类中的该方法</p><h3 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h3><p>继承实际上是存在于面向对象程序中的两个类之间的关系。当一个类拥有另一个类的所有数据和操作时，就称这两个类之间具有继承关系！</p><h2 id="多态"><a class="markdownIt-Anchor" href="#多态"></a> 多态</h2><p>多态即同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果</p><p>多态分为编译时多态和运行时多态</p><ol><li><p>编译时多态也称为静态多态，主要是指方法的重载，它是根据参数列表的不同来区分不同的函数，通过编译之后会变成两个不同的函数，在运行时谈不上多态。</p></li><li><p>运行时多态称作动态多态，它是通过动态绑定来实现的，也就是我们所说的多态性，只有在运行期才知道是调用的那个类的方法。</p></li></ol><h3 id="多态实现形式"><a class="markdownIt-Anchor" href="#多态实现形式"></a> 多态实现形式</h3><p>基于继承的多态，基于接口的多态，下面分别给出栗子：</p><ol><li>基于继承的多态</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是父亲"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子类重写父类的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是儿子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Daughter</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子类重写父类的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是女儿"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Father f = <span class="keyword">new</span> Father();</span><br><span class="line">        Son s = <span class="keyword">new</span> Son();</span><br><span class="line">        Daughter d = <span class="keyword">new</span> Daughter();</span><br><span class="line">        f.say();</span><br><span class="line">        s.say();</span><br><span class="line">        d.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我是父亲</span><br><span class="line">我是儿子</span><br><span class="line">我是女儿</span><br></pre></td></tr></table></figure><p>通过基于继承来实现多态其实是子类对父类的方法进行了重写，以至于在程序执行时不同的子类对同一个方法会有不同的执行结果</p><p>2.基于接口的多态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗：汪汪汪"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫：喵喵喵"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">            Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">            dog.say();</span><br><span class="line">            cat.say();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">狗：汪汪汪</span><br><span class="line">猫：喵喵喵</span><br></pre></td></tr></table></figure><p>通过实现Animal接口，不同的对象会有不同的实现，在程序执行时同样也会有不一样的执行结果。</p><h3 id="多态迷魂阵"><a class="markdownIt-Anchor" href="#多态迷魂阵"></a> 多态迷魂阵</h3><p>继承和多态关系密接，多态是基于继承，继承和多态的理解每个人都各有不同，下面可以看下一个非常有趣的题目，被称为<code>多态迷魂阵</code></p><p>出自博客: <a href="https://blog.csdn.net/thinkGhoster/article/details/2307001" target="_blank" rel="noopener">https://blog.csdn.net/thinkGhoster/article/details/2307001</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">优先级由高到低依次为：<span class="keyword">this</span>.show(O)、<span class="keyword">super</span>.show(O)、<span class="keyword">this</span>.show((<span class="keyword">super</span>)O)、<span class="keyword">super</span>.show((<span class="keyword">super</span>)O)。</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"A and D"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"A and A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a1 = <span class="keyword">new</span> A();</span><br><span class="line">        A a2 = <span class="keyword">new</span> B();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        D d = <span class="keyword">new</span> D();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"1--"</span> + a1.show(b));</span><br><span class="line">        System.out.println(<span class="string">"2--"</span> + a1.show(c));</span><br><span class="line">        System.out.println(<span class="string">"3--"</span> + a1.show(d));</span><br><span class="line">        System.out.println(<span class="string">"4--"</span> + a2.show(b));</span><br><span class="line">        System.out.println(<span class="string">"5--"</span> + a2.show(c));</span><br><span class="line">        System.out.println(<span class="string">"6--"</span> + a2.show(d));</span><br><span class="line">        System.out.println(<span class="string">"7--"</span> + b.show(b));</span><br><span class="line">        System.out.println(<span class="string">"8--"</span> + b.show(c));</span><br><span class="line">        System.out.println(<span class="string">"9--"</span> + b.show(d));  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"1--"</span> + a1.show(b)); A and A</span><br><span class="line">        System.out.println(<span class="string">"2--"</span> + a1.show(c));A and A</span><br><span class="line">        System.out.println(<span class="string">"3--"</span> + a1.show(d));A and D</span><br><span class="line">        System.out.println(<span class="string">"4--"</span> + a2.show(b));B and A</span><br><span class="line">        System.out.println(<span class="string">"5--"</span> + a2.show(c));B and A</span><br><span class="line">        System.out.println(<span class="string">"6--"</span> + a2.show(d));A and D</span><br><span class="line">        System.out.println(<span class="string">"7--"</span> + b.show(b));B and B</span><br><span class="line">        System.out.println(<span class="string">"8--"</span> + b.show(c));B and A</span><br><span class="line">        System.out.println(<span class="string">"9--"</span> + b.show(d));      A and D</span><br></pre></td></tr></table></figure><h3 id="参考感谢"><a class="markdownIt-Anchor" href="#参考感谢"></a> 参考感谢</h3><p>面向对象的本质是什么?封装，继承，多态是到底用来做什么的：<a href="https://bbs.csdn.net/topics/50019051" target="_blank" rel="noopener">https://bbs.csdn.net/topics/50019051</a><br>多态迷魂阵：<a href="https://blog.csdn.net/thinkGhoster/article/details/2307001" target="_blank" rel="noopener">https://blog.csdn.net/thinkGhoster/article/details/2307001</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向对象的三大特征&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#面向对象的三大特征&quot;&gt;&lt;/a&gt; 面向对象的三大特征&lt;/h2&gt;
&lt;p&gt;继承、封装、多态&lt;/p&gt;
&lt;p&gt;接口（Interface）是用来定义行为的！&lt;/p&gt;
&lt;p&gt;抽象类（Abstract Class）是用来实现行为的！&lt;/p&gt;
&lt;p&gt;具体类（Class）是用来执行行为的！&lt;/p&gt;
&lt;p&gt;使用了对象就叫基于对象，基于对象的基础上增加了继承从而变成了面向对象。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.larscheng.com/categories/Java/"/>
    
    
      <category term="面向对象" scheme="https://www.larscheng.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="继承" scheme="https://www.larscheng.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="封装" scheme="https://www.larscheng.com/tags/%E5%B0%81%E8%A3%85/"/>
    
      <category term="多态" scheme="https://www.larscheng.com/tags/%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>DockerFile介绍</title>
    <link href="https://www.larscheng.com/dockerfile-info/"/>
    <id>https://www.larscheng.com/dockerfile-info/</id>
    <published>2019-04-30T03:26:41.000Z</published>
    <updated>2022-01-02T05:18:26.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>DockerFile文件通常用来构建自定义镜像，举个不恰当的栗子：</p><a id="more"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">比如果现在有一个纯净版的windows10镜像，使用这个镜像我安装了一个纯净版的win10到我的电脑，</span><br><span class="line">接着我安装了杀毒软件、IDEA、JDK、mysql、Redis、MongoDb、qq、微信等一些基础应用，</span><br><span class="line">后来我的系统损坏了（无法修复），需要重装系统，</span><br><span class="line">于是我又用纯净版的win10镜像重新装一次系统，</span><br><span class="line">然后又重新安装一次杀毒软件、IDEA、JDK、mysql、Redis、MongoDb、qq、微信...</span><br><span class="line"></span><br><span class="line">那我能不能自己创建一个自定义的系统镜像，就以win10纯净版为基础，</span><br><span class="line">预装上IDEA、JDK、Mysql、Redis这些应用，下次重装系统时，安装完系统这些软件就装好了，答案是当然可以啊。</span><br></pre></td></tr></table></figure><p>那么docker中同理，我想以jdk为基础镜像创建一个自定义镜像，把自定义创建过程写成一个脚本，通过这个脚本来一键生成自定义镜像，这个脚本就是<code>DockerFile</code>，调用这个脚本的Docker命令就是<code>Docker build</code></p><h3 id="dockerfile语法"><a class="markdownIt-Anchor" href="#dockerfile语法"></a> DockerFile语法</h3><h4 id="from-镜像名"><a class="markdownIt-Anchor" href="#from-镜像名"></a> FROM &lt;镜像名&gt;</h4><p>所有的 Dockerfile 都用该以 FROM 开头，FROM 命令指明 Dockerfile 所创建的镜像文件以什么镜像为基础，FROM 以后的所有指令都会在 FROM 的基础上进行创建镜像；可以在同一个 Dockerfile 中多次使用 FROM 命令用于创建多个镜像。</p><pre><code>FROM 10.200.0.230:5000/openjdk:8-jreFROM ubuntu</code></pre><h4 id="maintainer-你的名字邮箱"><a class="markdownIt-Anchor" href="#maintainer-你的名字邮箱"></a> MAINTAINER &lt;你的名字邮箱&gt;</h4><p>用于指定镜像创建者和联系方式。</p><pre><code>MAINTAINER zhengql zhengql@test.comMAINTAINER lky6666 lky6666@test.com</code></pre><h4 id="run-命令"><a class="markdownIt-Anchor" href="#run-命令"></a> RUN &lt;命令&gt;</h4><p>用于容器内部执行命令。每个 RUN 命令相当于在原有的镜像基础上添加了一个改动层，原有的镜像不会有变化。</p><pre><code>RUN echo zql666</code></pre><h4 id="add-原始位置目标位置"><a class="markdownIt-Anchor" href="#add-原始位置目标位置"></a> ADD &lt;原始位置&gt;&lt;目标位置&gt;</h4><p>用于从将原始位置的文件复制到目标位置文件：<code>原始位置</code> 是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件 url，<code>目标位置</code> 是容器中的绝对路径。</p><pre><code>COPY target/myDemo-1.0.0.jar /usr/src/</code></pre><h4 id="cmd"><a class="markdownIt-Anchor" href="#cmd"></a> CMD</h4><p>CMD 命令有三种格式：</p><ul><li>CMD [“executable”,“param1”,“param2”]：推荐使用的 exec 形式。</li><li>CMD [“param1”,“param2”]：无可执行程序形式</li><li>CMD command param1 param2：shell 形式。</li></ul><p>CMD 命令用于启动容器时默认执行的命令，CMD 命令可以包含可执行文件，也可以不包含可执行文件：不包含可执行文件的情况下就要用 ENTRYPOINT 指定一个，然后 CMD 命令的参数就会作为ENTRYPOINT的参数。</p><pre><code>一个 Dockerfile 中只能有一个CMD，如果有多个，则最后一个生效。  CMD 的 shell 形式默认调用 /bin/sh -c 执行命令。  CMD命令会被 Docker 命令行传入的参数覆盖：            docker run busybox /bin/echo Hello Docker 会把 CMD 里的命令覆盖。</code></pre><h4 id="entrypoint"><a class="markdownIt-Anchor" href="#entrypoint"></a> ENTRYPOINT</h4><p>ENTRYPOINT 命令的字面意思是进入点，而功能也恰如其意：他可以让你的容器表现得像一个可执行程序一样。</p><p>ENTRYPOINT 命令也有两种格式：</p><ul><li><p>ENTRYPOINT [“executable”, “param1”, “param2”] ：推荐使用的 exec 形式</p></li><li><p>ENTRYPOINT command param1 param2 ：shell 形式</p><p>一个 Dockerfile 中只能有一个 ENTRYPOINT，如果有多个，则最后一个生效。</p></li></ul><h4 id="expose"><a class="markdownIt-Anchor" href="#expose"></a> EXPOSE</h4><p>用来指定对外开放的端口。</p><pre><code>EXPOSE 80 3306</code></pre><h4 id="workdir"><a class="markdownIt-Anchor" href="#workdir"></a> WORKDIR</h4><p>WORKDIR /path/to/work/dir 配合 RUN，CMD，ENTRYPOINT 命令设置当前工作路径。<br>可以设置多次，如果是相对路径，则相对前一个 WORKDIR 命令。默认路径为/。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">WORKDIR /etc</span><br><span class="line">WORKDIR ..</span><br><span class="line">WORKDIR usr</span><br><span class="line">WORKDIR lib</span><br><span class="line">ENTRYPOINT pwd</span><br></pre></td></tr></table></figure><p>启动容器后得到/usr/lib</p><h4 id="user-uid用户名"><a class="markdownIt-Anchor" href="#user-uid用户名"></a> USER &lt;UID/用户名&gt;</h4><p>容器内指定 CMD RUN ENTRYPOINT 命令运行时的用户名或UID</p><h4 id="vloume"><a class="markdownIt-Anchor" href="#vloume"></a> VLOUME</h4><p>允许容器之间互相访问目录，VOLUME [’/data’] 允许其他容器访问当前容器的目录。</p><h4 id="env"><a class="markdownIt-Anchor" href="#env"></a> ENV</h4><p>指定环境变量，会被RUN指令使用，并在容器运行时保存</p><pre><code>ENV LC_ALL en_US.UTF-8</code></pre><h3 id="栗子分析"><a class="markdownIt-Anchor" href="#栗子分析"></a> 栗子分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#基于私有仓库中openjdk为基础镜像</span><br><span class="line">FROM 10.200.0.230:5000/openjdk:8-jre</span><br><span class="line"></span><br><span class="line">#设置工作路径</span><br><span class="line">WORKDIR /usr/src/</span><br><span class="line"></span><br><span class="line">#将jar包复制到指定目录</span><br><span class="line">COPY target/myDemo-1.0.0.jar /usr/src/</span><br><span class="line"></span><br><span class="line">#设置容器启动时要执行的命令</span><br><span class="line">CMD [&quot;java&quot;, &quot;-Duser.timezone=GMT+08&quot;, &quot;-jar&quot;, &quot;myDemo-1.0.0.jar&quot;, &quot;--spring.profiles.active=dev&quot;]</span><br><span class="line"></span><br><span class="line">#设置镜像所运行的时区</span><br><span class="line">RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line">#设置环境变量</span><br><span class="line">ENV LANG C.UTF-8</span><br><span class="line"></span><br><span class="line">#暴露端口</span><br><span class="line">EXPOSE 9041</span><br></pre></td></tr></table></figure><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><p><a href="https://docs.docker.com/v17.09/engine/reference/builder/#usage" target="_blank" rel="noopener">dockerFile官网手册</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;DockerFile文件通常用来构建自定义镜像，举个不恰当的栗子：&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.larscheng.com/categories/Docker/"/>
    
    
      <category term="DockerFile" scheme="https://www.larscheng.com/tags/DockerFile/"/>
    
  </entry>
  
  <entry>
    <title>Docker环境下安装Gitlab</title>
    <link href="https://www.larscheng.com/docker-gitlab/"/>
    <id>https://www.larscheng.com/docker-gitlab/</id>
    <published>2019-04-30T03:26:29.000Z</published>
    <updated>2022-01-02T05:18:26.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>在Docker中我们同样可以部署自己专属的代码仓库GitLab，下面简单介绍一下安装流程。</p><a id="more"></a><h3 id="安装前提"><a class="markdownIt-Anchor" href="#安装前提"></a> 安装前提</h3><ul><li>内存大于 2G 的linux虚拟机或者云服务器皆可（我用的虚拟机）</li><li>已安装Docker服务，若未安装可参考博客： <a href="https://blog.csdn.net/qq_33619378/article/details/89460088" target="_blank" rel="noopener">Centos7下两种方式安装Docker-CE</a></li></ul><p>说明：我的虚拟机ip：10.200.0.230，安装过程中涉及到的ip配置可替换成你的ip地址</p><h3 id="安装步骤"><a class="markdownIt-Anchor" href="#安装步骤"></a> 安装步骤</h3><h4 id="拉取gitlab镜像"><a class="markdownIt-Anchor" href="#拉取gitlab镜像"></a> 拉取GitLab镜像</h4><p>GitLab的镜像有很多，官方镜像：<code>gitlab/gitlab-ce</code>,网友汉化版镜像：<code>twang2218/gitlab-ce-zh</code>,此处以官方镜像进行安装介绍，下面拉取镜像到本地。</p><pre><code>docker pull gitlab/gitlab-ce</code></pre><h4 id="启动gitlab容器"><a class="markdownIt-Anchor" href="#启动gitlab容器"></a> 启动gitlab容器</h4><pre><code>docker run -d \-p 9443:443 \-p 9080:80 \-p 222:22 \--name gitlab \--restart always \--hostname 10.200.0.230 \-v /home/gitlab/config:/etc/gitlab  \-v /home/gitlab/logs:/var/log/gitlab  \-v /home/gitlab/data:/var/opt/gitlab  \gitlab/gitlab-ce</code></pre><p>说明：</p><ul><li>-d 后台启动，打印容器id</li><li>-p 9080:80 将宿主机的端口映射至容器暴露的端口</li><li>–name gitlab 设置容器名称为gitlab</li><li>–restart always 设置容器重启策略：在容器退出时总是重启容器</li><li>–hostname 10.200.0.230 设置容器主机名为10.200.0.230（<code>此处修改为你相应的虚拟机ip</code>）</li><li>-v 挂载目录至宿主机，方便备份</li></ul><p>出现如下图所示时表示启动成功</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029130731.png" alt=""></p><h4 id="配置gitlab服务器的访问地址"><a class="markdownIt-Anchor" href="#配置gitlab服务器的访问地址"></a> 配置gitlab服务器的访问地址</h4><p>按照上面的方式，让gitlab容器运行起来是没有问题的，但是当在gitlab上创建项目的时候，生成项目的URL访问地址是按容器的hostname来生成的，即容器的id。作为gitlab服务器，当然是需要一个固定的URL访问地址，于是需要配置gitlab.rb（宿主机上的路径为：/home/gitlab/config/gitlab.rb）配置文件里面的参数。执行如下命令：</p><pre><code>vi /home/gitlab/config/gitlab.rb</code></pre><p>可以看到，文件中的配置默认都是注释掉的，为修改方便，直接添加三条配置即可</p><pre><code># 配置http协议所使用的访问地址external_url 'http://10.200.0.230'# 配置ssh协议所使用的访问地址和端口gitlab_rails['gitlab_ssh_host'] = '10.200.0.230'gitlab_rails['gitlab_shell_ssh_port'] = 222</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029130753.png" alt=""></p><p>保存文件后重启容器</p><pre><code>docker restart gitlab</code></pre><p>gitlab启动较慢，可以查看容器的状态来判断是否启动成功</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029130811.png" alt=""></p><p>starting：表示正在启动中</p><p>healthy：表示已经启动成功</p><h4 id="登录gitlab的web界面"><a class="markdownIt-Anchor" href="#登录gitlab的web界面"></a> 登录gitlab的web界面</h4><p>浏览器访问 <a href="http://10.200.0.230:9080" target="_blank" rel="noopener">http://10.200.0.230:9080</a> ，可以看到第一次登录需要设置一个密码，账号默认是<code>root</code>,设置完后直接登录即可</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029130827.png" alt=""></p><p>登录成功后进入管理页面，我们通过<code>Create a project</code>创建一个项目先。</p><p>项目内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029130842.png" alt=""></p><p>创建成功，查看克隆地址，仔细观察http的url还是有问题<code>http://10.200.0.230/root/testdemo.git</code>，此处仍使用的默认80端口，所以还是得接着修改配置。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029130907.png" alt=""></p><p>修改gitlab.yml(位于宿主机/home/gitlab/data/gitlab-rails/etc/)</p><pre><code>vi /home/gitlab/data/gitlab-rails/etc/gitlab.yml</code></pre><p>修改<code>GitLab settings</code>下的port为<code>9080</code>,如下:</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029130957.png" alt=""></p><p>保存修改后重启容器，等待容器启动成功，进入web页面查看，可以看到此时克隆地址已经ok了</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131011.png" alt=""></p><h3 id="git拉取提交测试"><a class="markdownIt-Anchor" href="#git拉取提交测试"></a> Git拉取提交测试</h3><h4 id="通过http拉取项目"><a class="markdownIt-Anchor" href="#通过http拉取项目"></a> 通过Http拉取项目</h4><p>本地电脑上通过<code>git bash</code> 来拉取刚才创建的项目</p><pre><code>git clone http://10.200.0.230:9080/root/testdemo.git（此处可替换为你的url地址）</code></pre><p>如下图所示，即为克隆成功，首次拉取需要验证账号密码（gitlab的账号密码，root+设置的密码）<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131030.png" alt=""></p><h4 id="通过ssh拉取项目"><a class="markdownIt-Anchor" href="#通过ssh拉取项目"></a> 通过SSH拉取项目</h4><ol><li><p>生成私钥和公钥（若已有可跳过）</p><p>git bash中查看是否有已生成的私钥公钥<br>cd ~/.ssh</p></li></ol><p>如图所示表示已有私钥和公钥文件</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131045.png" alt=""></p><p>当然你可以重新生成，步骤如下：</p><p>设置Git的user name和email：</p><pre><code>git config --global user.name &quot;zhengql&quot;git config --global user.email &quot;zhengql@test.com&quot;</code></pre><p>生成私钥和公钥（需要你设置一个密码，此处建议不进行设置，直接三次回车）</p><pre><code>ssh-keygen -t rsa -C &quot;zhengql@test.com&quot;</code></pre><p>下图为生成步骤图解</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131119.png" alt=""></p><p>成功之后。查看生成的文件夹内有两个文件，查看公钥文件内容</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131135.png" alt=""></p><ol start="2"><li>在gitlab中配置公钥</li></ol><p>直接进入gitlab的web页面，复制我们刚刚生成的公钥内容添加至gitlab，操作如下</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131148.png" alt=""></p><ol start="3"><li><p>通过git bash 克隆项目至本地</p><p>git clone ssh://git@10.200.0.230:222/root/testdemo.git（此处可以替换为你的ssh地址）</p></li></ol><p>成功图示如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131204.png" alt=""></p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>至此，Docker中搭建GitLab流程和两种方式克隆项目的测试就介绍完毕了。</p><p>其实在搭建过程中有很多配置上的小坑，例如在修改80端口的映射后<code>external_url</code>是否需要加上端口<br>测试发现如果在<code>external_url</code>设置为<code>ip+端口</code>，会导致无法访问gitlab的web页面，所以目前我的解决方法是手动修改启动后生成的<code>gitlab.yml</code>中的配置，然后让容器重新读取配置，这样的弊端就是当通过<code>docker restart gitlab</code>重启容器后，修改的gitlab.yml会被覆盖。</p><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><p><a href="https://www.jianshu.com/p/d707f70c60d2" target="_blank" rel="noopener">利用GitLab Docker images安装GitLab（填坑）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;在Docker中我们同样可以部署自己专属的代码仓库GitLab，下面简单介绍一下安装流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.larscheng.com/categories/Docker/"/>
    
    
      <category term="GitLab安装" scheme="https://www.larscheng.com/tags/GitLab%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Docker中私有仓库的搭建流程</title>
    <link href="https://www.larscheng.com/docker-registry/"/>
    <id>https://www.larscheng.com/docker-registry/</id>
    <published>2019-04-25T09:24:40.000Z</published>
    <updated>2022-01-02T05:18:26.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>docker中的仓库就像是我们平时用的git一样，git用来存放管理项目代码，而docker仓库则是专门用来存放管理docker镜像，既然git有公有、私有仓库之分，docker仓库同样不例外，本文介绍如何在docker中安装你专属的私有仓库。</p><a id="more"></a><h3 id="环境说明"><a class="markdownIt-Anchor" href="#环境说明"></a> 环境说明</h3><ul><li>Centos7-64位虚拟机环境</li><li>Docker-CE-18.03.1-ce</li><li>虚拟机ip地址：10.200.0.204</li></ul><h3 id="私有仓库搭建"><a class="markdownIt-Anchor" href="#私有仓库搭建"></a> 私有仓库搭建</h3><p>拉取镜像</p><pre><code>docker pull registry</code></pre><p>启动仓库镜像</p><pre><code>docker run -d \--name myRegistry \-p 5000:5000 \-v /myRegistry:/var/lib/registry \registry </code></pre><p>上面的命令大意是指，通过<code>registry</code>镜像来启动一个容器，并命名为<code>myRegistry</code>，开放容器端口5000并映射到宿主机5000端口，将容器中的<code>/var/lib/registry</code>目录挂载至宿主机<code>/myRegistry</code>目录下</p><p>查看容器运行结果</p><pre><code>docker ps -a</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131312.png" alt=""></p><p>此时，我们已经在docker中搭建好了一个专属的私有仓库，仓库地址为<code>10.200.0.204:5000</code></p><p>下面测试提交一个镜像到私有仓库，此处以<code>hello-world</code>镜像为例</p><p>如果docker中暂无该镜像，可通过<code>docker pull hello-world</code>拉取<br>修改<code>hello-world</code>镜像的tag,标记一个修改后的版本</p><p><code>docker tag &lt;image_name/image_id&gt; &lt;registry_ip&gt;:5000/&lt;image_name&gt;:&lt;version&gt;</code></p><pre><code>docker tag hello-world 10.200.0.204:5000/hello-world:v1.0.1 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131335.png" alt=""></p><p>将tag为v1.0.1的hello-world镜像提交到私有仓库</p><p><code>docker push &lt;registry_ip&gt;:5000/&lt;image_name&gt;:&lt;version&gt;</code></p><pre><code>docker push 10.200.0.204:5000/hello-world:v1.0.1 </code></pre><p>此时回提交失败出现如下错误  <mark>http: server gave HTTP response to HTTPS client：</mark></p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131355.png" alt=""></p><p>出现这问题的原因是：Docker自从1.3.X之后docker registry交互默认使用的是HTTPS，但是我们搭建的私有仓库在进行交互时默认使用的是HTTP服务，</p><p>由于仓库与客户端的https问题，需要修改<code>/usr/lib/systemd/system/docker.service</code>文件，</p><pre><code>vi /usr/lib/systemd/system/docker.serviceExecStart=/usr/bin/dockerd --insecure-registry 192.168.211.153:5000</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131408.png" alt=""></p><p>重新启动docker</p><pre><code>systemctl daemon-reload systemctl restart docker</code></pre><p><mark>如果是虚拟机，需重启虚拟机。</mark></p><p>重新提交hello-world镜像到私有仓库</p><pre><code>docker push 10.200.0.204:5000/hello-world:v1.0.1 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131421.png" alt=""></p><p>查看仓库中的镜像列表</p><pre><code>curl -X GET http://10.200.0.204:5000/v2/_catalog</code></pre><p>查看仓库中某镜像的详细信息</p><pre><code>curl -X GET http://10.200.0.204:5000/v2/hello-world/tags/list</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131439.png" alt=""></p><p>从私有仓库pull镜像</p><p><code>docker pull &lt;registry_ip&gt;:5000/&lt;image_name&gt;:&lt;version&gt;</code></p><pre><code>docker pull 10.200.0.204:5000/hello-world:v1.0.1</code></pre><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>至此，docker中私有仓库的安装，和基本使用就介绍完了，不妨在自己的linux机器中实践一下吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;docker中的仓库就像是我们平时用的git一样，git用来存放管理项目代码，而docker仓库则是专门用来存放管理docker镜像，既然git有公有、私有仓库之分，docker仓库同样不例外，本文介绍如何在docker中安装你专属的私有仓库。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.larscheng.com/categories/Docker/"/>
    
    
      <category term="Docker仓库" scheme="https://www.larscheng.com/tags/Docker%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Centos7下两种方式安装Docker-CE</title>
    <link href="https://www.larscheng.com/docker-install/"/>
    <id>https://www.larscheng.com/docker-install/</id>
    <published>2019-04-25T09:22:52.000Z</published>
    <updated>2022-01-02T05:18:26.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>Docker 提供了两个版本：社区版 (CE) 和企业版 (EE)。</p><p>Docker 社区版 (CE) 是开发人员和小型团队开始使用 Docker 并尝试使用基于容器的应用的理想之选。</p><p>本文介绍下Docker 社区版 (CE) 在CentOS 7系统中的里两种安装方式</p><a id="more"></a> <h3 id="安装前提"><a class="markdownIt-Anchor" href="#安装前提"></a> 安装前提</h3><ul><li>64 位版本的 CentOS 7</li><li>CentOS 系统的内核版本高于 3.10（<code>uname -r</code>命令可查看系统内核版本）</li></ul><h3 id="安装-docker-ce"><a class="markdownIt-Anchor" href="#安装-docker-ce"></a> 安装 Docker CE</h3><ol><li>设置 Docker 的镜像仓库并从中进行安装</li><li>下载 RPM 软件包并手动进行安装（例如，在不能访问互联网的隔离系统中安装 Docker）</li></ol><h3 id="从镜像仓库安装"><a class="markdownIt-Anchor" href="#从镜像仓库安装"></a> 从镜像仓库安装</h3><h4 id="确保-yum-包更新到最新"><a class="markdownIt-Anchor" href="#确保-yum-包更新到最新"></a> 确保 yum 包更新到最新:</h4><pre><code>sudo yum update</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131537.png" alt=""></p><h4 id="安装一些必要的系统工具"><a class="markdownIt-Anchor" href="#安装一些必要的系统工具"></a> 安装一些必要的系统工具：</h4><ul><li>yum-utils 提供了 <code>yum-config-manager</code> 实用程序，用于设置yum源</li><li>devicemapper 存储驱动需要 <code>device-mapper-persistent-data</code> 和 <code>lvm2</code></li></ul><pre class="highlight"><code class="">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131550.png" alt=""></p><h4 id="设置镜像仓库"><a class="markdownIt-Anchor" href="#设置镜像仓库"></a> 设置镜像仓库：</h4><p>阿里云仓库地址（推荐）</p><pre><code>sudo yum-config-manager \ --add-repo \ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><p>官方仓库地址</p><pre><code>sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131608.png" alt=""></p><h4 id="更新-yum-软件包索引"><a class="markdownIt-Anchor" href="#更新-yum-软件包索引"></a> 更新 yum 软件包索引。</h4><pre><code>sudo yum makecache fast</code></pre><h4 id="查看仓库中所有docker版本"><a class="markdownIt-Anchor" href="#查看仓库中所有docker版本"></a> 查看仓库中所有docker版本</h4><pre><code>sudo yum list docker-ce --showduplicates | sort -r</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131625.png" alt=""></p><h4 id="安装-docker-ce-最新版本sudo-yum-install-docker-ce"><a class="markdownIt-Anchor" href="#安装-docker-ce-最新版本sudo-yum-install-docker-ce"></a> 安装 Docker CE 最新版本：<code>sudo yum install docker-ce</code></h4><pre><code>sudo yum install docker-ce</code></pre><h4 id="安装-docker-ce-指定版本sudo-yum-install-docker-ce-版本号"><a class="markdownIt-Anchor" href="#安装-docker-ce-指定版本sudo-yum-install-docker-ce-版本号"></a> 安装 Docker-ce 指定版本：<code>sudo yum install docker-ce-版本号</code></h4><pre><code>sudo yum -y install docker-ce-18.03.1.ce-1.el7.centos</code></pre><h4 id="启动-docker"><a class="markdownIt-Anchor" href="#启动-docker"></a> 启动 Docker</h4><pre><code>sudo systemctl start docker 启动sudo systemctl restart docker 重启sudo systemctl enable docker 加入开机启动</code></pre><h4 id="docker-版本信息查看"><a class="markdownIt-Anchor" href="#docker-版本信息查看"></a> Docker 版本信息查看</h4><pre><code>sudo docker version</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131640.png" alt=""></p><h4 id="测试运行-hello-world"><a class="markdownIt-Anchor" href="#测试运行-hello-world"></a> 测试运行 hello-world</h4><pre><code>sudo docker run hello-world</code></pre><p>docekr拉取<code>hello-world</code>镜像并启动，后打印出<code>Hello from Docker!</code><br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131658.png" alt=""></p><h4 id="卸载-docker-ce"><a class="markdownIt-Anchor" href="#卸载-docker-ce"></a> 卸载 Docker CE</h4><pre><code>sudo yum remove docker-ce</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131713.png" alt=""></p><h4 id="删除所有镜像-容器和存储卷"><a class="markdownIt-Anchor" href="#删除所有镜像-容器和存储卷"></a> 删除所有镜像、容器和存储卷</h4><pre><code>sudo rm -rf /var/lib/docker</code></pre><h3 id="rpm软件包进行安装"><a class="markdownIt-Anchor" href="#rpm软件包进行安装"></a> RPM软件包进行安装</h3><h4 id="wget安装"><a class="markdownIt-Anchor" href="#wget安装"></a> wget安装</h4><pre><code>yum -y install wget</code></pre><h4 id="下载rpm安装文件"><a class="markdownIt-Anchor" href="#下载rpm安装文件"></a> 下载rpm安装文件</h4><p>官方镜像（国内下载较慢）</p><pre><code>wget -P /tmp https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-18.03.1.ce-1.el7.centos.x86_64.rpm</code></pre><p>阿里云镜像（推荐）</p><pre><code>wget -P /tmp https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/docker-ce-18.03.1.ce-1.el7.centos.x86_64.rpm</code></pre><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131729.png" alt=""></p><h4 id="进入rpm文件目录安装docker"><a class="markdownIt-Anchor" href="#进入rpm文件目录安装docker"></a> 进入rpm文件目录，安装docker</h4><pre><code>cd tmp/yum install docker-ce-18.03.1.ce-1.el7.centos.x86_64.rpm</code></pre><h4 id="启动docker"><a class="markdownIt-Anchor" href="#启动docker"></a> 启动docker</h4><pre><code>sudo systemctl start docker 启动sudo systemctl restart docker 重启sudo systemctl enable docker 加入开机启动</code></pre><p>至此，docker-ce在Centos7下的安装介绍已经完成，目前docker不仅限于Linux系列，它还支持Windows、Mac以及AWS和Azure等平台的使用。更多的用法和介绍有兴趣的同学可以在官网进一步了解。</p><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><p><a href="https://docs.docker.com/install/" target="_blank" rel="noopener">Docker官网文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;Docker 提供了两个版本：社区版 (CE) 和企业版 (EE)。&lt;/p&gt;
&lt;p&gt;Docker 社区版 (CE) 是开发人员和小型团队开始使用 Docker 并尝试使用基于容器的应用的理想之选。&lt;/p&gt;
&lt;p&gt;本文介绍下Docker 社区版 (CE) 在CentOS 7系统中的里两种安装方式&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.larscheng.com/categories/Docker/"/>
    
    
      <category term="Docker安装" scheme="https://www.larscheng.com/tags/Docker%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Vert.x创建一个Http服务</title>
    <link href="https://www.larscheng.com/vertx-http/"/>
    <id>https://www.larscheng.com/vertx-http/</id>
    <published>2019-04-03T03:05:07.000Z</published>
    <updated>2022-01-02T05:18:26.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><pre><code>本文是我在学习Vert.x过程中的一些笔记，作为记录。因为是初学，对Vert.x的理解还不够透彻，如有错误之处我们可以在评论中一起讨论呦。</code></pre><h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3><ul><li>JDK8+</li><li>Maven</li><li>IDE</li><li>Vert.x 3.6.3</li></ul><p>本文将会建立一个基本的HTTP服务器，并监听指定端口，任何发往该服务器以及端口的请求，服务器会返回一个字符串。</p><p>该项目使用Maven构建，当然也可以选择Gradle（<a href="https://vertx.io/docs/vertx-core/java/" target="_blank" rel="noopener">参考vertx.io</a>）</p><a id="more"></a><h3 id="pomxml文件"><a class="markdownIt-Anchor" href="#pomxml文件"></a> pom.xml文件</h3><p>pom.xml中加入相关的依赖和插件，如下所示：<br>注：此处需要注意Vert.x的版本，以及<code>main.class</code>属性的值是对应着Verticle类的路径，maven打包后启动时会以次类为启动类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhengql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>vertx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for vertx<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">vertx.version</span>&gt;</span>3.6.3<span class="tag">&lt;/<span class="name">vertx.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main.class</span>&gt;</span>com.zhengql.vertx.Main<span class="tag">&lt;/<span class="name">main.class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vertx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;vertx.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vertx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx-unit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;vertx.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">Main-Class</span>&gt;</span>$&#123;main.class&#125;<span class="tag">&lt;/<span class="name">Main-Class</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">&lt;!--多语言支持在打包时需加入以下转换器--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.AppendingTransformer"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span>META-INF/services/io.vertx.core.spi.VerticleFactory<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactSet</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputFile</span>&gt;</span>$&#123;project.build.directory&#125;/$&#123;project.artifactId&#125;-$&#123;project.version&#125;-prod.jar<span class="tag">&lt;/<span class="name">outputFile</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建myfirstverticle类和main类"><a class="markdownIt-Anchor" href="#创建myfirstverticle类和main类"></a> 创建MyFirstVerticle类和Main类</h3><p>MyFirstVerticle.java，继承AbstractVerticle类，创建一个http服务端并监听指定端口，异步处理该端口的请求。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhengql.vertx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.vertx.core.AbstractVerticle;</span><br><span class="line"><span class="keyword">import</span> io.vertx.core.http.HttpServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:Verticle类，创建一个http服务端，监听10802端口，当有请求进来时返回结果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/13 10:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstVerticle</span> <span class="keyword">extends</span> <span class="title">AbstractVerticle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        vertx.createHttpServer().requestHandler(req-&gt;&#123;</span><br><span class="line">            req.response().end(<span class="string">"bababababalalallala"</span>);</span><br><span class="line">        &#125;).listen(<span class="number">10802</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Main.java代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.zhengql.vertx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import io.vertx.core.Vertx;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Vertx vertx = Vertx.vertx();</span><br><span class="line">        vertx.deployVerticle(MyFirstVerticle.class.getName(),r-&gt;&#123;</span><br><span class="line">            if (r.succeeded())&#123;</span><br><span class="line">                System.out.println(&quot;http server start succeeded.....&quot;);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                System.out.println(&quot;http server start error.....&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动vertx应用"><a class="markdownIt-Anchor" href="#启动vertx应用"></a> 启动Vert.x应用</h3><p>在IDE中启动，直接运行Main文件中的main方法，部署verticle，若启动成功，控制台中会打印<code>http server start succeeded.....</code></p><p>在浏览器中请求 <a href="http://localhost:10802/" target="_blank" rel="noopener">http://localhost:10802/</a> ，可以看到我们刚才创建的httpserver对发出的请求监听成功并作出了响应：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029131920.png" alt=""></p><p>当然，我们也可以通过打包的方式来部署，使用Maven的<code>mvn package</code>命令打包，随后在src的同级目录下会出现target目录会生成jar包，<code>java -jar vertx 0.0.1-SNAPSHOT-prod.jar</code>执行，控制台中同样会打印<code>http server start succeeded.....</code>,浏览器中请求 <a href="http://localhost:10802/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%88%91%E4%BB%AC%E7%BC%96%E5%86%99%E7%9A%84%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E3%80%82" target="_blank" rel="noopener">http://localhost:10802/，可以看到我们编写的请求响应。</a></p><p>通过jar包执行部署，是因为我们在pom中指定了程序的主类，也就是启动入口为Main.java,当我们java -jar的时候就启动了Main.java类，等同于在IDE中启动。</p><h3 id="launcher启动"><a class="markdownIt-Anchor" href="#launcher启动"></a> Launcher启动</h3><p>另一种启动方式，也是官方推荐的启动方式<br>在pom.xml中加入main.verticle属性，并将该属性值设置为maven-shade-plugin插件的manifestEntries的Main-Verticle对应的值，最后修改main.class为io.vertx.core.Launcher，修改后的pom.xml如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhengql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>vertx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for vertx<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">vertx.version</span>&gt;</span>3.6.3<span class="tag">&lt;/<span class="name">vertx.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此处修改--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main.class</span>&gt;</span>io.vertx.core.Launcher<span class="tag">&lt;/<span class="name">main.class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此处修改--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main.verticle</span>&gt;</span>com.zhengql.vertx.MainVerticle<span class="tag">&lt;/<span class="name">main.verticle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vertx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;vertx.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vertx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx-unit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;vertx.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">Main-Class</span>&gt;</span>$&#123;main.class&#125;<span class="tag">&lt;/<span class="name">Main-Class</span>&gt;</span></span><br><span class="line">                                        <span class="comment">&lt;!--此处修改--&gt;</span> <span class="tag">&lt;<span class="name">Main-Verticle</span>&gt;</span>$&#123;main.verticle&#125;<span class="tag">&lt;/<span class="name">Main-Verticle</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">&lt;!--多语言支持在打包时需加入以下转换器--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.AppendingTransformer"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span>META-INF/services/io.vertx.core.spi.VerticleFactory<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactSet</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputFile</span>&gt;</span>$&#123;project.build.directory&#125;/$&#123;project.artifactId&#125;-$&#123;project.version&#125;-prod.jar<span class="tag">&lt;/<span class="name">outputFile</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，我们还缺少main-verticle属性中的MainVerticle.java，创建该类，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.zhengql.vertx;</span><br><span class="line"></span><br><span class="line">import io.vertx.core.AbstractVerticle;</span><br><span class="line"></span><br><span class="line">public class MainVerticle extends AbstractVerticle &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        vertx.deployVerticle(MyFirstVerticle.class.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新打包后执行，控制台中同样会打印<code>http server start succeeded.....</code>,浏览器中请求 <a href="http://localhost:10802/" target="_blank" rel="noopener">http://localhost:10802/</a> ，可以看到我们编写的请求响应。</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>如此，便创建一个http服务端，是不是很方便呢，首先最大的感觉就是Vert.x应用他的启动没有依赖任何容器，直接启动，完全是运行在jvm上，没有像springmvc那样，需要依靠tomcat或者其他容器，而且vertx是<code>异步编程</code>，HTTP服务端创建逻辑，就是一个<code>观察者模式</code>，创建http服务端，异步处理该端口中的请求。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;本文是我在学习Vert.x过程中的一些笔记，作为记录。
因为是初学，对Vert.x的理解还不够透彻，如有错误之处我们可以在评论中一起讨论呦。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;环境准备&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#环境准备&quot;&gt;&lt;/a&gt; 环境准备&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JDK8+&lt;/li&gt;
&lt;li&gt;Maven&lt;/li&gt;
&lt;li&gt;IDE&lt;/li&gt;
&lt;li&gt;Vert.x 3.6.3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将会建立一个基本的HTTP服务器，并监听指定端口，任何发往该服务器以及端口的请求，服务器会返回一个字符串。&lt;/p&gt;
&lt;p&gt;该项目使用Maven构建，当然也可以选择Gradle（&lt;a href=&quot;https://vertx.io/docs/vertx-core/java/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考vertx.io&lt;/a&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="Vert.x" scheme="https://www.larscheng.com/categories/Vert-x/"/>
    
    
      <category term="Vert.x" scheme="https://www.larscheng.com/tags/Vert-x/"/>
    
  </entry>
  
  <entry>
    <title>Vert.x创建TCP服务端及客户端</title>
    <link href="https://www.larscheng.com/vertx-tcp/"/>
    <id>https://www.larscheng.com/vertx-tcp/</id>
    <published>2019-04-02T11:34:39.000Z</published>
    <updated>2022-01-02T05:18:26.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><pre><code>本文是我在学习Vert.x过程中的一些笔记，作为记录。因为是初学，对Vert.x的理解还不够透彻，如有错误之处我们可以在评论中一起讨论呦。</code></pre><h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3><ul><li>JDK8+</li><li>Maven</li><li>IDE</li><li>Vert.x 3.6.3</li></ul><p>我们通常用到的最多的应该是Http服务，创建一个Http服务端似乎web开发中常有的事情。但是如果有一个需要Tcp服务的场景，这时候我们会想到Socket编程，基于Socket实现一个Tcp服务的过程是及其考验编程水平的，需要手动处理网络和线程问题。于是乎我们又想到了Netty，用Netty来实现Tcp服务似乎也不错啊，他简化了传统的Nio操作，但是如果没有接触过Netty则需要从头学习，学习成本较高。其实我们可以使用Vertx来创建Tcp服务，因为Vert.x本来就是基于Netty的，而且通过Vertx创建Tcp服务非常方便。</p><a id="more"></a><h3 id="vertx中创建tcp服务端"><a class="markdownIt-Anchor" href="#vertx中创建tcp服务端"></a> vertx中创建Tcp服务端</h3><p>默认的创建方式如下：</p><pre><code>NetServer netServer = vertx.createNetServer();</code></pre><p>默认创建的Tcp服务端实际上是初始化了一个默认的NetServerOptions实例，Tcp服务端会随机选择一个本地未被占用的端口进行监听</p><p>当然我们也可以通过配置自定义属性来创建：</p><pre><code>NetServer netServer = vertx.createNetServer(new NetServerOptions().setPort(9981));//可以获取监听的端口netServer.actualPort();</code></pre><p>当创建Tcp服务端监听某一端口时我们注册一个处理器，当创建成功并开始监听时触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//监听指定主机和端口,并且在监听开始时触发通知</span><br><span class="line">vertx.createNetServer().listen(9983, &quot;localhost&quot;, res -&gt; &#123;</span><br><span class="line">    if (res.succeeded()) &#123;</span><br><span class="line">        System.out.println(&quot;Tcp服务端启动成功&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        System.err.println(&quot;Tcp服务端启动失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当服务端创建成功后，有客户端请求进来，会触发相应的处理器，可以通过<code>connectHandler</code>方法绑定处理器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//绑定处理器，当有请求进入时触发</span><br><span class="line">NetServer netServer = vertx.createNetServer().connectHandler(netSocket -&gt; &#123;</span><br><span class="line">    //得到NetSocket实例</span><br><span class="line">    netSocket.handler(buffer -&gt; &#123;</span><br><span class="line">        //读取数据</span><br><span class="line">        System.out.println(&quot;读取到数据:&quot; + buffer.toString() + &quot; 长度为: &quot; + buffer.length());</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    netSocket.write(Buffer.buffer(&quot;数据已接收......&quot;), ar -&gt; &#123;</span><br><span class="line">        if (ar.succeeded()) &#123;</span><br><span class="line">            System.out.println(&quot;写入数据成功!&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.err.println(&quot;写入数据失败!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    netSocket.closeHandler(ar -&gt; &#123;</span><br><span class="line">        System.out.println(&quot;客户端退出连接&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).listen(9984, &quot;localhost&quot;);</span><br></pre></td></tr></table></figure><h3 id="tcp客户端创建"><a class="markdownIt-Anchor" href="#tcp客户端创建"></a> Tcp客户端创建</h3><p>客户端的创建方式与服务端类似，也有默认的创建方法和自定义的属性配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//默认客户端创建</span><br><span class="line">NetClient netClient1 = vertx.createNetClient();</span><br><span class="line"></span><br><span class="line">//自定义属性创建</span><br><span class="line">NetClient netClient2 = vertx.createNetClient(new NetClientOptions().setConnectTimeout(10000));</span><br></pre></td></tr></table></figure><p>创建Tcp客户端需要使用<code>connect</code>方法连接到服务端后，才可以进行数据的收发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NetClient client = vertx.createNetClient(new NetClientOptions().setConnectTimeout(10000));</span><br><span class="line">client.connect(9984, &quot;localhost&quot;, res -&gt; &#123;</span><br><span class="line">  if (res.succeeded()) &#123;</span><br><span class="line">    System.out.println(&quot;连接成功!&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    System.out.println(&quot;连接失败: &quot; + res.cause().getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="关闭tcp连接"><a class="markdownIt-Anchor" href="#关闭tcp连接"></a> 关闭Tcp连接</h3><p>当请求结束时，可以调用close关闭服务端或者客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//1.直接关闭</span><br><span class="line">netServer.close();</span><br><span class="line"></span><br><span class="line">//2.关闭结果打印通知</span><br><span class="line">netServer.close(res -&gt; &#123;</span><br><span class="line">    if (res.succeeded()) &#123;</span><br><span class="line">        System.out.println(&quot;关闭成功!&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        System.err.println(&quot;关闭失败!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="项目创建"><a class="markdownIt-Anchor" href="#项目创建"></a> 项目创建</h3><p>在IDEA中创建一个Maven工程，pom文件引入Vertx-core的依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;io.vertx&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;vertx-core&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;3.6.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>创建NetServerDemo.java文件,创建并部署Tcp服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.zhengql.www;</span><br><span class="line"></span><br><span class="line">import io.vertx.core.AbstractVerticle;</span><br><span class="line">import io.vertx.core.Vertx;</span><br><span class="line">import io.vertx.core.buffer.Buffer;</span><br><span class="line">import io.vertx.core.net.NetServer;</span><br><span class="line">import io.vertx.core.net.NetServerOptions;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述: tcp</span><br><span class="line"> *</span><br><span class="line"> * @author zhengql</span><br><span class="line"> * @date 2019/4/2 14:57</span><br><span class="line"> */</span><br><span class="line">public class NetServerDemo extends AbstractVerticle &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Vertx.vertx().deployVerticle(new NetServerDemo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void start() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //绑定处理器，当有请求进入时触发</span><br><span class="line">        NetServer netServer = vertx.createNetServer().connectHandler(netSocket -&gt; &#123;</span><br><span class="line">            //得到NetSocket实例</span><br><span class="line">            netSocket.handler(buffer -&gt; &#123;</span><br><span class="line">                //读取数据</span><br><span class="line">                System.out.println(&quot;读取到数据:&quot; + buffer.toString() + &quot; 长度为: &quot; + buffer.length());</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            netSocket.write(Buffer.buffer(&quot;数据已接收......&quot;), ar -&gt; &#123;</span><br><span class="line">                if (ar.succeeded()) &#123;</span><br><span class="line">                    System.out.println(&quot;写入数据成功!&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.err.println(&quot;写入数据失败!&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            netSocket.closeHandler(ar -&gt; &#123;</span><br><span class="line">                System.out.println(&quot;客户端退出连接&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;).listen(9984, &quot;localhost&quot;, res -&gt; &#123;</span><br><span class="line">            if (res.succeeded()) &#123;</span><br><span class="line">                System.out.println(&quot;Tcp服务端启动成功&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.err.println(&quot;Tcp服务端启动失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建NetClientDemo.java文件，创建并部署Tcp客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.zhengql.www;</span><br><span class="line"></span><br><span class="line">import io.vertx.core.AbstractVerticle;</span><br><span class="line">import io.vertx.core.Vertx;</span><br><span class="line">import io.vertx.core.buffer.Buffer;</span><br><span class="line">import io.vertx.core.net.NetClient;</span><br><span class="line">import io.vertx.core.net.NetClientOptions;</span><br><span class="line">import io.vertx.core.net.NetSocket;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述:</span><br><span class="line"> * Tcp客户端</span><br><span class="line"> *</span><br><span class="line"> * @author zhengql</span><br><span class="line"> * @date 2019/4/2 15:39</span><br><span class="line"> */</span><br><span class="line">public class NetClientDemo extends AbstractVerticle &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Vertx.vertx().deployVerticle(new NetClientDemo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void start() throws Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //创建连接到指定主机和端口的客户端，并绑定创建结果的处理器</span><br><span class="line">        NetClient netClient3 = vertx.createNetClient(new NetClientOptions().setConnectTimeout(10000))</span><br><span class="line">                .connect(9984, &quot;localhost&quot;, res -&gt; &#123;</span><br><span class="line">                    if (res.succeeded()) &#123;</span><br><span class="line">                        System.out.println(&quot;连接成功!&quot;);</span><br><span class="line">                        NetSocket socket = res.result();</span><br><span class="line">                        //向服务器写入数据</span><br><span class="line">                        socket.write(Buffer.buffer(&quot;发送数据......&quot;), ar -&gt; &#123;</span><br><span class="line">                            if (ar.succeeded()) &#123;</span><br><span class="line">                                System.out.println(&quot;数据发送成功!&quot;);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                System.err.println(&quot;数据发送失败!&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                        //读取服务端返回的数据</span><br><span class="line">                        socket.handler(buffer -&gt; &#123;</span><br><span class="line">                            System.out.println(&quot;读取到数据:&quot; + buffer.toString() + &quot; 长度为: &quot; + buffer.length());</span><br><span class="line">                        &#125;);</span><br><span class="line">                        socket.closeHandler(ar -&gt; &#123;</span><br><span class="line">                            System.out.println(&quot;客户端断开连接&quot;);</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        System.out.println(&quot;连接失败!: &quot; + res.cause().getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，服务端和客户端的代码已经编写完成</p><p>启动NetServerDemo，可以看到控制台中的日志打印如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132012.png" alt=""></p><p>在启动NetClientDemo，控制台打印如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132023.png" alt=""></p><p>客户端启动成功后，此时服务端的日志如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132038.png" alt=""></p><p>上面的代码创建了一个Tcp服务端和Tcp客户端，服务端监听本地的<code>9984</code>端口，客户端与本地的9984端口的Tcp服务端建立连接后发送数据，<br>当接收到客户端的请求时打印其传来的消息<code>“发送数据......”</code>，并回复<code>“数据已接收......”</code></p><p>至此，一个基于Vert.x的Tcp服务端、客户端创建demo就完成了，是不是比Socket编程要简单很多呢？</p><h3 id="资料参考"><a class="markdownIt-Anchor" href="#资料参考"></a> 资料参考</h3><p><a href="https://vertx.io/docs/" target="_blank" rel="noopener">https://vertx.io/docs/</a></p><p><a href="https://vertx.io/docs/vertx-core/java/" target="_blank" rel="noopener">https://vertx.io/docs/vertx-core/java/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;本文是我在学习Vert.x过程中的一些笔记，作为记录。
因为是初学，对Vert.x的理解还不够透彻，如有错误之处我们可以在评论中一起讨论呦。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;环境准备&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#环境准备&quot;&gt;&lt;/a&gt; 环境准备&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JDK8+&lt;/li&gt;
&lt;li&gt;Maven&lt;/li&gt;
&lt;li&gt;IDE&lt;/li&gt;
&lt;li&gt;Vert.x 3.6.3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们通常用到的最多的应该是Http服务，创建一个Http服务端似乎web开发中常有的事情。但是如果有一个需要Tcp服务的场景，这时候我们会想到Socket编程，基于Socket实现一个Tcp服务的过程是及其考验编程水平的，需要手动处理网络和线程问题。于是乎我们又想到了Netty，用Netty来实现Tcp服务似乎也不错啊，他简化了传统的Nio操作，但是如果没有接触过Netty则需要从头学习，学习成本较高。其实我们可以使用Vertx来创建Tcp服务，因为Vert.x本来就是基于Netty的，而且通过Vertx创建Tcp服务非常方便。&lt;/p&gt;
    
    </summary>
    
      <category term="Vert.x" scheme="https://www.larscheng.com/categories/Vert-x/"/>
    
    
      <category term="Vert.x" scheme="https://www.larscheng.com/tags/Vert-x/"/>
    
  </entry>
  
  <entry>
    <title>Vert.x Core（二）- Event Bus（事件总线）</title>
    <link href="https://www.larscheng.com/vertx-eventbus/"/>
    <id>https://www.larscheng.com/vertx-eventbus/</id>
    <published>2019-04-02T06:28:22.000Z</published>
    <updated>2022-01-02T05:18:26.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><pre><code>本文是我在学习Vert.x过程中的一些笔记，作为记录。因为是初学，对Vert.x的理解还不够透彻，如有错误之处我们可以在评论中一起讨论呦。</code></pre><h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3><pre><code>The event bus is the nervous system of Vert.x</code></pre><p>EnventBus是Vert.x的神经系统，EventBus为Verticle之间提供通讯和信息传递的基础。这种方式提供了一个简单但有效的解耦。</p><a id="more"></a> <p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/vertx/20191029130558.png" alt=""></p><p>如上图，EventBus为多个Verticle实例传递消息，而在Vertx中每一个Verticle都对应着一个或者多个处理器（handler），我们将部署两个Verticle(H1和H2)来处理HTTP请求，一个Verticle（D1）封装数据库持久化。由此产生的Verticle将没有相互的直接引用，它们将只商定事件总线中的目的地名称以及消息格式。假设H1接收到查询请求，H1会将查询的消息发送到EventBus上，此时注册在该地址上的D1接收到了消息，执行查询任务将返回结果以JSON形式原路返回，这整个过程都是异步进行。</p><p>发送到事件总线的消息将解码为JSON。虽然Vert.x的事件总线支持灵活的串行化方案用于高要求或者高度定制的上下文，但是使用JSON数据通常是明智的选择。使用JSON的另一个优势是它是一种语言无关的格式。由于Vert.x是支持多语言的，对于使用不同语言编写的Verticle之间的通讯，JSON是非常理想的。</p><h3 id="地址"><a class="markdownIt-Anchor" href="#地址"></a> 地址</h3><p>Verticle之间的消息被EventBus发送到一个约定的<strong>地址（Address）</strong>，消息的提供者和消费者通过地址来实现消息的生产和消费。</p><h3 id="处理器"><a class="markdownIt-Anchor" href="#处理器"></a> 处理器</h3><p>这里的消费者自然就是不同的处理器Handler，处理器之间可以根据不通的消息通信方式实现不同的功能。</p><p>EventBus事件总线中支持的消息通信方式有如下三种：、</p><ul><li>点对点 ： 消息指发送给一个监听这个地址上的 消费者(consumer) 。</li><li>发布/订阅 ： 消息会被所有监听在这个地址上的所有 消费者(consumer) 收到。</li><li>请求/应答 ： 消息回发送给一个 消费者(consumer) , 它 应答 这个消息并且把另外一个 消息 发送回初始的发送者。</li></ul><h3 id="消息类型"><a class="markdownIt-Anchor" href="#消息类型"></a> 消息类型</h3><p>通常的消息格式无非字符串、整数、Json等，但因为Vert.x多语言的特点，JSON则是他最常用的消息类型，JSON在Vertx支持的所有语言都是非常容易创建、读取和解析的，因此它已经成为了Vert.x中的通用语。这就给程序员提供很大的发挥空间，你可以自定义一个专属的消息传递对象，通过JSON形式进行传递。</p><h3 id="eventbus的使用"><a class="markdownIt-Anchor" href="#eventbus的使用"></a> EventBus的使用</h3><p>1.获取EventBus对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus eventBus = vertx.eventBus();</span><br></pre></td></tr></table></figure><p>2.EventBus对外提供的api</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">@Fluent</span><br><span class="line">    EventBus send(String var1, Object var2);</span><br><span class="line"></span><br><span class="line">    @Fluent</span><br><span class="line">    &lt;T&gt; EventBus send(String var1, Object var2, Handler&lt;AsyncResult&lt;Message&lt;T&gt;&gt;&gt; var3);</span><br><span class="line"></span><br><span class="line">    @Fluent</span><br><span class="line">    EventBus send(String var1, Object var2, DeliveryOptions var3);</span><br><span class="line"></span><br><span class="line">    @Fluent</span><br><span class="line">    &lt;T&gt; EventBus send(String var1, Object var2, DeliveryOptions var3, Handler&lt;AsyncResult&lt;Message&lt;T&gt;&gt;&gt; var4);</span><br><span class="line"></span><br><span class="line">    @Fluent</span><br><span class="line">    EventBus publish(String var1, Object var2);</span><br><span class="line"></span><br><span class="line">    @Fluent</span><br><span class="line">    EventBus publish(String var1, Object var2, DeliveryOptions var3);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; MessageConsumer&lt;T&gt; consumer(String var1);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; MessageConsumer&lt;T&gt; consumer(String var1, Handler&lt;Message&lt;T&gt;&gt; var2);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; MessageConsumer&lt;T&gt; localConsumer(String var1);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; MessageConsumer&lt;T&gt; localConsumer(String var1, Handler&lt;Message&lt;T&gt;&gt; var2);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; MessageProducer&lt;T&gt; sender(String var1);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; MessageProducer&lt;T&gt; sender(String var1, DeliveryOptions var2);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; MessageProducer&lt;T&gt; publisher(String var1);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; MessageProducer&lt;T&gt; publisher(String var1, DeliveryOptions var2);</span><br><span class="line"></span><br><span class="line">    @GenIgnore(&#123;&quot;permitted-type&quot;&#125;)</span><br><span class="line">    EventBus registerCodec(MessageCodec var1);</span><br><span class="line"></span><br><span class="line">    @GenIgnore(&#123;&quot;permitted-type&quot;&#125;)</span><br><span class="line">    EventBus unregisterCodec(String var1);</span><br><span class="line"></span><br><span class="line">    @GenIgnore</span><br><span class="line">    &lt;T&gt; EventBus registerDefaultCodec(Class&lt;T&gt; var1, MessageCodec&lt;T, ?&gt; var2);</span><br><span class="line"></span><br><span class="line">    @GenIgnore</span><br><span class="line">    EventBus unregisterDefaultCodec(Class var1);</span><br><span class="line"></span><br><span class="line">    @GenIgnore</span><br><span class="line">    void start(Handler&lt;AsyncResult&lt;Void&gt;&gt; var1);</span><br><span class="line"></span><br><span class="line">    @GenIgnore</span><br><span class="line">    void close(Handler&lt;AsyncResult&lt;Void&gt;&gt; var1);</span><br><span class="line"></span><br><span class="line">    @Fluent</span><br><span class="line">    &lt;T&gt; EventBus addOutboundInterceptor(Handler&lt;DeliveryContext&lt;T&gt;&gt; var1);</span><br><span class="line"></span><br><span class="line">    @Fluent</span><br><span class="line">    &lt;T&gt; EventBus removeOutboundInterceptor(Handler&lt;DeliveryContext&lt;T&gt;&gt; var1);</span><br><span class="line"></span><br><span class="line">    @Fluent</span><br><span class="line">    &lt;T&gt; EventBus addInboundInterceptor(Handler&lt;DeliveryContext&lt;T&gt;&gt; var1);</span><br><span class="line"></span><br><span class="line">    @Fluent</span><br><span class="line">    &lt;T&gt; EventBus removeInboundInterceptor(Handler&lt;DeliveryContext&lt;T&gt;&gt; var1);</span><br></pre></td></tr></table></figure><p>可以看到提供了很多的接口，我们大致对他们的功能进行分类如下：</p><p><strong>发布消息publish</strong></p><p>发布消息到指定地址可以使用<code>publish</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Fluent</span><br><span class="line">EventBus publish(String var1, Object var2);</span><br><span class="line">@Fluent</span><br><span class="line">EventBus publish(String var1, Object var2, DeliveryOptions var3);</span><br></pre></td></tr></table></figure><pre><code>eventBus.publish(&quot;hello.world&quot;, &quot;发布一条消息....&quot;);</code></pre><p>通过publish发布的消息将会传递给所有在地址 hello.world 上注册过的处理器。这就涉及到EventBus的发布订阅</p><p>在发布的时候我们还有一个参数<code>DeliveryOptions</code>,其实可以理解为获取Vertx对象时的<code>Vertxoptions</code>一样，可以额外添加一些配置,进行消息的发布。</p><p><strong>发送消息send</strong></p><p>发送消息到指定地址可以使用<code>send</code>方法，他与发布消息最大的区别就是，send方法只会发送消息到指定地址上的一个处理器，正好对应点对点的信息通信方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Fluent</span><br><span class="line">EventBus send(String var1, Object var2);</span><br><span class="line">@Fluent</span><br><span class="line">&lt;T&gt; EventBus send(String var1, Object var2, Handler&lt;AsyncResult&lt;Message&lt;T&gt;&gt;&gt; var3);</span><br><span class="line">@Fluent</span><br><span class="line">EventBus send(String var1, Object var2, DeliveryOptions var3);</span><br><span class="line">@Fluent</span><br><span class="line">&lt;T&gt; EventBus send(String var1, Object var2, DeliveryOptions var3, Handler&lt;AsyncResult&lt;Message&lt;T&gt;&gt;&gt; var4);</span><br></pre></td></tr></table></figure><pre><code>eventBus.send(&quot;hello.world&quot;, &quot;发送一条消息....&quot;);</code></pre><p>除了单纯的发送消息外，EventBus还提供了用户自定义属性配置（DeliveryOptions），进行消息发送的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DeliveryOptions options = new DeliveryOptions();</span><br><span class="line">options.addHeader(&quot;token&quot;, &quot;aaaaaa&quot;);</span><br><span class="line">eventBus.send(&quot;hello.world&quot;, &quot;发送一条消息....&quot;, options);</span><br></pre></td></tr></table></figure><p>当我们发送一条消息到某一地址后，消息被某一处理器接收并处理，这时我们需要知道消息是何时被消费的，我们可以通过send方法的另一种方式配合consumer方法来实现请求应答的消息通信方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">eventBus.send(&quot;hello.world&quot;, &quot;发送一条消息....&quot;, ar -&gt; &#123;</span><br><span class="line">  if (ar.succeeded()) &#123;</span><br><span class="line">    System.out.println(&quot;结果: &quot; + ar.result().body());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">MessageConsumer&lt;String&gt; consumer = eventBus.consumer(&quot;hello.world&quot;);</span><br><span class="line">consumer.handler(message -&gt; &#123;</span><br><span class="line">  System.out.println(&quot;处理器收到一条消息: &quot; + message.body());</span><br><span class="line">  message.reply(&quot;消费成功!&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注册处理器consumer</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; MessageConsumer&lt;T&gt; consumer(String var1);</span><br><span class="line">&lt;T&gt; MessageConsumer&lt;T&gt; consumer(String var1, Handler&lt;Message&lt;T&gt;&gt; var2);</span><br></pre></td></tr></table></figure><p>consumer方法可以将处理器注册到指定的地址，第一个参数<code>String var1</code>就是address，EventBus提供了两个注册处理器的方法，一种是直接在参数中指定，另一种是通过comsumer方法返回的<code>MessageConsumer</code>对象进行注册设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">EventBus eb = vertx.eventBus();</span><br><span class="line"></span><br><span class="line">eb.consumer(&quot;hello.world&quot;, message -&gt; &#123;</span><br><span class="line">  System.out.println(&quot;处理器收到一条消息: &quot; + message.body());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">MessageConsumer&lt;String&gt; msgcomsumer = eb.consumer(&quot;hello.world&quot;);</span><br><span class="line">msgcomsumer.handler(message -&gt; &#123;</span><br><span class="line">  System.out.println(&quot;处理器收到一条消息: &quot; + message.body());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你想知道他什么时候注册成功，那么可以为msgcomsumer绑定一个完成时的处理器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msgcomsumer.completionHandler(res -&gt; &#123;</span><br><span class="line">  if (res.succeeded()) &#123;</span><br><span class="line">    System.out.println(&quot;处理器注册成功&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    System.out.println(&quot;处理器注册失败&quot;);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;本文是我在学习Vert.x过程中的一些笔记，作为记录。
因为是初学，对Vert.x的理解还不够透彻，如有错误之处我们可以在评论中一起讨论呦。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;The event bus is the nervous system of Vert.x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EnventBus是Vert.x的神经系统，EventBus为Verticle之间提供通讯和信息传递的基础。这种方式提供了一个简单但有效的解耦。&lt;/p&gt;
    
    </summary>
    
      <category term="Vert.x" scheme="https://www.larscheng.com/categories/Vert-x/"/>
    
    
      <category term="Vert.x" scheme="https://www.larscheng.com/tags/Vert-x/"/>
    
  </entry>
  
  <entry>
    <title>Vert.x-Core（一）- 基础篇</title>
    <link href="https://www.larscheng.com/vertxbase/"/>
    <id>https://www.larscheng.com/vertxbase/</id>
    <published>2019-04-01T06:17:40.000Z</published>
    <updated>2022-01-02T05:18:26.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><pre><code>本文是我在学习Vert.x过程中的一些笔记，作为记录。因为是初学，对Vert.x的理解还不够透彻，如有错误之处我们可以在评论中一起讨论呦。</code></pre><h3 id="vertx-core模块是vertx的根基"><a class="markdownIt-Anchor" href="#vertx-core模块是vertx的根基"></a> Vert.x core模块是vertx的根基</h3><p>是基于netty的一个工具包，提供tcp、http、websocket、dns、eventbus等基础功能封装</p><a id="more"></a><h3 id="vertx对象"><a class="markdownIt-Anchor" href="#vertx对象"></a> Vertx对象</h3><p>Vertx对象是Vert.x的控制中心，是做一切事情的基础</p><p>直接创建该对象：<code>Vertx vertx = Vertx.vertx();</code></p><p>或者在创建时使用相关配置属性：<code>Vertx vertx = Vertx.vertx(new VertxOptions().setWorkerPoolSize(40));</code></p><p><a href="http://vertx.io/docs/apidocs/io/vertx/core/VertxOptions.html" target="_blank" rel="noopener">VertxOptions的具体属性参数参考</a></p><p>在Vertx中我们需要时刻保持eventLoop的畅通，当创建集群模式下的Vertx对象时，就不能用单机模式的方式了，因为让不同的 Vert.x 实例组成一个集群需要一些时间（也许是几秒钟）。在这段时间内，我们不想去阻塞调用线程，所以我们通过异步的方式来获取Vertx对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vertx.clusteredVertx(new VertxOptions(), res -&gt; &#123;</span><br><span class="line">  if (res.succeeded()) &#123;</span><br><span class="line">    Vertx vertx = res.result(); // 获取到了集群模式下的 Vertx 对象</span><br><span class="line">    // .....</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 获取失败，可能是集群管理器出现了问题</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="vertx是事件驱动"><a class="markdownIt-Anchor" href="#vertx是事件驱动"></a> Vertx是事件驱动</h3><p>当Vertx有一个事件要传递给某一个Hander去处理时，他会异步的去调用这个Hander。</p><p>Vertx中的大部分api都是不会阻塞线程的</p><p>传统的阻塞式的api，例如spring开发中，往往会有以下场景</p><p><code>线程a调用线程b，线程b执行逻辑，执行完毕后返回结果到线程a，线程a处理返回结果，线程a执行完毕</code></p><p>在这种场景下，线程a调用了线程b后就一直处于阻塞状态，如果此时有大量请求涌入，很可能造成灾难性的后果。</p><p>而如果使用Vertx来处理这种场景，则变成了如下的逻辑</p><p><code>线程a调用线程b，并告知线程b执行完毕后的通知线程c，线程a执行完毕。线程b开始执行执行完毕后通知线程c，线程c处理返回结果。</code></p><p>因为Vert.x API不会阻塞线程，所以通过Vert.x您可以只使用少量的线程来处理大量的并发。</p><h3 id="eventloop"><a class="markdownIt-Anchor" href="#eventloop"></a> EventLoop</h3><p>Vert.x的api保证无阻塞的情况下，Vert.x使用 Event Loop 来调用您的处理器。Event Loop 可以在事件到达时快速地分发到不同的处理器中。由于没有阻塞，Event Loop 可在短时间内分发大量的事件。例如，一个单独的 Event Loop 可以非常迅速地处理数千个 HTTP 请求。这种方式被称为<strong>反应器（Reactor）模式</strong>，所以呢，在Vertx中有一条黄金法则：<strong><mark>不要阻塞EventLoop</mark></strong></p><h3 id="处理阻塞式代码"><a class="markdownIt-Anchor" href="#处理阻塞式代码"></a> 处理阻塞式代码</h3><p>虽然Vertx的大部分api是无阻塞的，但仍然存在一些阻塞式的代码。比如数据库操作，如果这种方法或者线程运行在EventLoop上，势必会造成阻塞，这种情况下内，Vertx提供了专门为阻塞式代码执行和处理回调的方法。</p><ul><li>executeBlocking</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vertx.executeBlocking(future -&gt; &#123;</span><br><span class="line">  // 调用一些需要耗费很长时间返回结果的阻塞式API</span><br><span class="line">  String result = someAPI.blockingMethod(&quot;hello&quot;);</span><br><span class="line">  future.complete(result);</span><br><span class="line">&#125;, res -&gt; &#123;</span><br><span class="line">    //处理结果</span><br><span class="line">  System.out.println(&quot;The result is: &quot; + res.result());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><pre><code>默认情况下，如果 executeBlocking 在同一个上下文环境中（如：同一个 Verticle 实例）被调用了多次，那么这些不同的 executeBlocking 代码块会 顺序执行（一个接一个）。若您不需要关心您调用 executeBlocking 的顺序，可以将 ordered 参数的值设为 false。这样任何 executeBlocking 都会在 Worker Pool 中并行执行。</code></pre><ul><li>Worker Verticle</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WorkerExecutor executor = vertx.createSharedWorkerExecutor(&quot;my-worker-pool&quot;);</span><br><span class="line">executor.executeBlocking(future -&gt; &#123;</span><br><span class="line">  // 调用一些需要耗费显著执行时间返回结果的阻塞式API</span><br><span class="line">  String result = someAPI.blockingMethod(&quot;hello&quot;);</span><br><span class="line">  future.complete(result);</span><br><span class="line">&#125;, res -&gt; &#123;</span><br><span class="line">  System.out.println(&quot;The result is: &quot; + res.result());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Worker Executor 在不需要的时候必须被关闭：</p><pre><code>executor.close();</code></pre><h3 id="异步协调"><a class="markdownIt-Anchor" href="#异步协调"></a> 异步协调</h3><p>在Vertx中，Future可以用来协调多个异步线程的操作结果，Future支持两种组合方式：并发组合、顺序组合</p><p><strong>并发组合</strong></p><p><code>static &lt;T1,T2&gt; CompositeFuture all(Future&lt;T1&gt; f1,Future&lt;T2&gt; f2)</code><br><code>static CompositeFuture all(List&lt;Future&gt; futures)</code></p><p>该方法接受多个 Future 对象作为参数（最多6个，或者传入 List）。当所有的 Future 都成功完成，该方法将返回一个 成功的 Future；当任一个 Future 执行失败，则返回一个 失败的 Future，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;HttpServer&gt; httpServerFuture = Future.future();</span><br><span class="line">Future&lt;NetServer&gt; netServerFuture = Future.future();</span><br><span class="line"></span><br><span class="line">httpServer.listen(httpServerFuture.completer());</span><br><span class="line">netServer.listen(netServerFuture.completer());</span><br><span class="line"></span><br><span class="line">CompositeFuture.all(httpServerFuture, netServerFuture).setHandler(ar -&gt; &#123;</span><br><span class="line">  if (ar.succeeded()) &#123;</span><br><span class="line">    // 所有服务器启动完成</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 有一个服务器启动失败</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当组合的处理操作完成时，该方法返回的 Future 上绑定的处理器（Handler）会被调用。当一个操作失败（其中的某一个 Future 的状态被标记成失败），则返回的 Future 会被标记为失败。当所有的操作都成功时，返回的 Future 将会成功完成。</p><p><code>static &lt;T1,T2&gt; CompositeFuture any(Future&lt;T1&gt; f1,Future&lt;T2&gt; f2)</code><br><code>static CompositeFuture any(List&lt;Future&gt; futures)</code></p><p>该方法的合并会<code>等待第一个成功</code>执行的Future。CompositeFuture.any 方法接受多个 Future 作为参数（最多6个，或传入 List）。当任意一个 Future 成功得到结果，则该 Future 成功；当<code>所有</code>的 Future 都执行失败，则该 Future 失败。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompositeFuture.any(future1, future2).setHandler(ar -&gt; &#123;</span><br><span class="line">  if (ar.succeeded()) &#123;</span><br><span class="line">    // 至少一个成功</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 所有的都失败</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>static &lt;T1,T2&gt; CompositeFuture join(Future&lt;T1&gt; f1,Future&lt;T2&gt; f2)</code><br><code>static CompositeFuture join(List&lt;Future&gt; futures)</code></p><p>join方法的合并会<code>等待所有的 Future 完成</code>，无论成败。CompositeFuture.join 方法接受多个 Future 作为参数（最多6个），并将结果归并成一个 Future 。当全部 Future 成功执行完成，得到的 Future 是成功状态的；当至少一个 Future 执行失败时，得到的 Future 是失败状态的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompositeFuture.join(future1, future2, future3).setHandler(ar -&gt; &#123;</span><br><span class="line">  if (ar.succeeded()) &#123;</span><br><span class="line">    // 所有都成功</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 至少一个失败</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>顺序合并</strong><br>和 all 、join以及 any 实现的并发组合不同，<a href="http://vertx.io/docs/apidocs/io/vertx/core/Future.html#compose-io.vertx.core.Handler-io.vertx.core.Future-" target="_blank" rel="noopener">compose </a>方法作用于顺序组合 Future。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Future&lt;Void&gt; startFuture = Future.future();</span><br><span class="line">Future&lt;Void&gt; fut1 = Future.future();</span><br><span class="line">FileSystem fs = vertx.fileSystem();</span><br><span class="line"></span><br><span class="line">fs.createFile(&quot;/foo&quot;, fut1.completer());</span><br><span class="line"></span><br><span class="line">fut1.compose(v -&gt; &#123;</span><br><span class="line">    // fut1中文件创建完成后执行</span><br><span class="line">    Future&lt;Void&gt; fut2 = Future.future();</span><br><span class="line">    fs.writeFile(&quot;/foo&quot;, Buffer.buffer(), fut2.completer());</span><br><span class="line">    return fut2;</span><br><span class="line">&#125;).compose(v -&gt; &#123;</span><br><span class="line">            // fut2文件写入完成后执行</span><br><span class="line">            System.out.println(&quot;--------------------&quot;);</span><br><span class="line">            fs.copy(&quot;/foo&quot;, &quot;/foo&quot;, startFuture.completer());</span><br><span class="line">        &#125;,</span><br><span class="line">        // 如果任何一步失败，将startFuture标记成failed</span><br><span class="line">        startFuture)</span><br><span class="line">        .setHandler(a -&gt; &#123;</span><br><span class="line">            if (startFuture.succeeded()) &#123;</span><br><span class="line">                System.out.println(&quot;success...&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;error...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这里例子中，有三个操作被串起来了：</p><ul><li>一个文件被创建（fut1）</li><li>一些东西被写入到文件（fut2）</li><li>文件被移走（startFuture）</li></ul><p>如果这三个步骤全部成功，则最终的 Future（startFuture）会是成功的；其中任何一步失败，则最终 Future 就是失败的。</p><h3 id="verticle"><a class="markdownIt-Anchor" href="#verticle"></a> Verticle</h3><p>Verticle 是由 Vert.x 部署和运行的代码块。一个应用程序通常是由在同一个 Vert.x 实例中同时运行的许多 Verticle 实例组合而成。不同的 Verticle 实例通过向 Event Bus 上发送消息来相互通信。</p><p>Verticle 的实现类必须实现 Verticle 接口。</p><p>如果您喜欢的话，可以直接实现该接口，但是通常直接从抽象类 AbstractVerticle 继承更简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class MyVerticle extends AbstractVerticle &#123;</span><br><span class="line"></span><br><span class="line">  // Called when verticle is deployed</span><br><span class="line">  // Verticle部署时调用</span><br><span class="line">  public void start() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Optional - called when verticle is undeployed</span><br><span class="line">  // 可选 - Verticle撤销时调用</span><br><span class="line">  public void stop() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="verticle-种类"><a class="markdownIt-Anchor" href="#verticle-种类"></a> Verticle 种类</h3><ul><li><p>Stardand Verticle：这是最常用的一类 Verticle —— 它们永远运行在 Event Loop 线程上。</p><ul><li>当 Standard Verticle 被创建时，它会被分派给一个 Event Loop 线程，并在这个 Event Loop 中执行它的 start 方法。当您在一个 Event Loop 上调用了 Core API 中的方法并传入了处理器时，Vert.x 将保证用与调用该方法时相同的 Event Loop 来执行这些处理器。</li><li>这意味着我们可以保证您的 Verticle 实例中 所有的代码都是在相同Event Loop中执行（只要您不创建自己的线程并调用它！）</li><li>同样意味着您可以将您的应用中的所有代码用单线程方式编写，让 Vert.x 去考虑线程和扩展问题。您不用再考虑 synchronized 和 volatile 的问题，也可以避免传统的多线程应用经常会遇到的竞态条件和死锁的问题。</li></ul></li><li><p>Worker Verticle：这类 Verticle 会运行在 Worker Pool 中的线程上。一个实例绝对不会被多个线程同时执行。</p><ul><li>不是由一个 Event Loop 来执行，而是由Vert.x中的 Worker Pool 中的线程执行。</li><li>Worker Verticle 被设计来调用阻塞式代码，它不会阻塞任何 Event Loop。</li><li>将 Verticle 部署成一个 Worker Verticle，通过 如下方法来设置：</li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DeploymentOptions options = new DeploymentOptions().setWorker(true);</span><br><span class="line">vertx.deployVerticle(&quot;com.mycompany.MyOrderProcessorVerticle&quot;, options);</span><br></pre></td></tr></table></figure></li><li><p>Multi-Threaded Worker Verticle：这类 Verticle 也会运行在 Worker Pool 中的线程上。一个实例可以由多个线程同时执行（因此需要开发者自己确保线程安全）。</p></li></ul><h3 id="verticle部署"><a class="markdownIt-Anchor" href="#verticle部署"></a> Verticle部署</h3><p><a href="http://vertx.io/docs/apidocs/io/vertx/core/Vertx.html#deployVerticle-java.lang.Class-io.vertx.core.DeploymentOptions-" target="_blank" rel="noopener"><code>deployVerticle</code></a>方法可用来部署Verticle，具体怎么部署可以看看源码中提供的方法：<br><code>package io.vertx.core.Vertx;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@GenIgnore(&#123;&quot;permitted-type&quot;&#125;)</span><br><span class="line">void deployVerticle(Verticle var1);</span><br><span class="line"></span><br><span class="line">@GenIgnore(&#123;&quot;permitted-type&quot;&#125;)</span><br><span class="line">void deployVerticle(Verticle var1, Handler&lt;AsyncResult&lt;String&gt;&gt; var2);</span><br><span class="line"></span><br><span class="line">@GenIgnore(&#123;&quot;permitted-type&quot;&#125;)</span><br><span class="line">void deployVerticle(Verticle var1, DeploymentOptions var2);</span><br><span class="line"></span><br><span class="line">@GenIgnore(&#123;&quot;permitted-type&quot;&#125;)</span><br><span class="line">void deployVerticle(Verticle var1, DeploymentOptions var2, Handler&lt;AsyncResult&lt;String&gt;&gt; var3);</span><br><span class="line"></span><br><span class="line">@GenIgnore</span><br><span class="line">void deployVerticle(Class&lt;? extends Verticle&gt; var1, DeploymentOptions var2);</span><br><span class="line"></span><br><span class="line">@GenIgnore</span><br><span class="line">void deployVerticle(Class&lt;? extends Verticle&gt; var1, DeploymentOptions var2, Handler&lt;AsyncResult&lt;String&gt;&gt; var3);</span><br><span class="line"></span><br><span class="line">@GenIgnore(&#123;&quot;permitted-type&quot;&#125;)</span><br><span class="line">void deployVerticle(Supplier&lt;Verticle&gt; var1, DeploymentOptions var2);</span><br><span class="line"></span><br><span class="line">@GenIgnore(&#123;&quot;permitted-type&quot;&#125;)</span><br><span class="line">void deployVerticle(Supplier&lt;Verticle&gt; var1, DeploymentOptions var2, Handler&lt;AsyncResult&lt;String&gt;&gt; var3);</span><br><span class="line"></span><br><span class="line">void deployVerticle(String var1);</span><br><span class="line"></span><br><span class="line">void deployVerticle(String var1, Handler&lt;AsyncResult&lt;String&gt;&gt; var2);</span><br><span class="line"></span><br><span class="line">void deployVerticle(String var1, DeploymentOptions var2);</span><br><span class="line"></span><br><span class="line">void deployVerticle(String var1, DeploymentOptions var2, Handler&lt;AsyncResult&lt;String&gt;&gt; var3);</span><br></pre></td></tr></table></figure><p>阅读源码可以看出，部署方式大概有两类</p><ul><li>实例部署<ul><li>vertx.deployVerticle(new MyFirstVerticle());</li><li>vertx.deployVerticle(MyFirstVerticle.class,new DeploymentOptions());</li><li>vertx.deployVerticle(MyFirstVerticle::new,new DeploymentOptions());</li></ul></li><li>类名部署<ul><li>vertx.deployVerticle(“com.zhengql.vertx.MyFirstVerticle”);</li></ul></li></ul><p>Verticle的部署是异步的，当我们调用<code>deployVerticle</code>方法后，部署结果不是立即返回的，我们可以同步绑定处理异步返回结果的处理器：<br><code>void deployVerticle(String var1, Handler&lt;AsyncResult&lt;String&gt;&gt; var2);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vertx.deployVerticle(&quot;com.zhengql.vertx.MyFirstVerticle&quot;, res -&gt; &#123;</span><br><span class="line">  if (res.succeeded()) &#123;</span><br><span class="line">  //如果部署成功，这个完成处理器的结果中将会包含部署ID的字符串。这个部署 ID可以在之后您想要撤销它时使用。</span><br><span class="line">    System.out.println(&quot;Deployment id is: &quot; + res.result());</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    System.out.println(&quot;Deployment failed!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>撤销Verticle</strong></p><p>我们可以通过 <a href="http://vertx.io/docs/apidocs/io/vertx/core/Vertx.html#undeploy-java.lang.String-" target="_blank" rel="noopener"><code>undeploy</code></a> 方法来撤销部署好的 Verticle。</p><p>撤销操作也是异步的，因此若您想要在撤销完成过后收到通知则可以指定另一个完成处理器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vertx.undeploy(deploymentID, res -&gt; &#123;</span><br><span class="line">  if (res.succeeded()) &#123;</span><br><span class="line">    System.out.println(&quot;Undeployed ok&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    System.out.println(&quot;Undeploy failed!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>DeploymentOptions</strong></p><p>在上边的部署方法api中有一个参数是DeploymentOptions ，可以通过配置自定义的配置来部署Verticle。</p><p>指定Verticle的实例数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DeploymentOptions options = new DeploymentOptions().setInstances(2);</span><br><span class="line">vertx.deployVerticle(&quot;com.zhengql.vertx.MyFirstVerticle&quot;, options);</span><br></pre></td></tr></table></figure><p>部署时传给 Verticle 一个 JSON 格式的配置,该配置中的值可以在Verticle的start()中通过config().getString()方法来获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JsonObject config = new JsonObject().put(&quot;name&quot;, &quot;zhengql&quot;).put(&quot;age&quot;, 18);</span><br><span class="line">DeploymentOptions options = new DeploymentOptions().setConfig(config);</span><br><span class="line">vertx.deployVerticle(&quot;com.zhengql.vertx.MyFirstVerticle&quot;, options);</span><br></pre></td></tr></table></figure><h3 id="定时任务"><a class="markdownIt-Anchor" href="#定时任务"></a> 定时任务</h3><p>在Vertx中我们要求了Verticle不可以阻塞EventLoop，所以我们不能在Verticle中使用线程调度方法sleep、wait等，好在Vert.x为我们提供了专用的定时器</p><p><strong>一次性定时器 setTimer</strong><br>一次性计时器会在一定延迟后调用 Event Handler如下<br>延迟5s，打印字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//5000代表延迟时间，单位毫秒</span><br><span class="line">long timerID = vertx.setTimer(5000, id -&gt; &#123;</span><br><span class="line">  System.out.println(&quot;hello xiaogege&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>周期性定时器 setPeriodic</strong><br>周期性触发的定时器setPeriodic，在任务第一次触发前也是需要延时的，demo如下<br>每5s打印一次字符串，注：第一次不是立即触发，时间单位毫秒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">long timerID = vertx.setPeriodic(5000, id -&gt; &#123;</span><br><span class="line">  System.out.println(&quot;hello xiaojiejie&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>取消定时任务 cancelTimer</strong></p><p>首先先来看看定时任务的api</p><pre><code>long setTimer(long var1, Handler&lt;Long&gt; var3);long setPeriodic(long var1, Handler&lt;Long&gt; var3);boolean cancelTimer(long var1);</code></pre><p>从api中可以看出，设置定时任务都有一个long型的返回值，取消定时任务需要一个long型的参数，可能你已经猜到了两者之间的关系，那么这个long型的返回值是什么呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setTimer</span><br><span class="line">long setTimer(long delay,</span><br><span class="line">              Handler&lt;Long&gt; handler)</span><br><span class="line">Set a one-shot timer to fire after delay milliseconds, at which point handler will be called with the id of the timer.</span><br><span class="line">Parameters:</span><br><span class="line">delay - the delay in milliseconds, after which the timer will fire</span><br><span class="line">handler - the handler that will be called with the timer ID when the timer fires</span><br><span class="line">Returns:</span><br><span class="line">the unique ID of the timer</span><br></pre></td></tr></table></figure><p>这个返回值是定时器的唯一id，当定时器触发调用处理器也是通过这个唯一id。</p><p>撤销定时器直接调用<code>cancelTimer</code>即可</p><h3 id="资料参考"><a class="markdownIt-Anchor" href="#资料参考"></a> 资料参考</h3><p><a href="https://vertx.io/docs/" target="_blank" rel="noopener">https://vertx.io/docs/</a></p><p><a href="https://vertx.io/docs/vertx-core/java/" target="_blank" rel="noopener">https://vertx.io/docs/vertx-core/java/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;本文是我在学习Vert.x过程中的一些笔记，作为记录。
因为是初学，对Vert.x的理解还不够透彻，如有错误之处我们可以在评论中一起讨论呦。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;vertx-core模块是vertx的根基&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#vertx-core模块是vertx的根基&quot;&gt;&lt;/a&gt; Vert.x core模块是vertx的根基&lt;/h3&gt;
&lt;p&gt;是基于netty的一个工具包，提供tcp、http、websocket、dns、eventbus等基础功能封装&lt;/p&gt;
    
    </summary>
    
      <category term="Vert.x" scheme="https://www.larscheng.com/categories/Vert-x/"/>
    
    
      <category term="Vert.x" scheme="https://www.larscheng.com/tags/Vert-x/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot项目中实现国际化</title>
    <link href="https://www.larscheng.com/sb2i18n/"/>
    <id>https://www.larscheng.com/sb2i18n/</id>
    <published>2019-04-01T06:07:01.000Z</published>
    <updated>2022-01-02T05:18:26.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>什么是国际化呢？国际惯例，来时来一段官方介绍：</p><pre><code>国际化（internationalization）是设计和制造容易适应不同区域要求的产品的一种方式。它要求从产品中抽离所有地域语言，国家/地区和文化相关的元素。换言之，应用程序的功能和代码设计考虑在不同地区运行的需要，其代码简化了不同本地版本的生产。开发这样的程序的过程，就称为国际化。</code></pre><p>在我们实际开发中，一个web应用可能要在多个地区使用，面对不同地区的不同语言，为了适应不同的用户，我们可以尝试在前端页面实现多语言的支持，那么同样对于后端返回的一些提示信息，异常信息等，我们后端也可以根据不同的语言环境来进行国际化处理，返回相应的信息。</p><a id="more"></a> <h3 id="开发工具"><a class="markdownIt-Anchor" href="#开发工具"></a> 开发工具</h3><p>IDEA、Maven、SpringBoot2.0.5、Jdk1.8、google浏览器</p><h3 id="springboot中的国际化"><a class="markdownIt-Anchor" href="#springboot中的国际化"></a> SpringBoot中的国际化</h3><p><strong>原理</strong>：<br>想要使应用支持国际化，首先需要知道用户的语言环境，即用户想要看到的语言，我们设想在用户每次请求时告诉服务器自己的语言环境，服务器收到请求后，根据不同的语言环境返回不同的信息来实现国际化。在spring应用中，用户的语言环境是通过<code>区域解析器</code>来识别的，而区域解析器有分为好几种（<code>后面详细说</code>）,在我们不做配置修改时，spring使用<code>AcceptHeaderLocaleResolver</code>作为默认的区域解析器，它是根据HTTP请求 Header中的<code>Accept-language</code>的值来解析，当然区域解析器我们也可以自定义配置。</p><p><strong>springboot默认就支持国际化。我们只需要只需要作相应的配置即可。</strong></p><p>1.首先你需要一个springboot项目。IDEA中分分钟创建好一个项目。</p><p>2.在<code>resources</code>下定义国际化配置文件，注意名称必须以<code>messages</code>开始。（<code>在springboot中，当我们不修改配置时默认去解析名称以message开始的properties文件</code>）</p><ul><li><p>messages.properties （<code>默认环境，无法确定语言环境时，解析该文件中的相应信息</code>）</p></li><li><p>messages_zh_CN.properties（<code>中文语言环境时，解析该文件中的相应信息</code>）</p></li><li><p>messages_en_US.properties（<code>英文语言环境时，解析该文件中的相应信息</code>）</p></li></ul><p>在三个配置文件中分别以<code>Key = Value</code>形式存储如下三条信息，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">welcome = 这是一个支持国际化的项目。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">welcome = 这是一个支持国际化的项目。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">welcome = This is a project supporting internationalization.</span><br></pre></td></tr></table></figure><p>3.创建thymeleaf页面<br>加入thymeleaf依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>resources/templates</code>目录下创建<code>hello.html</code>页面:<br>尝试在不同的语言环境下，通过<code>#{welcome}</code>获取信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">th:text</span>=<span class="string">"#&#123;welcome&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.创建访问页面的controller<br>注意这里controller的注解时<code>@Controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/25 19:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试国际化效果"><a class="markdownIt-Anchor" href="#测试国际化效果"></a> 测试国际化效果</h3><p>这里使用google浏览器进行测试，测试之前需要安装插件<code>Language Switcher</code><br>Language Switcher : 可以改变当前请求的语言环境（根据自己的选择）</p><p>启动我们的springboot项目，google浏览器访问 <a href="http://127.0.0.1:8080/hi" target="_blank" rel="noopener">http://127.0.0.1:8080/hi</a> ,可以看到如下页面：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132507.png" alt=""></p><p>通过Language Switcher切换语言环境为<code>English - United States</code>,重新访问 <a href="http://127.0.0.1:8080/hi" target="_blank" rel="noopener">http://127.0.0.1:8080/hi</a> ，可以看到如下页面：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132524.png" alt=""></p><p>ok，大功告成，到此一个简单的国际化项目就完成了。</p><h3 id="扩展国际化"><a class="markdownIt-Anchor" href="#扩展国际化"></a> 扩展国际化</h3><p>通过上面的小栗子，我们可以看到一个简单的国际化使用，但是在开发中中还需要我们进行一定的配置，来满足我们不同情况下的使用。</p><h4 id="在返回结果中获取国际化信息"><a class="markdownIt-Anchor" href="#在返回结果中获取国际化信息"></a> 在返回结果中获取国际化信息</h4><p>很多时候，后端接收到一个请求后，需要返回一个提示信息，而此时我们可以使这个返回信息支持国际化</p><p>这里就用到了<code>org.springframework.context.MessageSource</code>接口,MessageSource提供了三个方法</p><pre><code>@Nullable//参数字段可为空String getMessage(String var1, @Nullable Object[] var2, @Nullable String var3, Locale var4);String getMessage(String var1, @Nullable Object[] var2, Locale var3) throws NoSuchMessageException;String getMessage(MessageSourceResolvable var1, Locale var2) throws NoSuchMessageException;</code></pre><ul><li><p>String getMessage(String var1, @Nullable Object[] var2, @Nullable String var3, Locale var4)：用来从MessageSource获取消息的基本方法。如果在指定的locale中没有找到消息，则使用默认的消息。var2中的参数将使用标准类库中的MessageFormat来作消息中替换值。</p></li><li><p>String getMessage(String code, Object[] args, Locale loc)：本质上和上一个方法相同，其区别在：没有指定默认值，如果没找到消息，会抛出一个NoSuchMessageException异常。</p></li><li><p>String getMessage(MessageSourceResolvable resolvable, Locale locale)：上面方法中所使用的属性都封装到一个MessageSourceResolvable实现中，而本方法可以指定MessageSourceResolvable实现。</p></li></ul><p>下面我们实践一下：</p><p>1.创建一个以json返回格式的controller，注入MessageSource，注意controller的注解为<code>@RestController</code></p><p>在这里首先我们需要获取到当前请求的Locale，有两种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Locale locale = LocaleContextHolder.getLocale();</span><br><span class="line">Locale locale = RequestContextUtils.getLocale(request);</span><br></pre></td></tr></table></figure><p>两种方式根据情况选择使用，下面是controller代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.i18n.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.i18n.LocaleContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/21 10:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/ha"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageSource.getMessage(<span class="string">"welcome"</span>, <span class="keyword">null</span>, LocaleContextHolder.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.启动项目访问 <a href="http://127.0.0.1:8080/ha" target="_blank" rel="noopener">http://127.0.0.1:8080/ha</a> ，可以看到相应语言环境的返回信息<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132600.png" alt=""></p><p>通过Language Switcher切换语言环境为<code>English - United States</code>,重新访问http://127.0.0.1:8080/ha，可以看到如下页面：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132615.png" alt=""></p><h3 id="支持占位符国际化信息返回"><a class="markdownIt-Anchor" href="#支持占位符国际化信息返回"></a> 支持占位符国际化信息返回</h3><p>我们经常会遇到这样一个场景，登录账号需要验证码，填写完手机号获取验证码后会收到一条类似于<code>尊敬的用户13099999999您好，您的验证码是6666</code>，这种信息，其实就是一个模板，通过改变参数，重复使用。我们通过国际化资源文件中的占位符，配合MessageSource提供的api也可以实现。<br>资源文件中加入如下属性:</p><p>messages.properties,messages_zh_CN.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello=你好：&#123;0&#125; ， 你的验证码为 ：&#123;1&#125;</span><br></pre></td></tr></table></figure><p>messages_en_US.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello=Hello: &#123;0&#125;, your verification code is: &#123;1&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>JsonController</code>中，创建一个测试接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/haha&quot;)</span><br><span class="line">public String haha() &#123;</span><br><span class="line">    return messageSource.getMessage(&quot;hello&quot;, new Object[]&#123;&quot;zhangsan&quot;,&quot;123456&quot;&#125;, LocaleContextHolder.getLocale());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目直接，访问 <a href="http://127.0.0.1:8080/haha" target="_blank" rel="noopener">http://127.0.0.1:8080/haha</a> 可以看到相应语言环境的返回信息</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132628.png" alt=""></p><p>通过Language Switcher切换语言环境为<code>English - United States</code>,重新访问 <a href="http://127.0.0.1:8080/haha" target="_blank" rel="noopener">http://127.0.0.1:8080/haha</a> ，可以看到如下页面：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132642.png" alt=""></p><h3 id="支持国际化的枚举类"><a class="markdownIt-Anchor" href="#支持国际化的枚举类"></a> 支持国际化的枚举类</h3><p>既然返回信息可以实现国际化，那我们的枚举类同样也可以实现国际化咯</p><p>创建一个枚举类EnumSuccessOrError.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:枚举类举例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/26 20:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  EnumSuccessOrError &#123;</span><br><span class="line">    SUCCESS(<span class="number">0</span>, <span class="string">"操作成功"</span>),</span><br><span class="line">    ERROR(<span class="number">1</span>, <span class="string">"操作失败"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回状态信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String statusMsg;</span><br><span class="line"></span><br><span class="line">    EnumSuccessOrError(<span class="keyword">int</span> statusCode, String statusMsg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.statusCode = statusCode;</span><br><span class="line">        <span class="keyword">this</span>.statusMsg = statusMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the statusCode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatusCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the statusMsg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStatusMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> statusMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，刚刚创建的枚举类是不支持国际化的，我们呢需要改造他，当调用<code>getStatusMsg</code>方法时根据语言环境返回相应的国际化字符串。可以从如下两个点着手：</p><ul><li>getStatusMsg方法改造</li><li>资源文件中添加不同语言环境对应的返回值</li></ul><p>先在三个资源文件中加入不同环境的返回值：</p><p>messages.properties,messages_zh_CN.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUCCESS = 操作成功</span><br><span class="line">ERROR = 操作失败</span><br></pre></td></tr></table></figure><p>messages_en_US.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUCCESS=success</span><br><span class="line">ERROR=error</span><br></pre></td></tr></table></figure><p>改造后的枚举如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  EnumSuccessOrError &#123;</span><br><span class="line">SUCCESS(<span class="number">0</span>, <span class="string">"SUCCESS"</span>),</span><br><span class="line">ERROR(<span class="number">1</span>, <span class="string">"ERROR"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回状态码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回状态信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String statusMsg;</span><br><span class="line"></span><br><span class="line">EnumSuccessOrError(<span class="keyword">int</span> statusCode, String statusMsg) &#123;</span><br><span class="line">    <span class="keyword">this</span>.statusCode = statusCode;</span><br><span class="line">    <span class="keyword">this</span>.statusMsg = statusMsg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> EnumSuccessOrError <span class="title">setMessageSource</span><span class="params">(MessageSource messageSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageSource = messageSource;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过静态内部类的方式注入bean，并赋值到枚举中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReportTypeServiceInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (EnumSuccessOrError rt : EnumSet.allOf(EnumSuccessOrError.class))</span><br><span class="line">            rt.setMessageSource(messageSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the statusCode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatusCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> statusCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the statusMsg，根据语言环境返回国际化字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStatusMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> messageSource.getMessage(statusMsg,<span class="keyword">null</span>,statusMsg, LocaleContextHolder.getLocale());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们在<code>JsonController</code>中，再创建一个测试接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/enumDemo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">enumDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> EnumSuccessOrError.SUCCESS.getStatusMsg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目直接，访问 <a href="http://127.0.0.1:8080/enumDemo" target="_blank" rel="noopener">http://127.0.0.1:8080/enumDemo</a> 可以看到相应语言环境的返回信息</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132701.png" alt=""></p><p>通过Language Switcher切换语言环境为<code>English - United States</code>,重新访问 <a href="http://127.0.0.1:8080/enumDemo" target="_blank" rel="noopener">http://127.0.0.1:8080/enumDemo</a> ，可以看到如下页面：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132715.png" alt=""></p><h4 id="参考和感谢"><a class="markdownIt-Anchor" href="#参考和感谢"></a> 参考和感谢</h4><p><a href="https://blog.csdn.net/linxingliang/article/details/52350238" target="_blank" rel="noopener">https://blog.csdn.net/linxingliang/article/details/52350238</a><br><a href="https://blog.csdn.net/flowingflying/article/details/76358970" target="_blank" rel="noopener">https://blog.csdn.net/flowingflying/article/details/76358970</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;什么是国际化呢？国际惯例，来时来一段官方介绍：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;国际化（internationalization）是设计和制造容易适应不同区域要求的产品的一种方式。它要求从产品中抽离所有地域语言，国家/地区和文化相关的元素。换言之，应用程序的功能和代码设计考虑在不同地区运行的需要，其代码简化了不同本地版本的生产。开发这样的程序的过程，就称为国际化。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在我们实际开发中，一个web应用可能要在多个地区使用，面对不同地区的不同语言，为了适应不同的用户，我们可以尝试在前端页面实现多语言的支持，那么同样对于后端返回的一些提示信息，异常信息等，我们后端也可以根据不同的语言环境来进行国际化处理，返回相应的信息。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.larscheng.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.larscheng.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Vert.x介绍</title>
    <link href="https://www.larscheng.com/vertxinfo/"/>
    <id>https://www.larscheng.com/vertxinfo/</id>
    <published>2019-04-01T05:58:41.000Z</published>
    <updated>2022-01-02T05:18:26.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-vertx不是一个框架而是一个工具包"><a class="markdownIt-Anchor" href="#1-vertx不是一个框架而是一个工具包"></a> 1 Vert.x不是一个框架，而是一个工具包</h2><p>Vert.x是基于Netty项目——一个基于JVM的高性能异步网络库，它的核心库定义了编写异步网络应用的基本API，你可以为应用程序选择有用的模块（如数据库链接、监控、认证、日志、服务发现、集群支持等），同时它也可以内嵌到现有的应用中（如springboot项目中）既能体验Vert.x的高效又兼顾spring的泛用性</p><a id="more"></a> <p>vertx并不是针对特定应用的框架，它其实很大程度上就是netty的一个最佳实践的封装。在java上实现了类似于node.js的异步处理框架。</p><h2 id="2-vertx是多语言的"><a class="markdownIt-Anchor" href="#2-vertx是多语言的"></a> 2 Vert.x是多语言的</h2><p>Vert.x运行在Java虚拟机上，支持多种编程语言，Vert.x是高度模块化的，同一个应用，你可以选择多种编程语言同时开发。它支持广泛的流行的JVM语言：Java、Groovy、Scala、Kotlin、JavaScript、Ruby及Ceylon。</p><h2 id="3-完善的生态体系"><a class="markdownIt-Anchor" href="#3-完善的生态体系"></a> 3 完善的生态体系</h2><p>与我们熟悉的spring类似，Vert.x拥有完善的生态，使用vert.x可以完成一个应用的所有开发工作，可以实现一个完全异步处理的应用。它拥有类似于spring全家桶的生态体系，具体如下：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132241.png" alt="image"></p><h4 id="31-核心模块vertx-core"><a class="markdownIt-Anchor" href="#31-核心模块vertx-core"></a> 3.1 核心模块：Vert.x-core</h4><p>Vert.x核心模块包含一些基础的功能，如HTTP，TCP，文件系统访问，EventBus、WebSocket、延时与重复执行、缓存等其他基础的功能，你可以在你自己的应用程序中直接使用。可以通过vertx-core模块引用即可。</p><h4 id="32-支持web开发vertx-web"><a class="markdownIt-Anchor" href="#32-支持web开发vertx-web"></a> 3.2 支持web开发：Vert.x-Web</h4><p>Vert.x Core 提供了一系列底层的功能用于操作 HTTP，对于一部分应用来是足够的。<br>Vert.x Web 基于 Vert.x Core，提供了一系列更丰富的功能以便更容易地开发实际的 Web 应用。</p><h4 id="33-vertx提供多种数据访问的api封装"><a class="markdownIt-Anchor" href="#33-vertx提供多种数据访问的api封装"></a> 3.3 Vert.x提供多种数据访问的Api封装</h4><p>Vert.x提供了对关系型数据库、NoSQL、消息中间件的支持，传统的客户端因为是阻塞的，会严重影响系统的性能，因此Vert.x提供了对以上客户端的异步支持。具体支持的数据访问如下：</p><ul><li>MongoDB client</li><li>JDBC client</li><li>SQL common</li><li>Redis client</li><li>MySQL/PostgreSQLclient</li></ul><h4 id="35-微服务的支持服务发现-熔断器"><a class="markdownIt-Anchor" href="#35-微服务的支持服务发现-熔断器"></a> 3.5 微服务的支持：服务发现、熔断器</h4><ul><li>Vert.x Service Discovery：一个服务发现的基础组件，用来发布和发现各种类型的资源</li><li>Vert.x Circuit Breaker：是<code>熔断器模式</code>的Vert.x实现。可与springcloud种的Hystrix对比</li><li>Vert.x Config：提供了一种配置 Vert.x 应用的方式。</li></ul><h4 id="36-vertx整合了常用的消息驱动vertx-integration"><a class="markdownIt-Anchor" href="#36-vertx整合了常用的消息驱动vertx-integration"></a> 3.6 Vert.x整合了常用的消息驱动：Vert.x Integration</h4><ul><li>Vert.x Mail Client：提供了一简单STMP邮件客户端，所以你可以在应用程序中发送电子邮件</li><li>Vert.x STOMP Client &amp; Server：提供了STOMP协议的实现包括客户端与服务端。</li><li>Vert.x JCA Adaptor：提供了Java连接器架构适配器，这允许同任意JavaEE应用服务器进行互操作。</li><li>Vert.x RabbitMQ Client：消息队里的客户端支持</li><li>Vert.x Kafka Client：消息队里的客户端支持</li><li>Vert.x Consul Client：google开源的一个使用go语言开发的服务发现、配置管理中心服务。内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value存储、多数据中心方案。</li></ul><h4 id="37-身份验证和授权"><a class="markdownIt-Anchor" href="#37-身份验证和授权"></a> 3.7 身份验证和授权：</h4><p>Vert.x提供了简单API用于在应用中提供认证和授权。</p><ul><li>Auth common：通用的认证API，可以通过重写AuthProvider类来实现自己的认证</li><li>JDBC auth： 后台为JDBC的认证实现</li><li>JWT auth： 用JSON Web tokens认证实现</li><li>Shiro auth： 使用Apache Shiro认证实现</li><li>MongoDB auth： MongoDB认证实现</li><li>OAuth 2： Oauth2协义认证实现</li><li>htdigest auth： 这个是新增一种认证的支持</li></ul><h2 id="5-vertx-lambda-jdk8"><a class="markdownIt-Anchor" href="#5-vertx-lambda-jdk8"></a> 5 Vert.x、lambda、JDK8</h2><p>Vert.x异步也带来了编码上的复杂性，想要编写优美的异步代码，就需要对lambda表达式、函数式编程、Reactive等技术非常熟悉才行，否则很容易导致你的代码一团糟，完全没有可读性。<br>在JDK8中引入了lambda表达式后，使用Java开发Vert.x应用就变得十分顺畅。</p><h2 id="6-vertx核心概念"><a class="markdownIt-Anchor" href="#6-vertx核心概念"></a> 6 Vert.x核心概念</h2><ul><li>Verticle<ul><li>Vert.x中的部署单元称为Verticle。Verticle是Vert.x中的一个核心概念。如果说Vertx是“应用”，那么Verticle就是应用中的一个服务。另一个更形象一点的比喻，如果说Vertx是一个机架，那么Veticle就是机架上的服务器。Verticle可以被传递一些配置信息（如证书、网络地址等），而且Verticle可以被多次部署,Verticle可以部署其它Verticle</li><li>verticle分两种，一种是基于EventLoop的适合I/O密集型的，还有一种是适合CPU密集型的worker verticle</li></ul></li><li>EvenLoop<ul><li>事件循环（EventLoop）是异步编程模型中是特有的,一个Verticle通过一个事件循环（EventLoop）处理接收到的事件，这些事件可以是任何事情，如接收网络缓冲、调度事件或由其它Verticle发送的消息,事件循环（EventLoop）中执行时，不能进行线程阻塞操作</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132320.png" alt=""></p><ul><li>EvenBus<ul><li>事件总线(EvenBus)是在不同Verticle之间通过异步消息传递进行通讯的主要工具</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029132346.png" alt=""></p><h2 id="其他介绍"><a class="markdownIt-Anchor" href="#其他介绍"></a> 其他介绍</h2><p>Vert.x 的定义是 “用来在JVM上构建反应式（reactive）应用程序的工具箱”。</p><p>Vert.x并不是一个应用服务器，一个容器或者一个框架。 它也并不是一个JavaScript开发库。Vert.x是一个朴素的老的 jar文件，所以一个Vert.x应用程序实际上是一个使用这个 jar 文件的程序。 Vert.x并不强制一个打包的方式。所有Vert.x 模块(components) 都是朴素 平淡 的 jar 文件。 这将怎样影响你的应用程序呢？让我们想象你在使用一个项目构建工具，比方说Maven或者Gradle, 去建立你的应用，一个 Vert.x 应用程序，其实就是吧 vertx-core 加入到依赖项里。 你想使用其他的 Vert.x 组件吗？请把它+到你的依赖项里。这很简单，毫无负担，不是吗。 启动这个程序就是启动一个简单实现了 public static void main(String[] args) 的类。我们不需要任何特殊的IDE或者插件去安装和开始使用 Vert.x。</p><h2 id="反应式-响应式编程-响应式系统"><a class="markdownIt-Anchor" href="#反应式-响应式编程-响应式系统"></a> 反应式、响应式编程、响应式系统</h2><p>Vert.x 是 反应式 。它就是要用来建立反应式应用程序，或者更贴切的说法是反应式系统</p><p>再次，Vert.x 是一个事件驱动和非阻塞的。事件被投递到一个永不阻塞的事件循环（EventLoop） 里。Vert.x只使用非常少的线程。 有一些线程是事件循环, 它们在处理器（Handlers） 之间派发事件。如果你把某个线程阻塞了，事件将不能继续派发。这个执行模式将影响你如何写代码，不同于传统的阻塞代码，你的代码将是异步的和非阻塞的。</p><p>举一个例子，如果你要得到一个基于URL的资源，你需要这么做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">URL site = new URL(&quot;http://vertx.io/&quot;);</span><br><span class="line">BufferedReader in = new BufferedReader(new InputStreamReader(site.openStream()));</span><br><span class="line"> </span><br><span class="line">String inputLine;</span><br><span class="line">while ((inputLine = in.readLine()) != null) &#123;</span><br><span class="line">  System.out.println(inputLine);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure><p>但是用 Vert.x 的话，就很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vertx.createHttpClient().getNow(80, &quot;vertx.io&quot;, &quot;&quot;, response -&gt; &#123;</span><br><span class="line">  response.bodyHandler(System.out::println);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于异步编程的理解，比如ajax与Vert.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//ajax代码</span><br><span class="line">console.log(&quot;1&quot;);</span><br><span class="line"> </span><br><span class="line">$.ajax(&#123;</span><br><span class="line">&quot;url&quot; : &quot;/hello&quot;,</span><br><span class="line">&quot;type&quot; : &quot;post&quot;,</span><br><span class="line">&quot;dataType&quot; : &quot;json&quot;,</span><br><span class="line">&quot;success&quot; : function(val) &#123;</span><br><span class="line">console.log(&quot;2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">console.log(&quot;3&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//vert.x代码</span><br><span class="line">System.out.println(&quot;1&quot;)</span><br><span class="line"> </span><br><span class="line">WebClient</span><br><span class="line">    .create(vertx)</span><br><span class="line">    .postAbs(REQUEST_URL) // 这里指定的是请求的地址</span><br><span class="line">    .sendBuffer(buffer, res -&gt; &#123; // buffer是请求的数据</span><br><span class="line"> </span><br><span class="line">        if (res.succeeded()) &#123;  </span><br><span class="line">            // 请求远程服务成功</span><br><span class="line">            System.out.println(&quot;2&quot;)</span><br><span class="line">            </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 请求失败</span><br><span class="line">            resultHandler.handle(Future.failedFuture(&quot;请求服务器失败...&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">System.out.println(&quot;3&quot;)</span><br></pre></td></tr></table></figure><h2 id="学习资料"><a class="markdownIt-Anchor" href="#学习资料"></a> 学习资料</h2><p><a href="http://vertxchina.github.io/vertx-translation-chinese/" target="_blank" rel="noopener">Vert.x 官方文档中文翻译</a></p><p><a href="https://blog.csdn.net/elinespace/article/category/7675648/" target="_blank" rel="noopener">A gentle guide to asynchronous programming with Eclipse Vert.x for Java developers中文翻译版</a></p><p><a href="https://blog.csdn.net/king_kgh" target="_blank" rel="noopener">Vert.x CSDN教程专栏</a></p><p><a href="http://www.sczyh30.com/vertx-blueprint-microservice/cn/index.html" target="_blank" rel="noopener">Vert.x 蓝图 - Micro-Shop 微服务实战</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-vertx不是一个框架而是一个工具包&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-vertx不是一个框架而是一个工具包&quot;&gt;&lt;/a&gt; 1 Vert.x不是一个框架，而是一个工具包&lt;/h2&gt;
&lt;p&gt;Vert.x是基于Netty项目——一个基于JVM的高性能异步网络库，它的核心库定义了编写异步网络应用的基本API，你可以为应用程序选择有用的模块（如数据库链接、监控、认证、日志、服务发现、集群支持等），同时它也可以内嵌到现有的应用中（如springboot项目中）既能体验Vert.x的高效又兼顾spring的泛用性&lt;/p&gt;
    
    </summary>
    
      <category term="Vert.x" scheme="https://www.larscheng.com/categories/Vert-x/"/>
    
    
      <category term="Vert.x" scheme="https://www.larscheng.com/tags/Vert-x/"/>
    
  </entry>
  
  <entry>
    <title>毕设选题项目本地运行环境搭建教程</title>
    <link href="https://www.larscheng.com/select-info/"/>
    <id>https://www.larscheng.com/select-info/</id>
    <published>2018-10-17T01:16:33.000Z</published>
    <updated>2022-01-02T05:18:26.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="https://www.larscheng.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="毕设" scheme="https://www.larscheng.com/tags/%E6%AF%95%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebooks的安装和使用介绍</title>
    <link href="https://www.larscheng.com/jupyter-install/"/>
    <id>https://www.larscheng.com/jupyter-install/</id>
    <published>2018-10-17T01:10:25.000Z</published>
    <updated>2022-01-02T05:18:26.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近又开始重新学习Python，学习中使用到了一款编辑器Jupyter Notebooks ，非常想安利给初学python的同学。<br>注：本文内容仅针对windows环境下安装和配置Jupyter Notebooks 。</p><a id="more"></a> <h3 id="1jupyter-notebooks-简介"><a class="markdownIt-Anchor" href="#1jupyter-notebooks-简介"></a> 1.Jupyter Notebooks 简介</h3><p>国际惯例还是来一段官方的介绍：</p><pre><code>Jupyter Notebook是一个Web应用程序，允许您创建和共享包含实时代码，方程，可视化和说明文本的文档。 用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等。</code></pre><p>Notebooks其实就像是你的python笔记本一样，不仅可以运行书写的python代码，同时还支持markdown格式的文本显示。<br>在Notebooks中不仅可以运行python，它还支持R、Julia 和 JavaScript等其他40余种语言。</p><h3 id="2安装jupyter-notebooks"><a class="markdownIt-Anchor" href="#2安装jupyter-notebooks"></a> 2.安装Jupyter Notebooks</h3><p>安装方式大致分为两种：</p><ul><li>pip 方法</li><li>Anaconda 方法</li></ul><h4 id="pip-方法"><a class="markdownIt-Anchor" href="#pip-方法"></a> pip 方法</h4><p>使用pip命令安装之前需要我们先安装Python。此处以python3.6为例</p><p>1.安装Python</p><p>可以在<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">python下载处</a>，选则对应的系统版本，我这里选择<code>Windows x86-64 executable installer</code>下载安装。</p><p>具体的安装就不再赘述，主要说明一下几点：<br>需要注意的是安装时记得勾选<code>Add Python 3.6 to PATH</code>，然后选择<code>Customize installation</code>。<br>添加 Path，是为了以后可以在任何目录下使用 cmd 运行 Python，跟 Java 的 path一样。如果安装过程中没有添加 Path，也可以以后再添加。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133451.png" alt=""></p><p>自定义安装可以选择安装路径，这里我的安装路径为<code>E:\MyTools\Python\Python36</code></p><p>2.升级pip到最新版本</p><p>安装python3.6的同时会安装pip，但此时需要升级pip到最新版</p><p>打开命令提示窗，切换到python3.6的安装目录下的<code>Scripts</code>文件夹。</p><p>执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133509.png" alt=""></p><p>3.安装Jupyter Notebooks</p><p>打开命令提示窗，切换到python3.6的安装目录下的<code>Scripts</code>文件夹。执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure><p>安装完成<code>Scripts</code>文件夹如下图</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133540.png" alt=""></p><p>4.启动 Jupyter Notebooks</p><p>打开命令提示窗，切换到python3.6的安装目录下的<code>Scripts</code>文件夹。执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>出现如下提示，启动成功，并且浏览器自动打开notebook窗口。此时显示的是<code>Script</code>文件夹下的文件目录。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133558.png" alt=""></p><h4 id="anaconda-方法"><a class="markdownIt-Anchor" href="#anaconda-方法"></a> Anaconda 方法</h4><p>对与初学者而言，还是推荐该使用 Anaconda 来安装 Python 和 Jupyter Notebooks。</p><p>在安装 <code>Anaconda</code> 的同时会安装Python 和 Jupyter Notebooks这两个工具，并且还包含相当多数据科学和机器学习社区常用的软件包。</p><p>可以在<a href="https://www.anaconda.com/download/#windows" target="_blank" rel="noopener">Anaconda官网下载页</a>来下载安装包，它提供了python3.6和python2.7两个版本，可以根据自己的需要来下载对应系统的安装文件。具体的安装步骤可以参考<a href="https://www.jianshu.com/p/62f155eb6ac5" target="_blank" rel="noopener">Windows系统安装Anaconda</a></p><h3 id="修改jupyter-notebook工作空间"><a class="markdownIt-Anchor" href="#修改jupyter-notebook工作空间"></a> 修改jupyter notebook工作空间</h3><p>在我们第一次启动Notebooks时，默认显示的是<code>Script</code>文件夹下的文件目录。因为此时notebooks默认的工作空间是安装目录。</p><p>当然了，你也可以自定义一个专属的工作空间，操作如下：</p><p>1.创建一个文件夹，此处我创建了一个<code>jupyter-notebook</code>文件夹，他的目录是<code>E:\MyTools\Python\jupyter-notebook</code></p><p>2.获取jupyter notebook的配置文件<br>打开命令提示窗口，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>此处需要注意的是，如果你已经配置过notebooks的相关信息，执行此命令会提示你是否覆盖原有配置。如果是首次执行此命令，则生成配置到相应目录。如下图所示，输入<code>y</code>直接覆盖</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133620.png" alt=""></p><p>3.修改配置文件</p><p>打开生成的配置文件，修改<code>#c.NotebookApp.notebook_dir = ''</code>此条配置，在单引号中填入我们刚才创建的专属工作空间，此处我这里是<code>E:\MyTools\Python\jupyter-notebook</code>，此条配置默认是注释掉的，所以我们需要删除第一个<code>#</code>，ok,保存配置文件。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133642.png" alt=""></p><p>好了，现在打开命令提示窗口，执行<code>jupyter notebook</code>重新启动notebooks，浏览器相应会打开notebooks主页，主页中相应会显示工作空间中的文件目录。</p><p><strong>注意：启动notebooks之后，不要不要不要关闭该命令提示窗口，因为一旦关闭该窗口就会与本地服务器断开连接</strong></p><h3 id="jupyter-notebook-基本使用"><a class="markdownIt-Anchor" href="#jupyter-notebook-基本使用"></a> jupyter notebook 基本使用</h3><p>如果按照上面的操作进行配置后，启动notebooks后的首页应该是这个样子的</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133701.png" alt=""></p><p>下面对首页上的功能按钮进行基本说明：</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133739.png" alt=""><br>第一部分介绍：</p><ul><li>Files：列出所有文件</li><li>Running：展示你当前打开的终端和笔记本</li><li>Clusters：由 IPython 并行提供的（emmmmm，暂时也没使用过）</li></ul><p>第二部分介绍：<br>点击右侧的<code>New</code>按钮可展开如图的下拉列表按钮，其内包括了可创建的四种工作环境：</p><ul><li>Python3：创建一个可以执行python代码的文件（<code>后面详细介绍</code>）</li><li>Text File：创建文本类型的文件，后缀名为<code>.txt</code></li><li>Folder：创建一个文件夹</li><li>Teminal：在浏览器中打开一的命令窗口</li></ul><p>第三部分介绍：<br>这里的按钮其实就是对当前工作空间内的文件进行复制、重命名等的一系列操作：</p><ul><li>Duplicate：复制文件</li><li>Rename：重命名</li><li>Move：移动文件</li><li>Download：下载文件</li><li>View：在浏览器中预览文件内容</li><li>Edit：编辑文件</li><li>Delete(小图标)：删除选中的文件</li></ul><h3 id="jupyter-notebook-中编写并执行python代码"><a class="markdownIt-Anchor" href="#jupyter-notebook-中编写并执行python代码"></a> jupyter notebook 中编写并执行python代码</h3><p>在首页右侧点击<code>New</code>，选择点击<code>Python3</code>,页面即跳转到一个新的窗口，此时已经创建了一个新的文件，红色区域为该文件的名称(默认为Untitled)，点击即可修改文件名，此处我们命名为<code>test</code>，如下所示，<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133806.png" alt=""></p><p>在<code>In [ ] :</code>后面的输入框中我们可以输入一段python代码进行测试，点击Run按钮执行,也可以快捷键<code>Ctrl+Enter</code>执行代码，结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133830.png" alt=""></p><p>Jupyter Notebooks 的强大之处在于除了能够输入代码之外，你还可以用 Markdown 添加叙述性和解释性文本。比如我想添加一个文字说明，在代码上面添加了一个单元格，并以 Markdown 输入了一个文本。按下<code>Ctrl+Enter</code>，效果如下:<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133850.png" alt=""></p><h3 id="jupyter-notebook-中的快捷键介绍"><a class="markdownIt-Anchor" href="#jupyter-notebook-中的快捷键介绍"></a> jupyter notebook 中的快捷键介绍</h3><p>当你熟练使用notebooks的基本功能后，掌握他的快捷键是十分必要的，这样可以大大提高你的工作效率。下面是一些比较常用的快捷键：</p><p>编辑模式：点击单元格按下<code>Enter</code><br>命令模式（退出编辑模式）：<code>Esc</code></p><p>进入命令模式之后（此时你没有活跃单元），有以下快捷键：</p><ul><li><code>A</code>：在所选单元之上插入一个新的单元</li><li><code>B</code>：在所选单元之下插入一个新的单元</li><li><code>D</code>：连续按两次删除所选的单元</li><li><code>Z</code>：撤销被删除的单元</li><li><code>Y</code>：将当前选中的单元变成一个代码单元</li><li><code>F</code>：查找和替换</li><li><code>Shift +上或下箭头</code>：可选择多个单元。</li><li><code>Shift + M</code>：在多选模式时，可合并你的选择。</li></ul><p>处于编辑模式时（在命令模式时按 Enter 会进入编辑模式），下列快捷键很有用：</p><ul><li><code>Ctrl + Home</code> ：到达单元起始位置</li><li><code>Ctrl + S</code> ：保存进度</li><li><code>Ctrl + Enter</code> ：会运行你的整个单元块</li><li><code>Alt + Enter</code> ：不止会运行你的单元块，还会在下面添加一个新单元</li><li><code>Ctrl + Shift + F</code> ：打开命令面板</li></ul><p>可在命令模式按 <code>H</code> 或进入<code>Help &gt; Keyboard Shortcuts</code>。可以查看键盘快捷键完整列表。如下：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029133909.png" alt=""></p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>关于notebooks的安装和基本用法就先介绍到这里了，有兴趣的朋友不妨动手安装一个试试。</p><h3 id="参考和感谢"><a class="markdownIt-Anchor" href="#参考和感谢"></a> 参考和感谢</h3><p><a href="https://baijiahao.baidu.com/s?id=1601883438842526311&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1601883438842526311&amp;wfr=spider&amp;for=pc</a><br><a href="http://www.cnblogs.com/zlslch/p/6984403.html" target="_blank" rel="noopener">http://www.cnblogs.com/zlslch/p/6984403.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近又开始重新学习Python，学习中使用到了一款编辑器Jupyter Notebooks ，非常想安利给初学python的同学。&lt;br&gt;
注：本文内容仅针对windows环境下安装和配置Jupyter Notebooks 。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://www.larscheng.com/categories/Python/"/>
    
    
      <category term="工具介绍" scheme="https://www.larscheng.com/tags/%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>算法笔试题：1元，5元，10元，20元，50元、100元面值人民币组合给定x元的问题</title>
    <link href="https://www.larscheng.com/rmb-combination/"/>
    <id>https://www.larscheng.com/rmb-combination/</id>
    <published>2018-09-17T11:42:00.000Z</published>
    <updated>2022-01-02T05:18:26.504Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近有一道笔试题引起了小伙伴们的激烈讨论。</p><a id="more"></a> <h3 id="参考博客"><a class="markdownIt-Anchor" href="#参考博客"></a> 参考博客</h3><p>作为算法菜鸟非常感谢大神的分析和举例。<a href="https://blog.csdn.net/qiaoqiao0609/article/details/50830992" target="_blank" rel="noopener">博客地址</a></p><h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h3><pre><code>目前市面上的纸币主要有1元，5元，10元，20元，50元、100元六种，如果要买一件商品x元，有多少种货币组成方式？  </code></pre><h3 id="思路一"><a class="markdownIt-Anchor" href="#思路一"></a> 思路一</h3><p>现有6种面额的纸币用来组合成给定的x元金额。那么可以大致推出这个等式<br>sum 表示给定的金额<br>{x1, x2, x3, x4, x5, x6}分别表示1元，5元，10元，20元，50元、100元的<code>张数</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = x1 * 1 + x2 * 5 + x3 * 10 + x4 * 20 + x5 * 50 + x6 * 100</span><br></pre></td></tr></table></figure><p>如此看来其实就是求解满足这个等式的 {x1, x2, x3, x4, x5, x6} 的所有可能的个数。<br>可以通过循环来依次确定每种面额的纸币有多少张，最终来判断，不同张数的组合最终是否等于x元。<br>于是有了如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 商品金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//符合条件的组合次数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环次数</span></span><br><span class="line">        <span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//硬币面额</span></span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x / a[<span class="number">5</span>]; i++) &#123;</span><br><span class="line">            <span class="comment">//100元可能出现的张数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= x / a[<span class="number">4</span>]; j++) &#123;</span><br><span class="line">                <span class="comment">//50元可能出现的张数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= x / a[<span class="number">3</span>]; k++) &#123;</span><br><span class="line">                    <span class="comment">//20元可能出现的张数</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= x / a[<span class="number">2</span>]; l++) &#123;</span><br><span class="line">                        <span class="comment">//10元可能出现的张数</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt;= x / a[<span class="number">1</span>]; m++) &#123;</span><br><span class="line">                            <span class="comment">//5元可能出现的张数</span></span><br><span class="line">                            <span class="comment">//for(int n=0;n&lt;x/1;n++)&#123;//这步循环可省略</span></span><br><span class="line">                            <span class="keyword">int</span> n = x - (i * a[<span class="number">5</span>] + j * a[<span class="number">4</span>] + k * a[<span class="number">3</span>] + l * a[<span class="number">2</span>] + m * a[<span class="number">1</span>]);</span><br><span class="line">                            sum = i * a[<span class="number">5</span>] + j * a[<span class="number">4</span>] + k * a[<span class="number">3</span>] + l * a[<span class="number">2</span>] + m * a[<span class="number">1</span>] + n * a[<span class="number">0</span>];</span><br><span class="line">                            times++;</span><br><span class="line">                            <span class="keyword">if</span> (sum == x &amp;&amp; n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                count++;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//&#125;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"循环次数："</span> + times);</span><br><span class="line">        System.out.println(<span class="string">"组合数："</span> + count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//指定200元的金额</span></span><br><span class="line">        test1(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"执行时间："</span> + (endTime - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">循环次数：142065</span><br><span class="line">组合数：3274</span><br><span class="line">执行时间：13ms</span><br></pre></td></tr></table></figure><h4 id="结果分析"><a class="markdownIt-Anchor" href="#结果分析"></a> 结果分析</h4><p>这种解决方式虽然可以得到正确的结果，但是计算量很大，循环次数随着指定的金额增大会越来越高。性能也就非常差，基本上数字超过1000，就是无脑循环了。所以这并不是最优解。</p><h3 id="思路二"><a class="markdownIt-Anchor" href="#思路二"></a> 思路二</h3><p>从上面的分析中我们也可以这么考虑，我们希望用<code>m</code>种纸币构成<code>sum</code>元。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = x1 * V1 + x2 * V2 + ... + xm * Vm</span><br></pre></td></tr></table></figure><p>根据最后一个面额Vm的系数的取值为无非有这么几种情况，xm分别取｛0, 1, 2, …, sum/Vm｝,换句话说，上面分析中的等式和下面的几个等式的联合是等价的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sum = x1 * V1 + x2 * V2 + ... + 0 * Vm</span><br><span class="line"></span><br><span class="line">sum = x1 * V1 + x2 * V2 + ... + 1 * Vm</span><br><span class="line"></span><br><span class="line">sum = x1 * V1 + x2 * V2 + ... + 2 * Vm</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">sum = x1 * V1 + x2 * V2 + ... + K * Vm</span><br></pre></td></tr></table></figure><p>其中K是该xm能取的最大数值K = sum / Vm。可是这又有什么用呢？不要急，我们先进行如下变量的定义：</p><p>dp[i][sum] = 用前i种硬币构成sum 的所有组合数。</p><p>那么题目的问题实际上就是求dp[m][sum]，即用前m种纸币（所有纸币）构成sum的所有组合数。</p><p>在上面的联合等式中：</p><ul><li><p>当xm=0时，有多少种组合呢？<br>实际上就是前i-1种纸币组合sum，有dp[i-1][sum]种！</p></li><li><p>xm = 1 时呢，有多少种组合？<br>实际上是用前i-1种纸币组合成(sum - Vm)的组合数，有dp[i-1][sum -Vm]种;</p></li><li><p>xm =2呢， dp[i-1][sum - 2 * Vm]种，等等。</p></li></ul><p>所有的这些情况加起来就是我们的dp[i][sum]。所以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][sum] = dp[i-1][sum - 0*Vm] + dp[i-1][sum - 1*Vm] + dp[i-1][sum - 2*Vm] + ... + dp[i-1][sum - K*Vm];</span><br></pre></td></tr></table></figure><p>其中K = sum / Vm</p><p>换一种更抽象的数学描述就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][sum] = \sum_&#123;k=0&#125;^&#123;sum/vm&#125; dp[i-1][sum - K*Vm]</span><br></pre></td></tr></table></figure><p>通过此公式，我们可以看到问题被一步步缩小，那么初始情况是什么呢？如果sum=0，那么无论有前多少种来组合0，只有一种可能，就是各个系数都等于0；</p><p>dp[i][0] = 1   // i = 0, 1, 2, … , m</p><p>如果我们用二位数组表示dp[i][sum], 我们发现第i行的值全部依赖与i-1行的值，所以我们可以逐行求解该数组。如果前0种硬币要组成sum，我们规定为dp[0][sum] = 0.</p><p>第二种代码实现方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 商品金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//硬币面额</span></span><br><span class="line">        <span class="keyword">int</span> money[]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[n] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">6</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = money[i];j &lt;= n;++j)&#123;</span><br><span class="line">                dp[j] =(dp[j]+dp[j-money[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定200元的金额</span></span><br><span class="line">        test2(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"执行时间："</span> + (endTime - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3274</span><br><span class="line">执行时间：0ms</span><br></pre></td></tr></table></figure><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><p>这种思路属于算法中的动态规划。也是动态规划的经典题目。很明显，大大优化了思路一的性能问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有一道笔试题引起了小伙伴们的激烈讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://www.larscheng.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="面试题" scheme="https://www.larscheng.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="笔试题" scheme="https://www.larscheng.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Quartz学习总结</title>
    <link href="https://www.larscheng.com/quartz-note/"/>
    <id>https://www.larscheng.com/quartz-note/</id>
    <published>2018-08-31T13:00:17.000Z</published>
    <updated>2022-01-02T05:18:26.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="quartz学习总结"><a class="markdownIt-Anchor" href="#quartz学习总结"></a> Quartz学习总结</h3><h2 id="常规需求"><a class="markdownIt-Anchor" href="#常规需求"></a> 常规需求</h2><ul><li>每天早上的闹钟</li><li>定时统计数据</li></ul><a id="more"></a> <h3 id="spring自带支持定时器的任务实现-其可通过简单配置来实现定时任务"><a class="markdownIt-Anchor" href="#spring自带支持定时器的任务实现-其可通过简单配置来实现定时任务"></a> spring自带支持定时器的任务实现。其可通过简单配置来实现定时任务。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTasks</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 */1 *  * * * "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTimeByCorn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cron北京时间："</span>+ <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss:SSS"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="但是当我们的业务需求发生变动比如使用springboot自带的定时器发布的定时任务在运行了一段时间后我们想要修改他的执行时间但又不能关闭项目只能动态修改-怎么办呢"><a class="markdownIt-Anchor" href="#但是当我们的业务需求发生变动比如使用springboot自带的定时器发布的定时任务在运行了一段时间后我们想要修改他的执行时间但又不能关闭项目只能动态修改-怎么办呢"></a> 但是当我们的业务需求发生变动，比如使用springboot自带的定时器发布的定时任务，在运行了一段时间后，我们想要修改他的执行时间，但又不能关闭项目，只能动态修改。怎么办呢？？？</h4><h4 id="quartz任务调度框架就可以解决这种烦恼-让你随意的修改和添加定时任务"><a class="markdownIt-Anchor" href="#quartz任务调度框架就可以解决这种烦恼-让你随意的修改和添加定时任务"></a> Quartz任务调度框架，就可以解决这种烦恼。让你随意的修改和添加定时任务。</h4><h2 id="复杂需求"><a class="markdownIt-Anchor" href="#复杂需求"></a> 复杂需求</h2><ul><li>暂停</li><li>修改</li><li>删除</li><li>管理</li></ul><p>当你在设计定时任务时，遇到了以上几种业务场景时，那么你就可以考虑使用quartz来解决，那么到底什么才是quartz呢？</p><h2 id="quartz框架"><a class="markdownIt-Anchor" href="#quartz框架"></a> quartz框架</h2><p>完全由java开发的开源的任务日程管理系统，即在一个预先确定的时间到达时，负责执行或者通知其他软件组件的系统</p><h3 id="springboot集成quartz小例子"><a class="markdownIt-Anchor" href="#springboot集成quartz小例子"></a> springboot集成quartz小例子</h3><p>我们可以先来看一个springboot中通过quartz实现定时任务的小栗子。</p><h4 id="maven文件"><a class="markdownIt-Anchor" href="#maven文件"></a> maven文件</h4><p>注：springboot2.0以后就已经提供了quartz的依赖支持：<code>spring-boot-starter-quartz</code>,此处我们还是使用官方提供的依赖来举例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz-jobs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建一个job"><a class="markdownIt-Anchor" href="#创建一个job"></a> 创建一个Job</h3><p>即定义一个任务类，实现Job接口，告诉quartz当任务任务的执行具体内容，创建SimpleJob类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.quartz.Job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/21 14:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleJob</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"开始执行简单任务"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接着创建一个最基础的定时任务套路"><a class="markdownIt-Anchor" href="#接着创建一个最基础的定时任务套路"></a> 接着创建一个最基础的定时任务套路</h4><p>QuartzDemo类，简单概括为5步，注意看代码注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.quartz.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.quartz.Job.SimpleJob;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.SimpleScheduleBuilder.simpleSchedule;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/28 09:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取调度器</span></span><br><span class="line">            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//启动调度器：等待执行</span></span><br><span class="line">            scheduler.start();</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">//创建任务详情</span></span><br><span class="line">            JobDetail job = JobBuilder.newJob(SimpleJob.class)</span><br><span class="line">                    .withIdentity(<span class="string">"job1"</span>, <span class="string">"group1"</span>)</span><br><span class="line">                    .build();</span><br><span class="line">           </span><br><span class="line">            <span class="comment">//创建触发器：触发事件，触发条件等</span></span><br><span class="line">            Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">                    .withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>)</span><br><span class="line">                    .startNow()</span><br><span class="line">                    .withSchedule(simpleSchedule()</span><br><span class="line">                            .withIntervalInSeconds(<span class="number">6</span>)<span class="comment">//每6秒执行一次</span></span><br><span class="line">                            .withRepeatCount(<span class="number">10</span>))<span class="comment">//执行10次（实际是11次）</span></span><br><span class="line">                    .build();</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">//将任务详情+触发器绑定并交给调度器来管理</span></span><br><span class="line">            scheduler.scheduleJob(job, trigger);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行QuartzDemo，观察控制台，你会发现一个简单的定时任务已经跑起来了！<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029134011.png" alt=""></p><h3 id="quartz中的要素scheduler任务调度-job任务-jobdetail任务详情-trigger触发器"><a class="markdownIt-Anchor" href="#quartz中的要素scheduler任务调度-job任务-jobdetail任务详情-trigger触发器"></a> Quartz中的要素：scheduler任务调度、Job任务、JobDetail任务详情、Trigger触发器</h3><ul><li>Job：任务的逻辑。通过实现Job接口，定义任务的执行内容，简单说就是定义“做什么？”</li><li>JobDetail：任务的定义，通过newJob()绑定Job类。描述自定义的Job实现类，比如任务的名字。另一方面也是为了防止并发问题，简单说就是定义“谁要做？”</li><li>Trigger：定时器，配置定时器的名称，配置定时器的类型触发方式等，简单说就是定义“什么时候做？”</li><li>Scheduler：调度器。接受一组JobDetail+Trigger即可安排一个任务，所有的调度由他控制</li></ul><h3 id="quartz的调度思路"><a class="markdownIt-Anchor" href="#quartz的调度思路"></a> quartz的调度思路：</h3><ol><li>创建一个具体的任务（Job）</li><li>配置任务的触发时间等（Trigger）</li><li>配置任务的具体内容（JobDetail）</li><li>调度器Scheduled根据JobDetail+Trigger安排此任务去执行<br>用一幅图简单形容一下quartz的原理<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029134025.png" alt=""></li></ol><h3 id="触发器种类"><a class="markdownIt-Anchor" href="#触发器种类"></a> 触发器种类</h3><p>刚才的小例子中的触发器是以秒为时间间隔来定时调度，Quartz中有多种不同类型的触发器：</p><ul><li>SimpleTrigger：用来存储方法只需用执行一次，或者时给定触发事件并重复执行N次并且每次执行延迟一定时间的任务。</li><li>CronTirgger：按照日历出发，例如每周五，每月十号十点钟，适合于更复杂的任务</li><li>DateIntervalTrigger：指定每天的某个时间段内，以一定的时间间隔执行任务。并且它可以支持指定星期。</li><li>CalendarIntervalTrigger：类似于SimpleTrigger，支持的间隔单位有秒，分钟，小时，天，月，年，星期。</li></ul><h3 id="quartz持久化方式"><a class="markdownIt-Anchor" href="#quartz持久化方式"></a> quartz持久化方式</h3><p>Quartz提供两种基本作业存储类型</p><ul><li>第一种类型叫做RAMJobStore<ul><li>最佳的性能，因为内存中数据访问最快<br>不足之处是缺乏数据的持久性，当程序路途停止或系统崩溃时，所有运行的信息都会丢失</li></ul></li><li>第二种类型叫做JDBC作业存储<ul><li>通过调整其quartz.properties属性文件，持久化任务调度信息<br>使用数据库保存任务调度信息后，即使系统崩溃后重新启动，任务的调度信息将得到恢复</li></ul></li></ul><h3 id="quartz中其他知识点"><a class="markdownIt-Anchor" href="#quartz中其他知识点"></a> quartz中其他知识点</h3><p>通过阅读quartz的源码，以及官方的文档发现，quartz的开发者很喜欢用建造者模式。其实这种方式可以使复杂的对象更加清晰，阅读和使用中也更加清楚明了。</p><p>本文其实只是quartz的基础知识的学习和使用入门，springboot2.0之后也对quartz进行了封装，关于quartz更加优雅的使用方式和技巧也会在后面的博文中记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;quartz学习总结&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#quartz学习总结&quot;&gt;&lt;/a&gt; Quartz学习总结&lt;/h3&gt;
&lt;h2 id=&quot;常规需求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常规需求&quot;&gt;&lt;/a&gt; 常规需求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每天早上的闹钟&lt;/li&gt;
&lt;li&gt;定时统计数据&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Quartz" scheme="https://www.larscheng.com/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.x集成Redis</title>
    <link href="https://www.larscheng.com/sb2redis/"/>
    <id>https://www.larscheng.com/sb2redis/</id>
    <published>2018-08-13T03:19:24.000Z</published>
    <updated>2022-01-02T05:18:26.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="redis介绍"><a class="markdownIt-Anchor" href="#redis介绍"></a> Redis介绍</h1><p>Redis数据库是一个完全开源免费的高性能Key-Value数据库。它支持存储的value类型有五种，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）</p><p>Redis非常快，每秒可执行大约110000次的设置(SET)操作，每秒大约可执行81000次的读取/获取(GET)操作。</p><a id="more"></a> <h1 id="开发工具"><a class="markdownIt-Anchor" href="#开发工具"></a> 开发工具</h1><p>IDEA、Maven、SpringBoot2.0.4、Jdk1.8、Redis3.2.100、PostMan</p><h1 id="配置开始"><a class="markdownIt-Anchor" href="#配置开始"></a> 配置开始</h1><h3 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h3><p><strong>spring 封装了两种不同的对象来进行对redis的各种操作，分别是StringTemplate与redisTemplate。</strong></p><ul><li>两者的关系是StringRedisTemplate继承RedisTemplate。</li><li>两者的数据是不共通的；也就是说StringRedisTemplate只能管理StringRedisTemplate里面的数据，RedisTemplate只能管理RedisTemplate中的数据。</li><li>SDR默认采用的序列化策略有两种，一种是String的序列化策略，一种是JDK的序列化策略。</li><li>StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。</li><li>RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。</li></ul><p>其实通俗的来讲：</p><ol><li><p>当你的redis数据库里面本来存的是字符串数据或者你要存取的数据就是字符串类型数据的时候，那么你就使用StringRedisTemplate即可。</p></li><li><p>但是如果你的数据是复杂的对象类型，而取出的时候又不想做任何的数据转换，直接从Redis里面取出一个对象，那么使用RedisTemplate是<br>更好的选择。</p></li></ol><h2 id="stringtemple"><a class="markdownIt-Anchor" href="#stringtemple"></a> StringTemple</h2><h3 id="maven配置"><a class="markdownIt-Anchor" href="#maven配置"></a> Maven配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="yml配置文件"><a class="markdownIt-Anchor" href="#yml配置文件"></a> yml配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8031</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spirng-boot-redis</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">    password:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    jedis:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">8</span> <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">8</span> <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="bullet">-1</span> <span class="comment">#连接池最大阻塞等待时间（使用负值表示没有限制)</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">0</span> <span class="comment"># 连接池中的最小空闲连接</span></span><br></pre></td></tr></table></figure><h3 id="service业务实现"><a class="markdownIt-Anchor" href="#service业务实现"></a> Service业务实现</h3><p>创建StringRedisService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * redis业务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/10 14:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRedisService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(StringRedisService.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String key, String value)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"---------------------&gt;[Redis set start]"</span>);</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"---------------------&gt;[Redis get start]"</span>);</span><br><span class="line">        <span class="keyword">return</span>  stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRedisServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisService stringRedisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringRedisService.setString(<span class="string">"name"</span>,<span class="string">"张三"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(stringRedisService.getString(<span class="string">"name"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Junit测试存入一条数据到redis中,测试效果如下：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029134045.png" alt=""></p><p>可以看到我们已经成功存进去啦，下面测试从redis中去取出刚才存入的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029134110.png" alt=""></p><h2 id="redistemple"><a class="markdownIt-Anchor" href="#redistemple"></a> RedisTemple</h2><p>当我们的数据是复杂的对象类型，那么可以采用RedisTemple</p><h3 id="手动配置"><a class="markdownIt-Anchor" href="#手动配置"></a> 手动配置</h3><p>首先我们需要手动创建Redis的配置类，来自定义序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/10 16:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfiguration</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(RedisConfiguration.class);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis模板，存储关键字是字符串，值jackson2JsonRedisSerializer是序列化后的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.springframework.data.redis.core.RedisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/8/10 16:03</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        RedisSerializer redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">//key</span></span><br><span class="line">        redisTemplate.setKeySerializer(redisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义user实体类"><a class="markdownIt-Anchor" href="#定义user实体类"></a> 定义User实体类</h3><p>注意：这里必须实现序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/10 15:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8289770787953160443L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"userName='"</span> + userName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service方法"><a class="markdownIt-Anchor" href="#service方法"></a> Service方法</h3><p>RedisTemplate中定义了对5种数据结构操作：</p><ul><li>redisTemplate.opsForValue() ：操作字符串</li><li>redisTemplate.opsForHash()  ：操作hash</li><li>redisTemplate.opsForList()  ：操作list</li><li>redisTemplate.opsForSet()   ：操作set</li><li>redisTemplate.opsForZSet()  ：操作有序set</li></ul><p>创建RedisService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * redisTemple 的Service类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/10 16:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(String key,User value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getObj</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (User)redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a class="markdownIt-Anchor" href="#测试-2"></a> 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span>: zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/8/11 10:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisService.setObj(<span class="string">"user"</span>,<span class="keyword">new</span> User(<span class="string">"小明"</span>,<span class="number">22</span>));</span><br><span class="line">        User user = redisService.getObj(<span class="string">"user"</span>);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = redisService.getObj(<span class="string">"user"</span>);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上述setObj()方法,可以看到我们存入redis中的对象<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029134131.png" alt=""></p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>完成以上配置，我们Springboot集成Redis的基本环境就搭建完成了。redis的功能其实很多，redis可以解决很多关系型数据库所不能解决的问题，它可以实现缓存，可以实现持久化、可以做分布式锁等等，如此强大的redis，需要我们不断的学习和实践理解他的功能和原理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#redis介绍&quot;&gt;&lt;/a&gt; Redis介绍&lt;/h1&gt;
&lt;p&gt;Redis数据库是一个完全开源免费的高性能Key-Value数据库。它支持存储的value类型有五种，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）&lt;/p&gt;
&lt;p&gt;Redis非常快，每秒可执行大约110000次的设置(SET)操作，每秒大约可执行81000次的读取/获取(GET)操作。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.larscheng.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.larscheng.com/tags/SpringBoot/"/>
    
      <category term="Redis" scheme="https://www.larscheng.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.x集成MongoDB</title>
    <link href="https://www.larscheng.com/sb2mongoDB/"/>
    <id>https://www.larscheng.com/sb2mongoDB/</id>
    <published>2018-08-09T13:16:45.000Z</published>
    <updated>2022-01-02T05:18:26.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="mongodb"><a class="markdownIt-Anchor" href="#mongodb"></a> MongoDB</h1><p>MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。MongoDB是一个高性能，开源，无模式的文档型数据库，是当前NoSql数据库中比较热门的一种。</p><a id="more"></a> <p>MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bjson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><p>传统的关系数据库一般由数据库（database）、表（table）、记录（record）三个层次概念组成，MongoDB是由数据库（database）、集合（collection）、文档对象（document）三个层次组成。MongoDB对于关系型数据库里的表，但是集合中没有列、行和关系概念，这体现了模式自由的特点。</p><table><thead><tr><th>MySql</th><th>MongoDB</th></tr></thead><tbody><tr><td>数据库</td><td>数据库</td></tr><tr><td>表</td><td>集合</td></tr><tr><td>行</td><td>文档</td></tr><tr><td>记录</td><td>字段</td></tr></tbody></table><h1 id="开发环境"><a class="markdownIt-Anchor" href="#开发环境"></a> 开发环境</h1><p>IDEA、Maven、SpringBoot2.0.4、Jdk1.8、MongoDB4.0、MongoDB Compass Community、PostMan</p><h1 id="配置开始"><a class="markdownIt-Anchor" href="#配置开始"></a> 配置开始</h1><ol><li>Maven 相关配置<br>在pox.xml文件中添加spring-boot-starter-data-mongodb引用</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>资源文件yml配置<br>笔者这里使用yml配置方式，配置时要注意缩进！！！！</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8031</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spirng-boot-mongodb</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    mongodb:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="string">localhost</span>   <span class="comment">#同127.0.0.1</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">      database:</span> <span class="string">test</span>    <span class="comment">#指定操作的数据库</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:图书实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/9 10:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//价格</span></span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="comment">//书名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//简介</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    <span class="comment">//出版社</span></span><br><span class="line">    <span class="keyword">private</span> String publish;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//修改时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Getter、Setter省略....</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建service类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:</span></span><br><span class="line"><span class="comment"> * mongo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/9 10:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDbService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MongoDbService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveObj</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"---------------------&gt;[MongoDB save start]"</span>);</span><br><span class="line">        book.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        book.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        mongoTemplate.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"---------------------&gt;[MongoDB find start]"</span>);</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.findAll(Book.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"---------------------&gt;[MongoDB find start]"</span>);</span><br><span class="line">        Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">"_id"</span>).is(id));</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.findOne(query, Book.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"---------------------&gt;[MongoDB find start]"</span>);</span><br><span class="line">        Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">"name"</span>).is(name));</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.findOne(query, Book.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"---------------------&gt;[MongoDB update start]"</span>);</span><br><span class="line">        Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">"_id"</span>).is(book.getId()));</span><br><span class="line">        Update update = <span class="keyword">new</span> Update().set(<span class="string">"publish"</span>, book.getPublish())</span><br><span class="line">                .set(<span class="string">"info"</span>, book.getInfo())</span><br><span class="line">                .set(<span class="string">"updateTime"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">//updateFirst 更新查询返回结果集的第一条</span></span><br><span class="line">        mongoTemplate.updateFirst(query, update, Book.class);</span><br><span class="line">        <span class="comment">//updateMulti 更新查询返回结果集的全部</span></span><br><span class="line"><span class="comment">//        mongoTemplate.updateMulti(query,update,Book.class);</span></span><br><span class="line">        <span class="comment">//upsert 更新对象不存在则去添加</span></span><br><span class="line"><span class="comment">//        mongoTemplate.upsert(query,update,Book.class);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 删除对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"---------------------&gt;[MongoDB delete start]"</span>);</span><br><span class="line">        mongoTemplate.remove(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteBookById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"---------------------&gt;[MongoDB delete start]"</span>);</span><br><span class="line">        <span class="comment">//findOne</span></span><br><span class="line">        Book book = getBookById(id);</span><br><span class="line">        <span class="comment">//delete</span></span><br><span class="line">        deleteBook(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>controller</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import com.example.mqdemo.mongo.Book;</span><br><span class="line">import com.example.mqdemo.mongo.MongoDbService;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***</span><br><span class="line"> * @author zhengql</span><br><span class="line"> * @date 2018/8/9 10:38</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class BaseController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private MongoDbService mongoDbService;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/mongo/save&quot;)</span><br><span class="line">    public String saveObj(@RequestBody Book book) &#123;return mongoDbService.saveObj(book);&#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/mongo/findAll&quot;)</span><br><span class="line">    public List&lt;Book&gt; findAll() &#123;return mongoDbService.findAll();&#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/mongo/findOne&quot;)</span><br><span class="line">    public Book findOne(@RequestParam String id) &#123;return mongoDbService.getBookById(id);&#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/mongo/findOneByName&quot;)</span><br><span class="line">    public Book findOneByName(@RequestParam String name) &#123;return mongoDbService.getBookByName(name);&#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/mongo/update&quot;)</span><br><span class="line">    public String update(@RequestBody Book book) &#123;return mongoDbService.updateBook(book);&#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/mongo/delOne&quot;)</span><br><span class="line">    public String delOne(@RequestBody Book book) &#123;return mongoDbService.deleteBook(book);&#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/mongo/delById&quot;)</span><br><span class="line">    public String delById(@RequestParam String id) &#123;return mongoDbService.deleteBookById(id);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>运行测试<br>启动项目，打开postman开始接口调试，可以看到成功添加book对象。返回添加成功。<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029134156.png" alt=""></li></ol><p>打开MongoDB Compass Community，连接本地MongoDB，可以看到刚才添加的信息。<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029134215.png" alt=""></p><p>其他接口这里就不一一测试了。</p><h1 id="优化使用"><a class="markdownIt-Anchor" href="#优化使用"></a> 优化使用</h1><p>完成以上配置，我们springBoot集成MongoDB环境基本已经搭建好了。</p><p>但是在使用中会发现一个问题，假如要对数据库操作多个对象，那岂不是每一个对象Service都需要写一套增删查改的方法。</p><p>为了解决这一问题我们可以封装一个通用的操作类来提高效率。</p><p>创建MongoDbDao类如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line">import org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line">import org.springframework.data.mongodb.core.query.Query;</span><br><span class="line">import org.springframework.data.mongodb.core.query.Update;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述:</span><br><span class="line"> * mongoDB基础方法封装</span><br><span class="line"> *</span><br><span class="line"> * @author zhengql</span><br><span class="line"> * @date 2018/8/9 14:01</span><br><span class="line"> */</span><br><span class="line">public abstract class MongoDbDao&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    protected Logger logger = LoggerFactory.getLogger(MongoDbDao.class);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 反射获取泛型类型</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    protected abstract Class&lt;T&gt; getEntityClass();</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 保存一个对象</span><br><span class="line">     * @param t</span><br><span class="line">     */</span><br><span class="line">    public void save(T t) &#123;</span><br><span class="line">        logger.info(&quot;--------------&gt;MongoDB save start&quot;);</span><br><span class="line">        this.mongoTemplate.save(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 根据id从几何中查询对象</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public T queryById(Integer id) &#123;</span><br><span class="line">        Query query = new Query(Criteria.where(&quot;_id&quot;).is(id));</span><br><span class="line">        logger.info(&quot;--------------&gt;MongoDB find start&quot;);</span><br><span class="line">        return this.mongoTemplate.findOne(query, this.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据条件查询集合</span><br><span class="line">     *</span><br><span class="line">     * @param object</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public List&lt;T&gt; queryList(T object) &#123;</span><br><span class="line">        Query query = getQueryByObject(object);</span><br><span class="line">        logger.info(&quot;--------------&gt;MongoDB find start&quot;);</span><br><span class="line">        return mongoTemplate.find(query, this.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据条件查询只返回一个文档</span><br><span class="line">     *</span><br><span class="line">     * @param object</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public T queryOne(T object) &#123;</span><br><span class="line">        Query query = getQueryByObject(object);</span><br><span class="line">        logger.info(&quot;--------------&gt;MongoDB find start&quot;);</span><br><span class="line">        return mongoTemplate.findOne(query, this.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 根据条件分页查询</span><br><span class="line">     * @param object</span><br><span class="line">     * @param start 查询起始值</span><br><span class="line">     * @param size  查询大小</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public List&lt;T&gt; getPage(T object, int start, int size) &#123;</span><br><span class="line">        Query query = getQueryByObject(object);</span><br><span class="line">        query.skip(start);</span><br><span class="line">        query.limit(size);</span><br><span class="line">        logger.info(&quot;--------------&gt;MongoDB queryPage start&quot;);</span><br><span class="line">        return this.mongoTemplate.find(query, this.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 根据条件查询库中符合条件的记录数量</span><br><span class="line">     * @param object</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public Long getCount(T object) &#123;</span><br><span class="line">        Query query = getQueryByObject(object);</span><br><span class="line">        logger.info(&quot;--------------&gt;MongoDB Count start&quot;);</span><br><span class="line">        return this.mongoTemplate.count(query, this.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 删除对象</span><br><span class="line">     * @param t</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public int delete(T t) &#123;</span><br><span class="line">        logger.info(&quot;--------------&gt;MongoDB delete start&quot;);</span><br><span class="line">        return (int) this.mongoTemplate.remove(t).getDeletedCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据id删除</span><br><span class="line">     *</span><br><span class="line">     * @param id</span><br><span class="line">     */</span><br><span class="line">    public void deleteById(Integer id) &#123;</span><br><span class="line">        Criteria criteria = Criteria.where(&quot;_id&quot;).is(id);</span><br><span class="line">        if (null != criteria) &#123;</span><br><span class="line">            Query query = new Query(criteria);</span><br><span class="line">            T obj = this.mongoTemplate.findOne(query, this.getEntityClass());</span><br><span class="line">            logger.info(&quot;--------------&gt;MongoDB deleteById start&quot;);</span><br><span class="line">            if (obj != null) &#123;</span><br><span class="line">                this.delete(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*MongoDB中更新操作分为三种</span><br><span class="line">    * 1：updateFirst     修改第一条</span><br><span class="line">    * 2：updateMulti     修改所有匹配的记录</span><br><span class="line">    * 3：upsert  修改时如果不存在则进行添加操作</span><br><span class="line">    * */</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改匹配到的第一条记录</span><br><span class="line">     * @param srcObj</span><br><span class="line">     * @param targetObj</span><br><span class="line">     */</span><br><span class="line">    public void updateFirst(T srcObj, T targetObj)&#123;</span><br><span class="line">        Query query = getQueryByObject(srcObj);</span><br><span class="line">        Update update = getUpdateByObject(targetObj);</span><br><span class="line">        logger.info(&quot;--------------&gt;MongoDB updateFirst start&quot;);</span><br><span class="line">        this.mongoTemplate.updateFirst(query,update,this.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 修改匹配到的所有记录</span><br><span class="line">     * @param srcObj</span><br><span class="line">     * @param targetObj</span><br><span class="line">     */</span><br><span class="line">    public void updateMulti(T srcObj, T targetObj)&#123;</span><br><span class="line">        Query query = getQueryByObject(srcObj);</span><br><span class="line">        Update update = getUpdateByObject(targetObj);</span><br><span class="line">        logger.info(&quot;--------------&gt;MongoDB updateFirst start&quot;);</span><br><span class="line">        this.mongoTemplate.updateMulti(query,update,this.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 修改匹配到的记录，若不存在该记录则进行添加</span><br><span class="line">     * @param srcObj</span><br><span class="line">     * @param targetObj</span><br><span class="line">     */</span><br><span class="line">    public void updateInsert(T srcObj, T targetObj)&#123;</span><br><span class="line">        Query query = getQueryByObject(srcObj);</span><br><span class="line">        Update update = getUpdateByObject(targetObj);</span><br><span class="line">        logger.info(&quot;--------------&gt;MongoDB updateInsert start&quot;);</span><br><span class="line">        this.mongoTemplate.upsert(query,update,this.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将查询条件对象转换为query</span><br><span class="line">     *</span><br><span class="line">     * @param object</span><br><span class="line">     * @return</span><br><span class="line">     * @author Jason</span><br><span class="line">     */</span><br><span class="line">    private Query getQueryByObject(T object) &#123;</span><br><span class="line">        Query query = new Query();</span><br><span class="line">        String[] fileds = getFiledName(object);</span><br><span class="line">        Criteria criteria = new Criteria();</span><br><span class="line">        for (int i = 0; i &lt; fileds.length; i++) &#123;</span><br><span class="line">            String filedName = (String) fileds[i];</span><br><span class="line">            Object filedValue = getFieldValueByName(filedName, object);</span><br><span class="line">            if (filedValue != null) &#123;</span><br><span class="line">                criteria.and(filedName).is(filedValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        query.addCriteria(criteria);</span><br><span class="line">        return query;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将查询条件对象转换为update</span><br><span class="line">     *</span><br><span class="line">     * @param object</span><br><span class="line">     * @return</span><br><span class="line">     * @author Jason</span><br><span class="line">     */</span><br><span class="line">    private Update getUpdateByObject(T object) &#123;</span><br><span class="line">        Update update = new Update();</span><br><span class="line">        String[] fileds = getFiledName(object);</span><br><span class="line">        for (int i = 0; i &lt; fileds.length; i++) &#123;</span><br><span class="line">            String filedName = (String) fileds[i];</span><br><span class="line">            Object filedValue =getFieldValueByName(filedName, object);</span><br><span class="line">            if (filedValue != null) &#123;</span><br><span class="line">                update.set(filedName, filedValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 获取对象属性返回字符串数组</span><br><span class="line">     * @param o</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String[] getFiledName(Object o) &#123;</span><br><span class="line">        Field[] fields = o.getClass().getDeclaredFields();</span><br><span class="line">        String[] fieldNames = new String[fields.length];</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; fields.length; ++i) &#123;</span><br><span class="line">            fieldNames[i] = fields[i].getName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return fieldNames;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 根据属性获取对象属性值</span><br><span class="line">     * @param fieldName</span><br><span class="line">     * @param o</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static Object getFieldValueByName(String fieldName, Object o) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String e = fieldName.substring(0, 1).toUpperCase();</span><br><span class="line">            String getter = &quot;get&quot; + e + fieldName.substring(1);</span><br><span class="line">            Method method = o.getClass().getMethod(getter, new Class[0]);</span><br><span class="line">            return method.invoke(o, new Object[0]);</span><br><span class="line">        &#125; catch (Exception var6) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将mongoDB常用的CURD操作封装为通用的父类，然后在不同的业务场景下继承该类，通过泛型和反射获取到正在操作的实体类。</p><p>比如我们可以将之前的Book实体类的CURD类进行改造</p><p>创建BookMongoDbDao类继承MongoDbDao</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述:</span><br><span class="line"> *</span><br><span class="line"> * @author zhengql</span><br><span class="line"> * @date 2018/8/9 20:46</span><br><span class="line"> */</span><br><span class="line">@Repository</span><br><span class="line">public class BookMongoDbDao extends MongoDbDao&lt;Book&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;Book&gt; getEntityClass() &#123;</span><br><span class="line">        return Book.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们可以改造Book的Service类<br>原始版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class BookMongoDbService &#123;</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(BookMongoDbService.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存对象</span><br><span class="line">     *</span><br><span class="line">     * @param book</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String saveObj(Book book) &#123;</span><br><span class="line">        logger.info(&quot;---------------------&gt;[MongoDB save start]&quot;);</span><br><span class="line">        book.setCreateTime(new Date());</span><br><span class="line">        book.setUpdateTime(new Date());</span><br><span class="line">        mongoTemplate.save(book);</span><br><span class="line">        return &quot;添加成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //其他操作方法......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class BookMongoDbService &#123;</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(BookMongoDbService.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private BookMongoDbDao bookMongoDbDao;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存对象</span><br><span class="line">     *</span><br><span class="line">     * @param book</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String saveObj(Book book) &#123;</span><br><span class="line">        logger.info(&quot;---------------------&gt;[MongoDB save start]&quot;);</span><br><span class="line">        book.setCreateTime(new Date());</span><br><span class="line">        book.setUpdateTime(new Date());</span><br><span class="line">        mongoTemplate.save(book);</span><br><span class="line">        return &quot;添加成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String saveObj2(Book book) &#123;</span><br><span class="line">        book.setCreateTime(new Date());</span><br><span class="line">        book.setUpdateTime(new Date());</span><br><span class="line">        bookMongoDbDao.save(book);</span><br><span class="line">        return &quot;添加成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造后的saveObj2方法的效果与以前的一致，但是大大的提高了开发效率。不需要重复的编写CURD的方法。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>通过以上的配置已经完成springboot与mongoDB集成环境的初步搭建，当然了MongoDB在springboot中的使用不仅于此，还有更多的功能和更优雅的使用方式等待着我们去发掘。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mongodb&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mongodb&quot;&gt;&lt;/a&gt; MongoDB&lt;/h1&gt;
&lt;p&gt;MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。MongoDB是一个高性能，开源，无模式的文档型数据库，是当前NoSql数据库中比较热门的一种。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.larscheng.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.larscheng.com/tags/SpringBoot/"/>
    
      <category term="MongoDB" scheme="https://www.larscheng.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>[SpringCloud学习] - 浅谈微服务架构</title>
    <link href="https://www.larscheng.com/microservice-note/"/>
    <id>https://www.larscheng.com/microservice-note/</id>
    <published>2018-07-26T12:57:35.000Z</published>
    <updated>2022-01-02T05:18:26.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>目前越来越多的话题都围绕着微服务，许多公司也在使用微服务架构。笔者也刚刚接触微服务不久，也算是微服务架构的初学者，谨以本文来记录学习过程中对微服务架构的一些理解。好啦，废话不多说，我们往下看。</p><a id="more"></a> <h1 id="微服务是什么"><a class="markdownIt-Anchor" href="#微服务是什么"></a> 微服务是什么？</h1><p>微服务，英文名<code>MicroService</code>，他是一种架构风格一种架构设计模式，通常表现为一个庞大而复杂的应用其背后是由数个职责分明的服务组成，这些服务他们各自分工明确，可以独立部署同时也可以根据需求进行扩展，各个服务之间松耦合并且可相互通信。<br>结合我们生活来说，一个公司内部组织架构也算是一种微服务的表现，公司内部按不同职能划分了许多部门，人事部门、财务部门、开发部门、测试部门、运维部门等等这些部门都是一个个的微服务，各个部门之间相互独立办公同时也相互协同办公。这些所有的部门组成了公司的整体。<br>微服务的概念出自于<code>马丁·福勒（Martin fowler）</code>，他对微服务的定义如下：</p><blockquote><p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相协作（通常是基于 HTTP 协议的 RESTful API）。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，对具体的服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建  。（摘自王磊先生的《微服务架构与实践》）</p></blockquote><h1 id="为什么要用微服务"><a class="markdownIt-Anchor" href="#为什么要用微服务"></a> 为什么要用微服务？</h1><p>微服务从最初的无人问津，到现在大红大紫，被大家广泛使用。那么问题来了，为什么要用微服务架构？为什么就不用以前的架构了？我们先来了解一下传统的架构方式。</p><h2 id="单体架构"><a class="markdownIt-Anchor" href="#单体架构"></a> 单体架构</h2><p>应用程序作为单体进行打包和部署，称之为单体应用，例如基于SpringMVC+Mybatis+Spring开发的许多Java项目最终被打包成一个war格式的文件部署在Tomcat或者Jetty服务器上。而这种单体应用的架构理论就称之为单体架构。<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029134253.png" alt=""></p><h3 id="单体应用的局限性"><a class="markdownIt-Anchor" href="#单体应用的局限性"></a> 单体应用的局限性</h3><p>一个单体应用他可能内部也区分了业务逻辑模块，但最终都打包为一个单体，随着时间的推移，单体式应用的不足就暴露出来了。</p><ol><li>复杂度高难以理解<ul><li>随着时间推移，业务需求的升级，代码量越来越大，项目内部逻辑变得越来越复杂，各个模块之间区别模糊，逻辑混乱，开发人员对于代码的理解难度加大。</li></ul></li><li>代码维护难度升级<ul><li>时间线拉长后，一个项目可能会有许多程序员接手，代码复杂度增大之后，前人留下的坑后人来填，刚上手的程序员可能会面对一个又一个问题。</li></ul></li><li>部署速度之间变慢<ul><li>单体架构的应用内部业务模块众多，每次功能的变更都需要重新部署整个应用，项目的启动时间可能从最初的一分钟演变为最终的十分钟，这种情况乱其实很多。</li></ul></li><li>可靠性稳定性直线下降<ul><li>由于整个项目是部署在一个实例中，一个小小的bug可能就会导致整个应用的崩溃。</li></ul></li><li>技术创新难以实现<ul><li>受项目本身限制，团队成员必须使用一种框架和语言，模块无法明确清晰的拆分，升级框架和使用新技术的风险和成本很高。</li></ul></li><li>资源需求冲突难以解决<ul><li>不同的业务对物理资源的需求是不同，比如处理图片音乐视频的模块是CPU密集型的模块，而像订单、日志等是属于IO密集型模块，当需要提升IO密集模块性能时，但由于我们的应用是单体架构，所有模块都在一个架构下，所以我们想要对某一模块进行升级扩展不得不考虑其他模块。随着需求进一步变更，资源需求冲突会成为整个应用最大的痛点。</li></ul></li></ol><ul><li><strong>单体应用在面对这写日益严峻的问题时，微服务架构则从根本上杜绝了这些隐患的产生。</strong></li></ul><h1 id="微服务能用在哪"><a class="markdownIt-Anchor" href="#微服务能用在哪"></a> 微服务能用在哪？</h1><p>微服务架构往往用于解决复杂问题，他适合将复杂庞大的问题拆分为相互独立又相互联系的小个体。相比于单体架构，微服务架构是构建业务复杂度高，规模大，需要长期持续迭代这一类应用时更好的选择。<br>现在已经有很多公司采用微服务架构来解决单体式架构可能会造成的隐患，笔者所在的团队就选用了基于SpringBoot的SpringCloud，如此一来能够大大提高开发效率的同时降低项目的维护难度，将项目分解为多个微服务组件，各个相对独立的同时又相互协作。不用再构建并且维护一个臃肿又令人头疼的单体应用。<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/docker/20191029134316.png" alt=""></p><h2 id="主流的微服务框架介绍"><a class="markdownIt-Anchor" href="#主流的微服务框架介绍"></a> 主流的微服务框架介绍</h2><ul><li>Spring Boot</li><li>Spring Cloud</li><li>Dubbo</li><li>Dropwizard</li><li>Akka</li><li>Vert.x、Lagom、ReactiveX、Spring 5</li></ul><h1 id="微服务的优点"><a class="markdownIt-Anchor" href="#微服务的优点"></a> 微服务的优点</h1><p>说了那么多，那在使用微服务之后到底有哪些优势呢？</p><ol><li>应用复杂度降低，代码可读性高，易于开发。<ul><li>由于微服务单个模块就相当于一个项目，开发这个模块我们就只需关心这个模块的逻辑即可，代码量和逻辑复杂度都会降低，从而易于开发和维护。</li></ul></li><li>容错率更高<ul><li>由于各服务相互独立，当某一模块出现bug，只是针对与某一个服务组件出现故障而已，不会影响其他模块的使用，同时开发人员可以快速的解决问题。</li></ul></li><li>技术选型不受影响<ul><li>各个服务独立，完全可以使用不同的语言来实现其内部业务。</li></ul></li><li>资源冲突问题顺利解决<ul><li>在单体应用中存在的资源冲突问题，在微服务中，我们完全可以根据服务本身的特性对性能进行升级。</li></ul></li></ol><h1 id="微服务的缺点"><a class="markdownIt-Anchor" href="#微服务的缺点"></a> 微服务的缺点</h1><p>任何架构都是在实际开发中慢慢演化出来的，是为更好地适应开发者们的需求。所以微服务也存在着自身的不足之处。</p><ol><li>对开发者要求更高<ul><li>各个服务根据不同业务，使用到的语言、数据库、技术都存在差异，这对开发者本身就是一个挑战。</li></ul></li><li>运维难度提升<ul><li>微服务架构有许多服务组件，而部署一个微服务应用也是十分复杂的过程，单体架构中只需要维护一个应用的正常运行，但是在微服务中，但是一种服务可就就有很多实例，可能需要维护数十个服务，所以自动化部署也是应用成功运行的基础。</li></ul></li><li>微服务自身的复杂性<ul><li>为服务应用本身就是一个分布式系统，从整体上来说它也十分复杂。</li></ul></li></ol><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>没有哪一个好的架构是被设计出来的，也没有哪一个架构可以解决所有的问题，每一个好的架构都是在不断适应业务需求的过程中不断被演化出来的。所以每种架构方式都有各自的优势和缺陷，没有最好，只有最合适！</p><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h2><blockquote><p>如何通俗易懂的解释微服务：<a href="http://www.cnblogs.com/hang520/p/9239071.html" target="_blank" rel="noopener">http://www.cnblogs.com/hang520/p/9239071.html</a><br>微服务从涉及到部署：<a href="https://github.com/DocsHome/microservices" target="_blank" rel="noopener">https://github.com/DocsHome/microservices</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;目前越来越多的话题都围绕着微服务，许多公司也在使用微服务架构。笔者也刚刚接触微服务不久，也算是微服务架构的初学者，谨以本文来记录学习过程中对微服务架构的一些理解。好啦，废话不多说，我们往下看。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.larscheng.com/tags/SpringCloud/"/>
    
      <category term="MicroService" scheme="https://www.larscheng.com/tags/MicroService/"/>
    
      <category term="微服务" scheme="https://www.larscheng.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>基于hexo和coding免费搭建个人博客网站</title>
    <link href="https://www.larscheng.com/create-blog/"/>
    <id>https://www.larscheng.com/create-blog/</id>
    <published>2018-07-24T01:25:48.000Z</published>
    <updated>2022-01-02T05:18:26.504Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>现如今有很多人每天在看博客，也有很多人在各大平台发表博客，今天我们通过hexo博客框架来自己动手搭建一个免费并且完全DIY的个人博客。Hexo的优势在于方便快捷并且提供的主题丰富，本文是笔者在搭建博客期间的一些经验分享。还是先来看一下搭建完成后的效果吧—<a href="http://LarsCheng.coding.me" target="_blank" rel="noopener">我的博客</a>。</p><a id="more"></a> <h2 id="hexo介绍"><a class="markdownIt-Anchor" href="#hexo介绍"></a> Hexo介绍</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是由台湾在校大学生tommy351(twitter名)设计的一款基于node的静态网站生成器，它使用MarkDown语法解析文章，能够几秒内生成静态网页。使用hexo搭建博客你会发现页面浏览十分流畅，这就是静态网页部署的优势所在。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><h3 id="搭建前提"><a class="markdownIt-Anchor" href="#搭建前提"></a> 搭建前提</h3><p>在开始搭建博客网站之前需要以下准备：</p><ul><li>安装 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a></li><li>安装 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li><li>注册 <a href="https://coding.net/" target="_blank" rel="noopener">Coding</a> 账号</li></ul><h3 id="下载并安装node"><a class="markdownIt-Anchor" href="#下载并安装node"></a> 下载并安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node</a></h3><p>进入<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node下载</a>页面，此处笔者下载当前稳定版本8.11.3,安装过程比较简单此处不再赘述。安装完成后在命令提示符下使用以下命令检测是否安装成功,如果显示安装的版本号即表示安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">v8.11.3</span><br></pre></td></tr></table></figure><h3 id="下载并安装git"><a class="markdownIt-Anchor" href="#下载并安装git"></a> 下载并安装<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a></h3><p>进入<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git下载</a>页面，选择对应的系统版本和git版本号进行下载，安装过程此处不再赘述。安装完成后在桌面右键可以看到git bash或者开始菜单中也可以找到。本文后续大部分操作也都在git bash中完成。<br>安装完成Git后，需要对Git进行用户名和密码的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><blockquote><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。----<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git教程</a></p></blockquote><h3 id="hexo安装"><a class="markdownIt-Anchor" href="#hexo安装"></a> Hexo安装</h3><p>首先我们先新建一个文件夹作为个人博客的文件目录，此处笔者创建blog文件夹。进入该文件夹后打开Git bash，开始安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli   <span class="comment">#安装Hexo脚手架  </span></span><br><span class="line">$ hexo init              <span class="comment">#Hexo自动在当前文件夹下下载搭建网站所需的所有文件</span></span><br><span class="line">$ npm install              <span class="comment">#安装依赖包</span></span><br></pre></td></tr></table></figure><p>此时在blog文件夹中我们可以看到已经生成了搭建网站所需要的所有文件了，其目录如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">│  .gitignore</span><br><span class="line">│  package.json</span><br><span class="line">│  _config.yml                     <span class="comment">#博客网站的配置信息，核心配置文件</span></span><br><span class="line">│  </span><br><span class="line">├─node_modules                                  </span><br><span class="line">│    </span><br><span class="line">├─scaffolds                        <span class="comment">#模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span></span><br><span class="line">│      draft.md</span><br><span class="line">│      page.md</span><br><span class="line">│      post.md</span><br><span class="line">│      </span><br><span class="line">├─<span class="built_in">source</span>                           <span class="comment">#资源文件夹是存放用户资源的地方，我们新建的md格式的博客就在此处</span></span><br><span class="line">│  └─_posts</span><br><span class="line">│          hello-world.md          <span class="comment">#hexo为我们创建的hello-world样例文件</span></span><br><span class="line">│          </span><br><span class="line">└─themes                           <span class="comment">#主题文件夹。Hexo会根据主题来生成静态页面。</span></span><br><span class="line">    └─landscape                    <span class="comment">#默认使用的主题</span></span><br></pre></td></tr></table></figure><p>现在一个简单的个人博客已经创建完成，我们可以使用<code>hexo generate</code>命令来生成静态网页。然后通过<code>hexo server</code>命令启动本地服务器来预览一下hexo为我们提供的最原始博客页面。当然这两个命令也可以简写如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g    </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>浏览器访问http://localhost:4000/   ，此时就可以看见一个简单的博客页面。该页面正是source目录下hello-world.md文件生成的静态网页。<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/hexo/20191014133409.png" alt="hello-world"></p><h3 id="部署博客到coding"><a class="markdownIt-Anchor" href="#部署博客到coding"></a> 部署博客到coding</h3><p>Coding与Github相似，都是基于Git的代码托管平台，GitHub大家应该都很熟悉，相对与Coding来说，GitHub面向英语系国家程序员，Coding面向中国程序猿，而且Coding的私有库可免费使用这是最大的区别。两者的用法和操作其实大同小异。笔者也是第一次使用Coding，所以大家共同学习。本文就使用了Coding来作为博客项目的托管平台。</p><h4 id="新建仓库"><a class="markdownIt-Anchor" href="#新建仓库"></a> 新建仓库</h4><p>1.打开coding主页，创建新项目</p><p><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/hexo/20191014133511.png" alt="这里写图片描述"><br>新建一个名为yourname.coding.me的项目，其中这里的yourname最好是coding注册时的username，等项目部署成功后它就是你博客的访问地址。如下所示coding可以创建私有仓库，GitHub中是要收费的。<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/hexo/20191014133533.png" alt="这里写图片描述"><br>2.开启Pages服务，开启后我们就可以通过 <code>用户名</code>+网站后缀来访问博客，而且还可以绑定域名通过固定域名来访问。进入项目-&gt;代码-&gt;Pages服务，具体操作如下：<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/hexo/20191014133559.png" alt="这里写图片描述"></p><h4 id="连接到coding"><a class="markdownIt-Anchor" href="#连接到coding"></a> 连接到Coding</h4><p>在管理Git项目时，无论是GitHub还是Coding我们可以通过<code>SSH、HTTPS</code>两种方式来<code>clone</code>或者<code>push</code>代码，当使用<code>HTTPS</code>的方式来管理代码，每次操作时都需要验证用户名和密码；而使用SSH方式<code>Push</code>代码之前需要配置个人的SSH key,这样就可以省掉繁琐的验证步骤。<br>当然，我们也可以选择通过HTTPS方式来进行项目的管理，那么请<strong>跳过SSH key的配置步骤</strong>，直接阅读项目部署步骤的内容。</p><h4 id="配置ssh-key"><a class="markdownIt-Anchor" href="#配置ssh-key"></a> 配置SSH key</h4><p>以下命令皆在Git bash下执行<br><strong>1.检查你的电脑上是否已经生成了SSH Key</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure><p>如果该目录下存在<code>id_rsa.pub</code>或<code>id_dsa.pub</code>文件,那么直接进行<strong>第三步</strong></p><p><strong>2.创建一个SSH Key</strong><br>执行创建命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"username"</span>         <span class="comment">#username为git config --global user.name,即git中所配置的用户名</span></span><br></pre></td></tr></table></figure><p>代码参数含义：</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">描述</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center"><code>-t</code></td><td style="text-align:left">指定密钥类型，默认是rsa，可以省略。</td><td style="text-align:center"><code>rsa</code></td></tr><tr><td style="text-align:center"><code>-C</code></td><td style="text-align:left">设置注释文字，比如用户名。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>-f</code></td><td style="text-align:left">-f指定密钥文件存储文件名。</td><td style="text-align:center"><code>id_rsa</code></td></tr></tbody></table><p>以上命令省略了<code>-f</code>参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的SSH key代码，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair. </span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p>此处我们直接按下回车使用默认文件名创建，那么就会生成id_rsa和id_rsa.pub两个秘钥文件。<br>接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是Coding管理者的密码），当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到Git服务器上了，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>接下来，就会显示如下一些提示，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa. </span><br><span class="line">Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure><p><strong>3.在Coding中配置SSH Key</strong><br>在刚才生成的文件夹中找到<code>id_rsa.pub</code>,用记事本打开后全选复制。<br>打开浏览器，进入我们Coding的工作台，账户-&gt;SSH公钥，按如下操作，将生成的SSH key添加。<br><img src="https://cdn.jsdelivr.net/gh/larscheng/myImg/blogImg/hexo/20191014133624.png" alt="图"></p><h4 id="部署发布项目"><a class="markdownIt-Anchor" href="#部署发布项目"></a> 部署发布项目</h4><p>在我们创建的博客项目工作空间中找到_config.yml文件，打开后在文件的最后方，可以看到如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy：   </span><br><span class="line">    type:</span><br></pre></td></tr></table></figure><p>对该配置进行修改如下(<strong>注意缩进</strong>)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy：   </span><br><span class="line">    type: git</span><br><span class="line">    repository: git@git.coding.net:yourname/yourname.coding.me.git       #发布到Coding（SSH方式）</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>该配置指定了Coding仓库的地址，并通过SSH方式进行连接。同样我们也可以通过HTTPS方式。repository写法如下：</p><blockquote><p>repository: <a href="https://git.coding.net/yourname/yourname.coding.me.git" target="_blank" rel="noopener">https://git.coding.net/yourname/yourname.coding.me.git</a></p></blockquote><p>保存后关闭，在项目当前目录打开Git Bash ，因为项目的部署会用到<code>hexo-deployer-git</code>，所以先安装该插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成后，开始项目的部署操作，每次的部署操作可以分三步来，分别如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean                #清除缓存文件和已生成的静态文件。更换主题后一定要用</span><br><span class="line">$ hexo g                    #完整命令为hexo generate ，生成静态文件。</span><br><span class="line">$ hexo d                    #完整命令为hexo deploy ，部署网站。</span><br></pre></td></tr></table></figure><p>如果你使用的是SSH方式的话，应该可以看到commit和push成功的记录，说明已经部署成功。如果使用的是HTTPS方式，会弹出输入用户名密码的输入框，键入你的coding用户名密码即可。</p><blockquote><p>此时打开浏览器访问 <a href="https://yourname.coding.me" target="_blank" rel="noopener">https://yourname.coding.me</a></p></blockquote><h3 id="主题更换"><a class="markdownIt-Anchor" href="#主题更换"></a> 主题更换</h3><p>我们刚才搭建的博客使用的是默认的<code>landscape</code>主题。我们也可以在hexo提供的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题页面</a>中选择自己喜欢的进行配置。在博客文件夹下的themes文件夹，该目录下存放的就是所有的主题资源。此处笔者以Next主题的配置为例。</p><ol><li>首先第一步下载主题,下载命令格式为<code>git clone {主题链接} themes/{主题名称}</code>。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载完成后，在themes文件夹下就可以看到Next主题的相关文件。<br>2. 下载完成，接着就是启用主题。<br>在博客文件根目录中找到<code>_config.yml</code>文件，并用记事本打开，对<code>theme</code>属性进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next      #原本为lanscape主题，此处直接修改为我们下载的主题名</span><br></pre></td></tr></table></figure><ol start="3"><li>完成以上配置后，我们既定要记得清楚缓存并重新部署项目，操作如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$   hexo clean          #清除缓存</span><br><span class="line">$   hexo g              #生成静态文件</span><br><span class="line">$   hexo d              #部署博客网站</span><br></pre></td></tr></table></figure><p>此时，我们的博客主题已经修改成功。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>搭建个人博客网站，并且坚持在网站上更发表自己的一些知识积累是很有意义的，这个过程不但让你融会贯通而且完全转化为自己的理解。笔者在搭建过程中也遇到许多坑，多亏有网上的众多大牛前辈。先回过头来看其实还是很有成就感的，当然当前进度的博客网站只能算是刚刚搭建好，hexo本来就是完全DIY的，主题和页面都需要更多的优化，最重要的是内容不能停，既然搭建好了，就坚持写下去吧。</p><blockquote><p>大家如果有问题或者笔者博客内容有误可以留言交流，共同学习。</p></blockquote><h2 id="参考的文章"><a class="markdownIt-Anchor" href="#参考的文章"></a> 参考的文章</h2><blockquote><p>hexo开发手册可以初步了解hexo：  <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a><br>博客搭建的基础教程写得非常详细： <a href="https://www.jianshu.com/p/eb002d35436c" target="_blank" rel="noopener">https://www.jianshu.com/p/eb002d35436c</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;现如今有很多人每天在看博客，也有很多人在各大平台发表博客，今天我们通过hexo博客框架来自己动手搭建一个免费并且完全DIY的个人博客。Hexo的优势在于方便快捷并且提供的主题丰富，本文是笔者在搭建博客期间的一些经验分享。还是先来看一下搭建完成后的效果吧—&lt;a href=&quot;http://LarsCheng.coding.me&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="https://www.larscheng.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://www.larscheng.com/tags/Hexo/"/>
    
      <category term="Coding" scheme="https://www.larscheng.com/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.larscheng.com/test/"/>
    <id>https://www.larscheng.com/test/</id>
    <published>2018-07-23T12:57:35.000Z</published>
    <updated>2022-01-02T05:18:26.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a> <h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>    <div id="aplayer-aEonjmYz" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="3025864043" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-order="random" data-volume="0.3"></div><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p>按时大苏打实打实大苏打啊实打实打算</p></blockquote><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><hr><h2 id="restful-api概述"><a class="markdownIt-Anchor" href="#restful-api概述"></a> RESTful API概述</h2><h3 id="restful-api是什么"><a class="markdownIt-Anchor" href="#restful-api是什么"></a> RESTful API是什么</h3><p>RESTful是Representational State Transfer的缩写，代表着表征状态转移。REST拥有一组架构约束条件和原则，只要符合这一套约束原则的架构，就是RESTful架构。<br>需要注意的是，REST并没有提供新的组件、技术，也并不是专门为HTTP提供规范，而是通过约束和原则去合理使用Web的现有特征和能力（是的，REST受到Web现有特征的影响还是比较深的）。RESTful API 是一种围绕 <font color="LightSalmon">资源（resource）</font>展开的<font color="LightSalmon">无状态传输的API</font>设计方案。所有的HTTP Action，都应该是在相应resource上可以被操作和处理的，而API就是对资源的管理操作，而这个具体操作是由 HTTP Action 指定的。</p><p><img src="../../img/hexo/RESTful.png" alt="RESTful框架"></p><p>RESTful API在功能上更像是隔离层，要访问服务器资源，就必须找到API入口。如果这个入口的规则遵循REST风格，那就是RESTful设计框架。</p><h3 id="restful-api产生的意义"><a class="markdownIt-Anchor" href="#restful-api产生的意义"></a> RESTful API产生的意义</h3><p>随着移动互联网的发展，各类Client层出不穷，RESTful可以通过一套统一的接口为Web、ios和Android提供服务。对于广大平台来说，例如微信公共平台，它们不需要有显示的前段，只需要一套提供服务的接口，RESTful正好是最佳选择。</p><h2 id="规定的资源格式"><a class="markdownIt-Anchor" href="#规定的资源格式"></a> 规定的资源格式</h2><h3 id="资源的标识url"><a class="markdownIt-Anchor" href="#资源的标识url"></a> 资源的标识URL</h3><p>资源是一个数据单元，这个单元可大可小，根据业务规模自主定制。要准确识别一个资源，需要有一个唯一标识，在Web中这个唯一标识就是URL(Uniform Resource Identifier)。<br>URL的设计应该具有自适性、可寻址、直观性的原则。用/来表示层级，用_或-来分割单词，用？来过滤资源。</p><h3 id="http协议语义支持"><a class="markdownIt-Anchor" href="#http协议语义支持"></a> HTTP协议语义支持</h3><ul><li>GET：从服务器取出资源或资源列表</li><li>POST：在服务器新建一个资源</li><li>PUT：客户端提供数据，以整体的方式更新服务器资源</li><li>PATCH：只更新服务器一个资源的一个属性</li><li>DELETE：从服务器删除资源</li><li>HEAD：从服务器获取报头信息（不是资源）</li><li>OPTIONS：获取客户端能对资源做什么操作的信息</li></ul><p>除了POST不是幂等的，其他几个都是幂等的。<br>HTTP的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。幂等性的一个实例：在网速不够快的条件下，客户端发送第一个请求后不能立即得到响应，由于不能确定是否请求是否被成功提交，所以它有可能会再次发送另一个相同的请求，幂等性决定了第二个请求是否有效。幂等情况下，第一次请求成功实现了事务操作，第二次请求就一定不能再次操作事务。</p><h3 id="媒体类型"><a class="markdownIt-Anchor" href="#媒体类型"></a> 媒体类型</h3><p>客户端与服务端进行交互式，需要规定双方能够接受的媒体表现形式。常见的媒体格式类型有：</p><ul><li>application/json：JSON数据格式</li><li>application/xhtml+xml：XHTML数据格式</li><li>application/xml：XML数据格式</li><li>application/atom+xml：ATOM XML聚合格式</li></ul><p>在设计RESTful API的时候，要规定端端之间具有统一的数据传输格式，目前JSON数据格式使用范围比较广。</p><h2 id="好的api是什么样的"><a class="markdownIt-Anchor" href="#好的api是什么样的"></a> 好的API是什么样的</h2><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则他的路径应该设计成以下的样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ https://api.example.com/v1/zoos</span><br><span class="line">+ https://api.example.com/v1/animals</span><br><span class="line">+ https://api.example.com/v1/employees</span><br></pre></td></tr></table></figure><h3 id="博客魔改记录"><a class="markdownIt-Anchor" href="#博客魔改记录"></a> 博客魔改记录</h3><ul><li>归档侧边栏显示查看更多，要修改<code>blog/node_modules/hexo/lib/plugins/helper/list_archives.js</code>内容</li><li>新增友情链接侧边栏</li><li>page页显示字数、阅读量、等等</li><li>添加page页类型<code>others</code></li><li>导航渐变色</li><li>首页不显示全图</li><li>二级导航栏</li><li>文章h1\h2\h3。。。显示优化</li><li>自由调整top_img的布局</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (style === <span class="string">'list'</span>) &#123;</span><br><span class="line">  result += <span class="string">`&lt;ul class="<span class="subst">$&#123;className&#125;</span>-list"&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = data.length; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    item = data[i];</span><br><span class="line"></span><br><span class="line">    result += <span class="string">`&lt;li class="<span class="subst">$&#123;className&#125;</span>-list-item"&gt;`</span>;</span><br><span class="line"></span><br><span class="line">    result += <span class="string">`&lt;a class="<span class="subst">$&#123;className&#125;</span>-list-link" href="<span class="subst">$&#123;link(item)&#125;</span>"&gt;`</span>;</span><br><span class="line">    result += transform ? transform(item.name) : item.name;</span><br><span class="line">    result += <span class="string">'&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (showCount) &#123;</span><br><span class="line">      result += <span class="string">`&lt;span class="<span class="subst">$&#123;className&#125;</span>-list-count"&gt;<span class="subst">$&#123;item.count&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result += <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    result += <span class="string">`&lt;li class="<span class="subst">$&#123;className&#125;</span>-list-item"&gt;`</span>;</span><br><span class="line">    result += <span class="string">`&lt;a style="text-align: center;font-size: 13px" class="<span class="subst">$&#123;className&#125;</span>-list-link" href="<span class="subst">$&#123;link()&#125;</span>"&gt;`</span>;</span><br><span class="line">    result += <span class="string">'查看更多'</span>;</span><br><span class="line">    result += <span class="string">'&lt;/a&gt;'</span>;</span><br><span class="line">    result += <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">  result += <span class="string">'&lt;/ul&gt;'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="https://www.larscheng.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="tag测试" scheme="https://www.larscheng.com/tags/tag%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
